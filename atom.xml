<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CrazyIT</title>
  
  <subtitle>Toss more than life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-27T11:14:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.CrazyDC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>夜</title>
    <link href="http://yoursite.com/2019/07/12/%D2%B9/"/>
    <id>http://yoursite.com/2019/07/12/ҹ/</id>
    <published>2019-07-12T15:59:59.000Z</published>
    <updated>2019-07-27T11:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>深夜已来临，竟未感一丝困意。在这闷热的夏日，此刻竟稍感凉爽。不知是否夜深人静，心静如水而致，还是一颗浮躁不安的心，只为寻求片刻宁静。</p><p>忙忙碌碌的一天，在归零的一刻画上句号。一天的结束，意味着新的一天的开始。过去的时光无论是怎样的，都无法抗拒即将到来的未知。期待未来，亦或是怀念过去，也不过是完成句号前的一个个逗号。</p><p>许久未写心情，大概一年有余。再次动笔的原因，简单的想纪念一下今天的昨晚。每一个夜晚都是与众不同的，简单的是晚的程度不同。美其实很简单，不同的心情会发现不一样的美。</p><a id="more"></a><p>写到此处，困意虽无，但略感恍惚，却不忍止住。细数一生的几个阶段，可以说是希望、向往、期望、遗忘。向往虽没了希望时的热情，但却充满了期望和遗忘曾经的激情。虽时感迷茫，但心之所想，爱之所驱，亦是前进不竭的动力。</p><p>夜正深，思更浓。古有才子赴京赶考，遥至千里，只为功成名就，光宗耀祖。今欲彰显吾志，背井离乡，只为叶落归根之感。时常想何为团圆，才子家中，园丁兴旺即为团圆。然于家相隔甚远，诸百般无奈恐与家人相伴，退有不甘，进亦难行。每感至此，恨有心而无力，兼而难之。</p><p>百感涌于心头，难解五味杂陈。往事随风，却难挥之而去。最是多情毕业季，一曲追忆青春记。年少轻狂忠义气，一言难表君之意。长发及腰藏秀丽，与君相伴知甜蜜。曲终人散难分离，有意自会缘相聚。曾几何时，我们也正当青春。</p><p>时至今日，进京已有三年三月有余。迷茫间，不知多了几分成熟，褪去了几分青涩。岁月的无奈已然在身体上留下痕迹。在这里，灯红酒绿一片繁华的背后，有几分欢畅，又有几分辛酸，不得而知。确定的是凌晨时分的灯火通透是最美的，燃烧的是不眠的汗水和无尽的责任。夜如白昼，照亮了每一颗工作在一线的心。两千多万的背后，有几分真情，又有几分假意，不得而知。确定的是勿因利益蒙蔽了双眼，勿因急功近利迷失了自我。唯待人以真诚，做人须心存感恩，随波而不逐流，足矣。诺大城市的背后，有几分生活，又有几分生存，不得而知。确定的是为了生存，我们可以忍受居无定所，居住在几平米大的出租屋。可以接受每日几个小时的通勤路程，消失在地铁里的茫茫人海。可以放弃慢节奏的舒适区，选择物竞天择，适者生存的压迫感。可以的更好的生存，为了更好的生活。</p><p>智者乐，仁者寿，长者随心所欲。一介布衣，言有物，行有格，贫贱不移，宠辱不惊。</p><p><br></p><h3 id="nbsp-nbsp-nbsp-版权声明：本文为博主原创文章，转载请标明作者和原链接"><a href="#nbsp-nbsp-nbsp-版权声明：本文为博主原创文章，转载请标明作者和原链接" class="headerlink" title="| &nbsp;&nbsp;&nbsp;版权声明：本文为博主原创文章，转载请标明作者和原链接"></a><font color="red"><b>| &nbsp;&nbsp;&nbsp;版权声明：本文为博主原创文章，转载请标明作者和原链接<br></b></font></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深夜已来临，竟未感一丝困意。在这闷热的夏日，此刻竟稍感凉爽。不知是否夜深人静，心静如水而致，还是一颗浮躁不安的心，只为寻求片刻宁静。&lt;/p&gt;
&lt;p&gt;忙忙碌碌的一天，在归零的一刻画上句号。一天的结束，意味着新的一天的开始。过去的时光无论是怎样的，都无法抗拒即将到来的未知。期待未来，亦或是怀念过去，也不过是完成句号前的一个个逗号。&lt;/p&gt;
&lt;p&gt;许久未写心情，大概一年有余。再次动笔的原因，简单的想纪念一下今天的昨晚。每一个夜晚都是与众不同的，简单的是晚的程度不同。美其实很简单，不同的心情会发现不一样的美。&lt;/p&gt;
    
    </summary>
    
      <category term="情感" scheme="http://yoursite.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
      <category term="北京" scheme="http://yoursite.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="夜" scheme="http://yoursite.com/tags/%E5%A4%9C/"/>
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Git Flow的使用</title>
    <link href="http://yoursite.com/2019/07/06/Git%20Flow%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/06/Git Flow的使用/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T08:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git-Flow简介"><a href="#Git-Flow简介" class="headerlink" title="Git Flow简介"></a>Git Flow简介</h3><p>Gitflow工作流程围绕项目发布定义了严格的分支模型。它为管理更大规模的项目提供了坚实的框架。</p><p>其特色在于，它为不同的分支分配了非常明确的角色，并且定义了使用场景和用法。除了用于功能开发的分支，它还使用独立的分支进行发布前的准备、记录以及后期维护。流程仍然使用一个中央代码仓库，它是所有开发者的信息交流中心。</p><p>跟其他的工作流程一样，开发者在本地完成开发，然后再将分支代码推送到中央仓库。唯一不同的是项目中分支的结构。</p><p>Gitflow使用两个分支来记录项目开发的历史，而不是使用单一的master分支。在Gitflow流程中，master只是用于保存官方的发布历史，而develop分支才是用于集成各种功能开发的分支。使用版本号为master上的所有提交打标签（tag）也很方便。develop分支将包含项目的所有历史，而master会是一个缩减版本。</p><a id="more"></a><h3 id="Git-Flow常用分支"><a href="#Git-Flow常用分支" class="headerlink" title="Git Flow常用分支"></a>Git Flow常用分支</h3><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><ul><li>主分支 , 产品的功能全部实现后 , 最终在master分支对外发布</li><li>该分支为只读唯一分支 , 只能从其他分支(release/hotfix)合并 , 不能在此分支修改</li><li>另外所有在master分支的推送应该打标签做记录,方便追溯</li><li>例如release合并到master , 或hotfix合并到master</li></ul><h4 id="develop"><a href="#develop" class="headerlink" title="develop"></a>develop</h4><ul><li>主开发分支 , 基于master分支克隆</li><li>包含所有要发布到下一个release的代码</li><li>该分支为只读唯一分支 , 只能从其他分支合并</li><li>feature功能分支完成 , 合并到develop(不推送)</li><li>develop拉取release分支 , 提测</li><li>release/hotfix 分支上线完毕 , 合并到develop并推送</li></ul><h4 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h4><ul><li>功能开发分支 , 基于develop分支克隆 , 主要用于新需求新功能的开发</li><li>功能开发完毕后合到develop分支(未正式上线之前不推送到远程中央仓库!!!)</li><li>feature分支可同时存在多个 , 用于团队中多个功能同时开发 , 属于临时分支 , 功能完成后可选删除</li></ul><h4 id="release"><a href="#release" class="headerlink" title="release"></a>release</h4><ul><li>测试分支 , 基于feature分支合并到develop之后  , 从develop分支克隆</li><li>主要用于提交给测试人员进行功能测试 , 测试过程中发现的BUG在本分支进行修复 , 修复完成上线后合并到develop/master分支并推送(完成功能) , 打Tag</li><li>属于临时分支 , 功能上线后可选删除</li></ul><h4 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h4><ul><li>补丁分支 , 基于master分支克隆 , 主要用于对线上的版本进行BUG修复</li><li>修复完毕后合并到develop/master分支并推送 , 打Tag</li><li>属于临时分支 , 补丁修复上线后可选删除</li><li>所有hotfix分支的修改会进入到下一个release</li></ul><h3 id="Git-Flow主要工作流程"><a href="#Git-Flow主要工作流程" class="headerlink" title="Git Flow主要工作流程"></a>Git Flow主要工作流程</h3><ol><li>初始化项目为gitflow , 默认创建master分支 , 然后从master拉取第一个develop分支</li><li>从develop拉取feature分支进行编码开发(多个开发人员拉取多个feature同时进行并行开发 , 互不影响)</li><li>feature分支完成后 , 合并到develop(不推送 , feature功能完成还未提测 , 推送后会影响其他功能分支的开发)合并feature到develop , 可以选择删除当前feature , 也可以不删除 . 但当前feature就不可更改了 , 必须从release分支继续编码修改</li><li>从develop拉取release分支进行提测 , 提测过程中在release分支上修改BUG</li><li>release分支上线后 , 合并release分支到develop/master并推送合并之后 , 可选删除当前release分支 , 若不删除 , 则当前release不可修改 . 线上有问题也必须从master拉取hotfix分支进行修改</li><li>上线之后若发现线上BUG , 从master拉取hotfix进行BUG修改</li><li>hotfix通过测试上线后 , 合并hotfix分支到develop/master并推送合并之后 , 可选删除当前hostfix , 若不删除 , 则当前hotfix不可修改 , 若补丁未修复 , 需要从master拉取新的hotfix继续修改</li><li>当进行一个feature时 , 若develop分支有变动 , 如其他开发人员完成功能并上线 , 则需要将完成的功能合并到自己分支上，即合并develop到当前feature分支</li><li>当进行一个release分支时 , 若develop分支有变动 , 如其他开发人员完成功能并上线 , 则需要将完成的功能合并到自己分支上，即合并develop到当前release分支 (!!! 因为当前release分支通过测试后会发布到线上 , 如果不合并最新的develop分支 , 就会发生丢代码的情况)</li></ol><h3 id="Git-Flow工作流程图"><a href="#Git-Flow工作流程图" class="headerlink" title="Git Flow工作流程图"></a>Git Flow工作流程图</h3><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/git/Git%20Flow%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png?raw=true" alt=""></p><h3 id="Git-Flow常用命令"><a href="#Git-Flow常用命令" class="headerlink" title="Git Flow常用命令"></a>Git Flow常用命令</h3><ul><li><strong>初始化：</strong>git flow init</li><li><strong>开始新Feature：</strong>git flow feature start MYFEATURE</li><li><strong>Publish一个Feature(也就是push到远程): </strong>git flow feature publish MYFEATURE</li><li><strong>获取Publish的Feature:</strong>git flow feature pull origin MYFEATURE</li><li><strong>完成一个Feature: </strong>git flow feature finish MYFEATURE</li><li><strong>开始一个Release:</strong>git flow release start RELEASE [BASE]</li><li><strong>Publish一个Release: </strong>git flow release publish RELEASE</li><li><strong>发布Release:</strong>git flow release finish RELEASE(别忘了git push –tags)</li><li><strong>开始一个Hotfix: </strong>git flow hotfix start VERSION [BASENAME]</li><li><strong>发布一个Hotfix: </strong>git flow hotfix finish VERSION</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure><p>这个命令会进行一些默认的配置，可以自动创建上面介绍的所有分支：master、develop、feature、relase、hotfix等分支。</p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://user@host/path/to/repo.git</span><br><span class="line">git checkout -b develop master</span><br><span class="line">git checkout -b some-feature develop</span><br><span class="line">git checkout -b release-0.1 develop</span><br><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br></pre></td></tr></table></figure></p><p>完成后当前所在分支就变成 develop. 任何开发都必须从 develop 开始：</p><p>当进行新功能开发的时候：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow feature start some_awesome_feature</span><br></pre></td></tr></table></figure></p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br></pre></td></tr></table></figure></p><p>完成功能开发之后：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow feature finish some_awesome_feature</span><br></pre></td></tr></table></figure></p><p>该命令将会把feature/some_awesome_feature合并到develope分支，然后删除功能(feature)分支。</p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add &lt;some-file&gt;</span><br><span class="line">git commit</span><br><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge some-feature</span><br><span class="line">git push</span><br><span class="line">git branch -d some-feature</span><br></pre></td></tr></table></figure></p><p>将一个 feature 分支推到远程服务器：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow feature publish some_awesome_feature 或者 git push origin feature/some_awesome_feature</span><br></pre></td></tr></table></figure></p><p>当你的功能点都完成时（需要发布新版本了），就基于develop创建一个发布(release)分支：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow release start v0.1.0</span><br></pre></td></tr></table></figure></p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b release-0.1 develop</span><br></pre></td></tr></table></figure></p><p>当你在完成（finish)一个发布分支时，它会把你所作的修改合并到master分支，同时合并回develop分支，所以，你不需要担心你的master分支比develop分支更加超前：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow release finish v0.1.0</span><br></pre></td></tr></table></figure></p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git checkout develop</span><br><span class="line">git merge release-0.1</span><br><span class="line">git push</span><br><span class="line">git branch -d release-0.1</span><br></pre></td></tr></table></figure></p><p>发布分支扮演的角色是功能开发（develop）与官方发布（master）之间的一个缓冲。无论什么时候你把一些东西合并入master，你都应该随即打上合适的标签。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a 0.1 -m <span class="string">"Initial public release"</span> master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></p><p>Git支持钩子（hook）的功能，也就是说，在代码仓库里某些特定的事件发生的时候，可以执行一些预定义的脚本。因此，一种可行的做法是：在服务器端配置一个钩子，当你把master推送到中央仓库或者推送标签时，Git服务器能为产品发布进行一次自动的构建。</p><p>当系统出现问题的时候，需要进行紧急修改的时候，就好基于master创建一个维护（hotfix）分支：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow hotfix start v0.1.0</span><br></pre></td></tr></table></figure></p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br></pre></td></tr></table></figure></p><p>当你在完成（finish)一个维护分支时，它会把你所作的修改合并到master分支，同时合并回develop分支：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git flow hotfix finish v0.1.0</span><br></pre></td></tr></table></figure></p><p>等同命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fix the bug</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br><span class="line">git checkout develop</span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br><span class="line">git branch -d issue-<span class="comment">#001</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a 0.1 -m <span class="string">"Initial public release"</span> master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>Git Flow命令行图如下所示：<br><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/git/Git%20Flow%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9B%BE.png?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git-Flow简介&quot;&gt;&lt;a href=&quot;#Git-Flow简介&quot; class=&quot;headerlink&quot; title=&quot;Git Flow简介&quot;&gt;&lt;/a&gt;Git Flow简介&lt;/h3&gt;&lt;p&gt;Gitflow工作流程围绕项目发布定义了严格的分支模型。它为管理更大规模的项目提供了坚实的框架。&lt;/p&gt;
&lt;p&gt;其特色在于，它为不同的分支分配了非常明确的角色，并且定义了使用场景和用法。除了用于功能开发的分支，它还使用独立的分支进行发布前的准备、记录以及后期维护。流程仍然使用一个中央代码仓库，它是所有开发者的信息交流中心。&lt;/p&gt;
&lt;p&gt;跟其他的工作流程一样，开发者在本地完成开发，然后再将分支代码推送到中央仓库。唯一不同的是项目中分支的结构。&lt;/p&gt;
&lt;p&gt;Gitflow使用两个分支来记录项目开发的历史，而不是使用单一的master分支。在Gitflow流程中，master只是用于保存官方的发布历史，而develop分支才是用于集成各种功能开发的分支。使用版本号为master上的所有提交打标签（tag）也很方便。develop分支将包含项目的所有历史，而master会是一个缩减版本。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="git flow" scheme="http://yoursite.com/tags/git-flow/"/>
    
      <category term="terminal command" scheme="http://yoursite.com/tags/terminal-command/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型</title>
    <link href="http://yoursite.com/2019/07/06/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/07/06/Java内存模型/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>Java 内存模型（JMM）描述了 JVM 如何使用计算机的内存（RAM）。JVM 是一个完整计算机的模型，因此该模型包含了内存模型的设计 —— JMM。</p><p>如果要正确地设计并发程序，了解 JMM 非常重要。JMM 描述了不同线程间如何以及何时可以看到其它线程写入共享变量的值，以及如何在必要时同步访问共享变量。</p><p>最初的 JMM 设计不充分，因此 JMM 在 Java 1.5 进行了修订。此版本的 JMM 仍在 Java 8 中使用。</p><a id="more"></a><h3 id="Java-Memory-Model-内部实现"><a href="#Java-Memory-Model-内部实现" class="headerlink" title="Java Memory Model 内部实现"></a>Java Memory Model 内部实现</h3><hr><p>JVM 内部使用的 JMM 将内存划分为线程栈和堆。下图从逻辑角度说明了 JMM：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/JMM%E6%9E%84%E9%80%A0%E5%9B%BE.jpg?raw=true" alt=""></p><p>在 JVM 中运行的每个线程都有它自己的线程栈，线程栈包含了线程调用了哪些方法以到达当前执行点的信息，我们把它成为“调用栈（Call Stack）“。当线程执行其代码时，调用栈会发生变化。</p><p>线程栈还包含了正在执行的每个方法的所有的局部变量（调用栈上的所有方法）。一个线程只能访问它自己的线程栈，由线程创建的局部变量对于创建它的线程以外的所有其他线程都是不可见的。即使两个线程正在执行完全相同的代码，两个线程仍将在各自的线程栈中创建自己的局部变量。因此，每个线程都有自己的每个局部变量的版本。</p><p>基本类型（boolean，byte，short，char，int，long，float，double）完全存储在线程栈里，因此对其他线程是不可见的。一个线程可以将一个基本类型的变量副本传递给另一个线程，但它不能共享原始局部变量本身。</p><p>堆包含了 Java 应用程序中创建的所有对象，不管对象是哪个线程创建的，这包括基本类型的包装版本（如 Byte，Integer，Long 等）。无论对象是创建成局部变量，还是作为另一个对象的成员变量被创建，对象都存储在堆中。</p><p>下图说明了调用栈和局部变量存储在线程栈中，而对象存储在堆中。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/jvm%E5%86%85%E5%AD%98%E5%8F%98%E9%87%8F%E8%AF%B4%E6%98%8E%E5%9B%BE.jpg?raw=true" alt=""></p><p>局部变量如果是基本类型，这种情况下，变量完全存储在线程栈上。</p><p>局部变量如果是对象的引用，这种情况下，引用（局部变量）存储在线程栈上，但对象本身存储在堆上。</p><p>对象中可能包含方法，而这些方法中可能包含局部变量，这种情况下，即使方法所属的对象存储在堆上，但这些局部变量却是存储在线程栈上的。</p><p>对象的成员变量与对象本身一起存储在堆上，当成员变量是基本类型以及是对象的引用时都是如此。</p><p>静态类型变量与类定义一起存储在堆上。</p><p>所有线程通过拥有对象引用去访问堆中的对象。当一个线程有权访问一个对象时，它也能访问该对象的成员变量。如果两个线程同一时间调用同一对象的一个方法，它们都可以访问该对象的成员变量，但每个线程都有自己局部变量的副本。</p><p>这是一个说明上述要点的图表：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/jvm%E5%86%85%E5%AD%98%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE.jpg?raw=true" alt=""></p><p>两个线程各有一组局部变量，其中一个局部变量（Local Variable 2）指向堆中的共享对象（Object 3）。两个线程各自对同一各对象拥有不同的引用，它们的引用是局部变量，因此它们存储在各自线程的线程栈中。但是，这两个不同引用指向堆中的同一个对象。</p><p>请注意，共享对象（Object 3）将 Object 2 和 Object 4 作为成员变量引用（如从 Object 3 到 Object 2 和 Object 4 的箭头所示），通过对象 3 中的这些成员变量引用，两个线程可以访问对象 2 和 对象 4。</p><p>上图还显示了一个局部变量指向堆中的两个不同对象。这种情况下，引用指向两个不同的对象（Object 1 和 Object 5），而不是同一个对象。理论上，如果两个线程都引用了两个对象，那两个线程都可以访问对象 1 和 对象 5。但在上图中，每个线程只引用了两个对象中的一个。</p><p>那么，什么样的 Java 代码可以导致上面的内存图？好吧，代码就如下面的代码一样简单：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/jvm%E5%86%85%E5%AD%98%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%811.jpg?raw=true" alt=""></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/jvm%E5%86%85%E5%AD%98%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%812.jpg?raw=true" alt=""></p><p>如果两个线程正在执行 run() 方法，则前面的结果就会出现。run() 方法会调用 methodOne()，而 methodOne() 会调用 methodTwo()。</p><p>方法 methodOne() 中声明了一个基本类型的局部变量（localVariable1 类型 int）和一个对象引用的局部变量（localVariable2）。</p><p>每个执行 methodOne() 的线程将在各自的线程栈上创建自己的 localVariable1 和 localVariable2 副本。localVariable 1 变量将完全分离，只存在于每个线程的线程栈中。一个线程无法看到另一个线程对其 localVariable 1 副本所做的更改。</p><p>执行 methodOne() 的每个线程还将创建它们自己的 localVariable2 副本。然而，localVariable 2 的两个不同副本最终都指向堆上的同一个对象。代码将 localVariable 2 设置为指向静态变量引用的对象。静态变量只有一个副本，这个副本存储在堆上。因此，localVariable 2 的两个副本最终都指向静态变量所指向的 MySharedObject 的同一个实例。MySharedObject 实例也存储在堆中，它对应于上图中的对象 3。</p><p>注意 MySharedObject 类也包含两个成员变量。成员变量本身同对象一起存储在堆中。这两个成员变量指向另外两个 Integer 对象，这些 Integer 对象对应于上图中的对象 2和对象 4。</p><p>还要注意 methodTwo() 创建的一个名为 localVariable 1 的本地变量。这个局部变量是一个指向 Integer 对象的对象引用。该方法将 localVariable 1 引用设置为指向一个新的 Integer 实例。localVariable 1 引用将存储在每个执行 methodTwo() 的线程的一个副本中。实例化的两个 Integer 对象存储在堆上，但是由于方法每次执行都会创建一个新的 Integer 对象，因此执行该方法的两个线程将创建单独的 Integer 实例。methodTwo() 中创建的 Integer 对象对应于上图中的对象 1和对象 5。还要注意类 MySharedObject 中的两个成员变量，它们的类型是 long，这是一个基本类型。由于这些变量是成员变量，所以它们仍然与对象一起存储在堆中。只有本地变量存储在线程堆栈中。</p><h3 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h3><hr><p>现代硬件内存架构与 Java 内存模型略有不同。了解硬件内存架构也很重要，以了解 Java 内存模型如何与其一起工作。本节介绍了常见的硬件内存架构，后面的部分将介绍 Java 内存模型如何与其配合使用。</p><p>这是现代计算机硬件架构的简化图：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E6%9E%B6%E6%9E%84.jpg?raw=true" alt=""></p><p>现代计算机通常有两个或更多的 CPU，其中一些 CPU 也可能有多个内核。关键是，在具有2个或更多 CPU 的现代计算机上，可以同时运行多个线程。每个 CPU 都能够在任何给定时间运行一个线程。这意味着如果您的 Java 应用程序是多线程的，那么每个 CPU 可能同时（并发地）运行 Java 应用程序中的一个线程。</p><p>每个 CPU 包含一组寄存器，这些寄存器本质上是在 CPU 内存中。CPU 在这些寄存器上执行操作的速度要比在主内存中执行变量的速度快得多。这是因为 CPU 访问这些寄存器的速度要比访问主内存快得多。</p><p>每个 CPU 还可以有一个 CPU 缓存内存层。事实上，大多数现代 CPU 都有某种大小的缓存内存层。CPU 访问缓存内存的速度比主内存快得多，但通常没有访问内部寄存器的速度快。因此，CPU 高速缓存存储器介于内部寄存器和主存储器的速度之间。某些 CPU 可能有多个缓存层（L1 和 L2），但要了解 Java 内存模型如何与内存交互，这一点并不重要。重要的是要知道 CPU 可以有某种缓存存储层。</p><p>计算机还包含一个主内存区域（RAM）。所有 CPU 都可以访问主存，主内存区域通常比 CPU 的缓存内存大得多。</p><p>通常，当 CPU 需要访问主内存时，它会将部分主内存读入 CPU 缓存。它甚至可以将缓存的一部分读入内部寄存器，然后对其执行操作。当 CPU 需要将结果写回主内存时，它会将值从内部寄存器刷新到缓存内存，并在某个时候将值刷新回主内存。</p><p>当CPU需要在高速缓存中存储其他内容时，通常会将存储在高速缓存中的值刷新回主内存。CPU 缓存可以一次将数据写入一部分内存，并一次刷新一部分内存。它不必每次更新时都读取/写入完整的缓存。通常，缓存是在称为“缓存线（Cache Line）”的较小内存块中更新的。可以将一条或多条高速缓存线读入高速缓存内存，并将一条或多条高速缓存线再次刷新回主内存。</p><h3 id="JMM-和硬件内存结构之间的差别"><a href="#JMM-和硬件内存结构之间的差别" class="headerlink" title="JMM 和硬件内存结构之间的差别"></a>JMM 和硬件内存结构之间的差别</h3><hr><p>如前所述，JMM 和硬件内存结构是不同的。硬件内存体系结构不区分线程栈和堆。在硬件上，线程栈和堆都位于主内存中。线程栈和堆的一部分有时可能存在于 CPU 高速缓存和内部 CPU 寄存器中。如下图所示:</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/JMM%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E4%BA%A4%E4%BA%92%E5%9B%BE.jpg?raw=true" alt=""></p><p>当对象和变量可以存储在计算机的不同内存区域时，可能会出现某些问题。主要有两个问题：</p><ol><li>线程更新（写入）对共享变量的可见性</li><li>读取、检查和写入共享变量时的竞争条件</li></ol><p><strong>共享对象的可见性</strong></p><p>如果两个或多个线程共享一个对象，而没有正确使用 volatile 声明或同步，那么一个线程对共享对象的更新可能对其他线程不可见。</p><p>假设共享对象最初存储在主内存中。在 CPU 1 上运行的线程然后将共享对象读入它的 CPU 缓存。在这里，它对共享对象进行更改。只要没有将 CPU 缓存刷新回主内存，在其他 CPU 上运行的线程就不会看到共享对象的更改版本。这样，每个线程都可能最终拥有自己的共享对象副本，每个副本位于不同的 CPU缓 存中。</p><p>下图说明了大致的情况。在左 CPU 上运行的一个线程将共享对象复制到其 CPU 缓存中，并将其 count 变量更改为2。此更改对运行在正确 CPU 上的其他线程不可见，因为尚未将更新刷新回主内存。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7.jpg?raw=true" alt=""></p><p>要解决这个问题，可以使用 Java 的 volatile 关键字。volatile 关键字可以确保直接从主内存读取给定的变量，并在更新时始终将其写回主内存。</p><p><strong>竞态条件</strong></p><p>如果两个或多个线程共享一个对象，且多个线程更新该共享对象中的变量，则可能出现竞争条件。</p><p>假设线程 A 将共享对象的变量计数读入其 CPU 缓存。再想象一下，线程 B 执行相同的操作，但是进入了不同的 CPU 缓存。现在线程 A 向 count 加一，线程 B 也这样做。现在 var1 已经增加了两次，每次在每个 CPU 缓存中增加一次。</p><p>如果按顺序执行这些增量，变量计数将增加两次，并将原始值 + 2 写回主内存。</p><p>但是，这两个增量是同时执行的，没有适当的同步。无论哪个线程 A 和线程 B 将其更新版本的 count 写回主内存，更新后的值只比原始值高1，尽管有两个增量。</p><p>该图说明了上述竞态条件问题的发生情况：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6%E5%8F%91%E7%94%9F%E6%83%85%E5%86%B5.jpg?raw=true" alt=""></p><p>要解决这个问题，可以使用 Java synchronized 块。同步块保证在任何给定时间只有一个线程可以进入代码的给定临界段。Synchronized 块还保证在 Synchronized 块中访问的所有变量都将从主内存中读入，当线程退出 Synchronized 块时，所有更新的变量将再次刷新回主内存，而不管变量是否声明为 volatile。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Java 内存模型（JMM）描述了 JVM 如何使用计算机的内存（RAM）。JVM 是一个完整计算机的模型，因此该模型包含了内存模型的设计 —— JMM。&lt;/p&gt;
&lt;p&gt;如果要正确地设计并发程序，了解 JMM 非常重要。JMM 描述了不同线程间如何以及何时可以看到其它线程写入共享变量的值，以及如何在必要时同步访问共享变量。&lt;/p&gt;
&lt;p&gt;最初的 JMM 设计不充分，因此 JMM 在 Java 1.5 进行了修订。此版本的 JMM 仍在 Java 8 中使用。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
      <category term="JMM" scheme="http://yoursite.com/tags/JMM/"/>
    
      <category term="RAM" scheme="http://yoursite.com/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存结构解析</title>
    <link href="http://yoursite.com/2019/07/06/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/07/06/JVM内存结构解析/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Jvm的内存结构是由《java虚拟机规范》制定的，《java虚拟机规范》只负责制定标准，具体的实现多种多样，比如：sun公司的HotSpot、BEA的JRockit、IBM的J9（前两个目前都已被Oracle收购），另外Apache、Google、微软等组织或公司都有自己的java虚拟机实现。只是我们目前开发比较常用的是HotSpot。</p><p>《java虚拟机规范》与具体的java虚拟机的关系，有点类似于接口和实现类。《java虚拟机规范》负责制定接口，具体的java虚拟机去实现这些接口。我们编写的java代码最终会被编译成class文件，通过java虚拟机解析加载执行。Java语句的“跨平台性”，其实就是通过java虚拟机实现的，不同的平台需要实现不同jvm版本（windows版、linux版等）。我们业务代码只需要开发一份，编译成同一份class文件，却可以在windows、linux等不同的操作系统中执行。</p><p>这里提到的class文件的格式、规范也是由《java虚拟机规范》制定的。换句话讲不管采用什么语言编写的程序，只要按照《java虚拟机规范》编译成class文件就可以在java虚拟机中执行。比如现在常见的可以在jvm（等同java虚拟机）上运行的语言：Scala、Groovy、Jython等等数十种语言（笔者只使用过这里列出三种）。这是jvm虚拟机除了“跨平台性”之外的另一个强大之处—“跨语言性”。</p><a id="more"></a><p>现在越来越多的语言都有基于jvm实现版本，比如：JavaScript对应的Rhino、Lua对应的Luaj、Python对应的Jyhon等等。利用jvm的“跨语言”特性，可以实现不管你使用什么语言编写的代码最终可以在同一个平台jvm中运行，实现跨语言调用。Jvm不再是java语言的专属，它属于世界上个各种编程语言。</p><p>为什么这么多语言都要争相实现基于jvm的实现版本呢？前面已经提到两点：借助jvm可以实现“跨平台”；借助jvm可以实现“跨语言”。还有一点其实跟今天主题相关：借助jvm实现自动“内存管理”。</p><p>众所周知，与c、c++不同（需要自己控制内存），java可以自动实现垃圾内存回收。其实这份工作不是java语言本身实现的，而是jvm实现的，也就是说任何一种其他语言只要能遵循《java虚拟机规范》可以编译成可以执行class文件，其内存管理就可以放心的交给jvm。</p><p>话又说回来，主流的jvm实现本质上还是使用的c、c++写的（当然理论上用什么语言写都可以，只要符合《java虚拟机规范》），其内存管理还是通过c、c++控制内存空间的开辟和销毁。只是把这部分工作交给了jvm来做，java程序员只需要关心自己的业务逻辑即可。这有点类似架构设计，架构师把通用的功能提到框架中统一处理，普通程序员只需编写业务代码即可。或者可以说Jvm是更顶层的架构设计，只是架构师变成jvm源码实现那帮家伙而已。</p><p>另外《java虚拟机规范》有多个版本，笔者只阅读过“周老师”翻译的《java虚拟机规范 java SE7》，感兴趣的可以直接研究oracle官网最新的版本（英文原版）。</p><h3 id="Jvm的内存结构"><a href="#Jvm的内存结构" class="headerlink" title="Jvm的内存结构"></a>Jvm的内存结构</h3><p>根据java虚拟机规范可以完成java虚拟机的开发，Java虚拟机可以看作是一台抽象的计算机。如同真实的计算机那样，它有自己的指令集以及各种运行时内存区域。本次主题是讨论jvm的内存结构，对应的就是jvm“运行时内存区”。</p><p>该区域大致分为5部分：方法区、java堆、PC寄存器(或者程序计数器)、java虚拟机栈、本地方法栈。大致流程为程序启动时：先把class文件加载到方法区；初始化bean对象放到java堆（比如spring ioc容器中的bean）；每个线程执行时会对应一个自己私有的PC寄存器；同时还会创建一个私有的 “java虚拟机栈”或者“本地方法栈”。</p><p>由此可以看出：方法区和java堆是所有线程公有的，PC寄存器、java虚拟机栈和本地方法栈是线程私有的。结构图如下（来至《深入理解Java虚拟机》）：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/jvm/jvm%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.jpg?raw=true" alt=""></p><ul><li><p><strong>方法区</strong></p><p>在程序启动时jvm会读取class文件，把每个类的结构信息放到“方法区”，这里的class文件包括jar包、war包中的所有class文件。所以程序中应该尽量避免引入无用的、重复的（不同版本）jar包。类的结构信息包括：运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法（<init>和<cinit>方法）。该区域所有线程共享。</cinit></init></p><p>在jdk1.8（对应不同的jvm实现）以前，我们常用的hotspot java虚拟机内存分代中有“永久代”的概念，这个“永久代”等价于“方法区”。可以通过PermSize 和 MaxPermSize来设置“永久代”大小。如果超过MaxPermSize，系统会抛出OutOfMemoryError: PermGen异常。</p><p>在jdk1.8之后，hotspot jvm在内存空间中完全移除了“永久代”。“方法区”中“类的元数据信息”被放到“元空间”（Metaspace），“运行时常量池”被放到“java堆”（这部分是从jdk1.7开始）。</p><p>在jdk1.8之后，PermSize 和 MaxPermSize参数设置失效，启动时会有警告信息。改用新的参数MaxMetaspaceSize来限制“元空间”的大小，如果不设置默认最大为本机内存容量（动态调整）。建议通过MaxMetaspaceSize设置最大“元空间”，如果类元数据的空间占用达到参数“MaxMetaspaceSize”设置的值，将会触发对死亡对象和类加载器的垃圾回收。</p></li><li><p><strong>java堆</strong></p><p>通过-Xms -Xmx指定堆内存大小，Java堆在jvm启动时创建，所有对象的创建和销毁都在这个区域进行，是jvm管理的最大的一块内存（可以不是连续的）。对象的销毁指的就是垃圾回收，为了更合理的回收对象（对象存活时间的长短），通常的jvm实现把java堆分为年轻代和年老代，并采用不同的垃圾回收算法、以及垃圾回收器进行垃圾回收（对象销毁）。这里不对分代算法、垃圾回收器详细讲解。</p><p>该区域中的对象是所有线程共享的，典型的运用场景就是spring的ioc容器，在程序启动时创建一系列对象放到一个全局的map数据结构里，防止被垃圾回收。线程中可以直接使用这些对象，而不需要重复创建和销毁。</p><p>在创建新对象时，如果该区域已没有足够的空间 会抛出OutOfMemoryError异常。</p></li><li><p><strong>程序计数器</strong></p><p>由于jvm是支持多线程执行的，但本质上是cpu在多个线程之间切换，为了记录每个线程执行的位置，每个线程都有自己独有的程序计数器，多个线程之间互不干扰。对于非native方法程序计数器记录的是正在执行的虚拟机字节码指令地址，可以看做所执行字节码的指示器，通过字节解释器改变其值来保证程序按照特定的顺序执行。</p><p>PC寄存器的容量至少应当能保存一个returnAddress类型的数据或者一个与平台相关的本地指针的值，其大小是能确定的。</p><p>该区域需要注意以下三点：</p><ol><li>如果线程正在执行的是非native方法，那么计数器记录的是正在执行的虚拟机字节码指令地址</li><li>如果执行的native方法，计数器当中的内容应当是空。执行顺序交给jvm的native方法控制。</li><li>该区域是java的虚拟机规范当中，唯一一个没有规定OutOfMemoryError的区域。</li></ol></li><li><p><strong>java虚拟机栈</strong></p><p>每一条java虚拟机线程在创建时会创建自己的java虚拟机栈，因此它是线程私有的。其主要作用是：用于存储局部变量与一些过程计算结果的地方。其工作方式是结合“程序计数器”读入变量到栈，根据不同的指令读取值出栈进行运算（先入后出），运算结果再入栈。</p><p>java虚拟机栈的总容量可以动态扩展，但每个线程的栈大小是固定的，可以通过-Xss参数指定。总内存固定其值越小就可以支持创建更多的线程，同时每个栈的容量就越小，当该线程需要的容量超过这个值时，就会抛出StackOverflowError异常。同理 如果-Xss参数指定的值越大，每个线程可以用的栈内存空间就越大可以存放更多的局部变量等信息，但支持的线程就越小，如果总内存耗尽 没有足够的空间开辟新的线程，会抛出OutOfMemoryError异常。简单的讲如果抛出“抛出StackOverflowError异常”，增大-Xss的值；如果抛出OutOfMemoryError异常，减小-Xss的值。</p><p><strong>Java虚拟机栈里数据结构叫“栈帧”</strong></p><p>栈帧随着方法调用而创建，随着方法结束而销毁，也就是说一个线程里执行多个方法，对应会产生和销毁多个栈帧，这里的销毁时机是指方法调用结束，也就是说栈的内存回收不像java堆 没有复杂的垃圾回收机制。虽然同一个线程里会有多个栈帧，但同一时间只有一个栈帧，上面提到的-Xms指定的空间，其实是每个栈帧的空间。当线程中一个方法返回时，当前栈帧会传回此方法的执行结果给前一个栈帧，在方法返回之后，当前栈帧就随之被丢弃，前一个栈帧就重新成为当前栈帧了。</p><p>每个“栈帧”都有自己的：局部变量表、操作数栈、动态链接、返回地址。其中局部变量表和操作数栈的容量是在编译期确定，因此栈帧实际消耗容量的大小仅仅取决于Java虚拟机的实现和方法调用时可被分配的内存。</p><p><strong>局部变量表：</strong>存放局部变量的列表，一个局部变量类型为boolean、byte、char、short、float、reference和returnAddress的数据，两个局部变量可以保存一个类型为long和double的数据。局部变量使用索引来进行定位访问，第一个局部变量的索引值为零。</p><p><strong>操作数栈：</strong>后进先出（Last-In-First-Out，LIFO）栈，长度由编译期决定，在任意时刻，即任意一个栈帧中的操作数栈都会有一个确定的栈深度，一个long或者double类型的数据会占用两个单位的栈深度，其他数据类型则会占用一个单位深度。</p><p><strong>动态链接：</strong>简单的理解为指向运行时常量池的引用。在Class文件里面，描述一个方法调用了其他方法，或者访问其成员变量是通过符号引用（Symbolic Reference）来表示的，动态链接的作用就是将这些符号引用所表示的方法转换为实际方法的直接引用。</p><p><strong>返回地址：</strong>方法调用的返回，包括正常返回（有返回值）和异常返回（没有返回值），不同的返回类型有不同的指令。</p></li><li><p><strong>本地方法栈</strong></p><p>用于支持native方法，和java虚拟机栈相似，是线程私有，只是这个栈是采用其他语言实现。同样会有可能抛出StackOverflowError、OutOfMemoryError异常。-Xss设置栈内存的大小同样适用于本地方法栈。</p><p><strong>关于内存溢出和内存泄漏</strong></p><p>内存泄漏一定会导致内存溢出，但内存溢出不一定是内存泄漏导致，也有可能是服务器内存本来就不足，可以通过增加服务器内存 同时增大-Xms –Xmx配置。</p><p>内存泄漏一般比较隐蔽，难于发现。典型的发生场景就是，多线程的的线程中中使用ThreadLocal，在线程执行结束时没有remove，导致对象无法被回收，日积月累内存耗尽，抛出OutOfMemoryError异常。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Jvm的内存结构是由《java虚拟机规范》制定的，《java虚拟机规范》只负责制定标准，具体的实现多种多样，比如：sun公司的HotSpot、BEA的JRockit、IBM的J9（前两个目前都已被Oracle收购），另外Apache、Google、微软等组织或公司都有自己的java虚拟机实现。只是我们目前开发比较常用的是HotSpot。&lt;/p&gt;
&lt;p&gt;《java虚拟机规范》与具体的java虚拟机的关系，有点类似于接口和实现类。《java虚拟机规范》负责制定接口，具体的java虚拟机去实现这些接口。我们编写的java代码最终会被编译成class文件，通过java虚拟机解析加载执行。Java语句的“跨平台性”，其实就是通过java虚拟机实现的，不同的平台需要实现不同jvm版本（windows版、linux版等）。我们业务代码只需要开发一份，编译成同一份class文件，却可以在windows、linux等不同的操作系统中执行。&lt;/p&gt;
&lt;p&gt;这里提到的class文件的格式、规范也是由《java虚拟机规范》制定的。换句话讲不管采用什么语言编写的程序，只要按照《java虚拟机规范》编译成class文件就可以在java虚拟机中执行。比如现在常见的可以在jvm（等同java虚拟机）上运行的语言：Scala、Groovy、Jython等等数十种语言（笔者只使用过这里列出三种）。这是jvm虚拟机除了“跨平台性”之外的另一个强大之处—“跨语言性”。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java 的类加载机制解析</title>
    <link href="http://yoursite.com/2019/07/06/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/07/06/Java类加载机制解析/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>在聊 Java 类加载机制之前，需要先了解一下 Java 字节码，因为它和类加载机制息息相关。</p><p>计算机只认识 0 和 1，所以任何语言编写的程序都需要编译成机器码才能被计算机理解，然后执行，Java 也不例外。</p><p>Java 在诞生的时候喊出了一个非常牛逼的口号：“Write Once, Run Anywhere”，为了达成这个目的，Sun 公司发布了许多可以在不同平台（Windows、Linux）上运行的 Java 虚拟机（JVM）——负责载入和执行 Java 编译后的字节码。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/java-base/java%E5%AD%97%E8%8A%82%E7%A0%81%E8%BD%AC%E6%8D%A2.jpg?raw=true" alt=""></p><p>到底 Java 字节码是什么样子，我们借助一段简单的代码来看一看。</p><a id="more"></a><p>源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"沉默王二"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码编译通过后，通过 xxd Test.class 命令查看一下这个字节码文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxd Test.class</span><br><span class="line">00000000: cafe babe 0000 0034 0022 0700 0201 0019 .......4.&quot;......</span><br><span class="line">00000010: 636f 6d2f 636d 6f77 6572 2f6a 6176 615f com/cmower/java_</span><br><span class="line">00000020: 6465 6d6f 2f54 6573 7407 0004 0100 106a demo/Test......j</span><br><span class="line">00000030: 6176 612f 6c61 6e67 2f4f 626a 6563 7401 ava/lang/Object.</span><br><span class="line">00000040: 0006 3c69 6e69 743e 0100 0328 2956 0100 ..&lt;init&gt;...()V..</span><br><span class="line">00000050: 0443 6f64 650a 0003 0009 0c00 0500 0601 .Code...........</span><br><span class="line">00000060: 000f 4c69 6e65 4e75 6d62 6572 5461 626c ..LineNumberTabl</span><br></pre></td></tr></table></figure><p>感觉有点懵逼，对不对？</p><p>懵就对了。</p><p>这段字节码中的 cafe babe 被称为“魔数”，是 JVM 识别 .class 文件的标志。文件格式的定制者可以自由选择魔数值（只要没用过），比如说 .png 文件的魔数是 8950 4e47 。</p><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>了解了 Java 字节码后，我们来聊聊 Java 的类加载过程。</p><p>Java 的类加载过程可以分为 5 个阶段：载入、验证、准备、解析和初始化。这 5 个阶段一般是顺序发生的，但在动态绑定的情况下，解析阶段发生在初始化阶段之后。</p><ul><li><p><strong>Loading（载入）</strong><br>JVM 在该阶段的主要目的是将字节码从不同的数据源（可能是 class 文件、也可能是 jar 包，甚至网络）转化为二进制字节流加载到内存中，并生成一个代表该类的 java.lang.Class 对象。</p></li><li><p><strong>Verification（验证）</strong><br>JVM 会在该阶段对二进制字节流进行校验，只有符合 JVM 字节码规范的才能被 JVM 正确执行。该阶段是保证 JVM 安全的重要屏障，下面是一些主要的检查。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cafe bene</span><br></pre></td></tr></table></figure></li><li><p><strong>Preparation（准备）</strong><br>JVM 会在该阶段对类变量（也称为静态变量， static 关键字修饰的）分配内存并初始化（对应数据类型的默认初始值，如 0、0L、null、false 等）。</p><p>也就是说，假如有这样一段代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String chenmo = <span class="string">"沉默"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String wanger = <span class="string">"王二"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String cmower = <span class="string">"沉默王二"</span>;</span><br><span class="line">​``` java</span><br><span class="line"></span><br><span class="line">chenmo 不会被分配内存，而 wanger 会；但 wanger 的初始值不是“王二”而是 <span class="keyword">null</span> 。</span><br><span class="line"></span><br><span class="line">需要注意的是， <span class="keyword">static</span> <span class="keyword">final</span> 修饰的变量被称作为常量，和类变量不同。常量一旦赋值就不会改变了，所以 cmower 在准备阶段的值为“沉默王二”而不是 <span class="keyword">null</span> 。</span><br></pre></td></tr></table></figure></li><li><p><strong>Resolution（解析）</strong><br>该阶段将常量池中的符号引用转化为直接引用。</p><p>what？符号引用，直接引用？</p><p>符号引用以一组符号（任何形式的字面量，只要在使用时能够无歧义的定位到目标即可）来描述所引用的目标。</p><p>在编译时，Java 类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如 com.Wanger 类引用了 com.Chenmo 类，编译时 Wanger 类并不知道 Chenmo 类的实际内存地址，因此只能使用符号 com.Chenmo 。</p><p>直接引用通过对符号引用进行解析，找到引用的实际内存地址。</p></li><li><p><strong>Initialization（初始化）</strong><br>该阶段是类加载过程的最后一步。在准备阶段，类变量已经被赋过默认初始值，而在初始化阶段，类变量将被赋值为代码期望赋的值。换句话说，初始化阶段是执行类构造器方法的过程。</p><p>oh，no，上面这段话说得很抽象，不好理解，对不对，我来举个例子。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String cmower = <span class="keyword">new</span> String(<span class="string">"沉默王二"</span>);</span><br></pre></td></tr></table></figure><p>上面这段代码使用了 new 关键字来实例化一个字符串对象，那么这时候，就会调用 String 类的构造方法对 cmower 进行实例化。</p></li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>聊完类加载过程，就不得不聊聊类加载器。</p><p>一般来说，Java 程序员并不需要直接同类加载器进行交互。JVM 默认的行为就已经足够满足大多数情况的需求了。不过，如果遇到了需要和类加载器进行交互的情况，而对类加载器的机制又不是很了解的话，就不得不花大量的时间去调试 ClassNotFoundException 和 NoClassDefFoundError 等异常。</p><p>对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在 JVM 中的唯一性。也就是说，如果两个类的加载器不同，即使两个类来源于同一个字节码文件，那这两个类就必定不相等（比如两个类的 Class 对象不 equals ）。</p><p>站在程序员的角度来看，Java 类加载器可以分为三种。</p><ol><li>启动类加载器（Bootstrap Class-Loader），加载 jre/lib 包下面的 jar 文件，比如说常见的 rt.jar。</li><li>扩展类加载器（Extension or Ext Class-Loader），加载 jre/lib/ext 包下面的 jar 文件。</li><li>应用类加载器（Application or App Clas-Loader），根据程序的类路径（classpath）来加载 Java 类。</li></ol><p>通过一段简单的代码了解下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassLoader loader = Test.class.getClassLoader();</span><br><span class="line"><span class="keyword">while</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(loader.toString());</span><br><span class="line">loader = loader.getParent();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 Java 类都维护着一个指向定义它的类加载器的引用，通过类名.class.getClassLoader()可以获取到此引用；然后通过 loader.getParent() 可以获取类加载器的上层类加载器。</p><p>这段代码的输出结果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@73d16e93</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@15db9742</span><br></pre></td></tr></table></figure><p>第一行输出为 Test 的类加载器，即应用类加载器，它是 sun.misc.Launcher$AppClassLoader类的实例；第二行输出为扩展类加载器，是 sun.misc.Launcher$ExtClassLoader 类的实例。那启动类加载器呢？</p><p>按理说，扩展类加载器的上层类加载器是启动类加载器，但在我这个版本的 JDK 中， 扩展类加载器的 getParent() 返回 null 。所以没有输出。</p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>如果以上三种类加载器不能满足要求的话，程序员还可以自定义类加载器（继承 java.lang.ClassLoader 类），它们之间的层级关系如下图所示。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/java-base/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.jpg?raw=true" alt=""></p><p>这种层次关系被称作为 双亲委派模型 ：如果一个类加载器收到了加载类的请求，它会先把请求委托给上层加载器去完成，上层加载器又会委托上上层加载器，一直到最顶层的类加载器；如果上层加载器无法完成类的加载工作时，当前类加载器才会尝试自己去加载这个类。</p><p>PS：双亲委派模型突然让我联想到朱元璋同志，这个同志当上了皇帝之后连宰相都不要了，所有的事情都亲力亲为，只有自己没精力没时间做的事才交给大臣们去干。</p><p>使用双亲委派模型有一个很明显的好处，那就是 Java 类随着它的类加载器一起具备了一种带有优先级的层次关系，这对于保证 Java 程序的稳定运作很重要。</p><p>上文中曾提到，如果两个类的加载器不同，即使两个类来源于同一个字节码文件，那这两个类就必定不相等——双亲委派模型能够保证同一个类最终会被特定的类加载器加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字节码&quot;&gt;&lt;a href=&quot;#字节码&quot; class=&quot;headerlink&quot; title=&quot;字节码&quot;&gt;&lt;/a&gt;字节码&lt;/h3&gt;&lt;p&gt;在聊 Java 类加载机制之前，需要先了解一下 Java 字节码，因为它和类加载机制息息相关。&lt;/p&gt;
&lt;p&gt;计算机只认识 0 和 1，所以任何语言编写的程序都需要编译成机器码才能被计算机理解，然后执行，Java 也不例外。&lt;/p&gt;
&lt;p&gt;Java 在诞生的时候喊出了一个非常牛逼的口号：“Write Once, Run Anywhere”，为了达成这个目的，Sun 公司发布了许多可以在不同平台（Windows、Linux）上运行的 Java 虚拟机（JVM）——负责载入和执行 Java 编译后的字节码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dicheng52119/Picture-Repository/blob/master/study/java-base/java%E5%AD%97%E8%8A%82%E7%A0%81%E8%BD%AC%E6%8D%A2.jpg?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;到底 Java 字节码是什么样子，我们借助一段简单的代码来看一看。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="classLoader" scheme="http://yoursite.com/tags/classLoader/"/>
    
  </entry>
  
  <entry>
    <title>MySQL binlog 主从同步解析</title>
    <link href="http://yoursite.com/2019/07/06/MySQL%20binlog%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/07/06/MySQL binlog 主从同步解析/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T08:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/mysql/mysqlbinlog%E4%BB%8B%E7%BB%8D%E5%9B%BE.jpg?raw=true" alt=""></p><a id="more"></a><h3 id="binlog-的基础知识"><a href="#binlog-的基础知识" class="headerlink" title="binlog 的基础知识"></a>binlog 的基础知识</h3><hr><ul><li><p><strong>binlog 的概念</strong><br>Server 层的日志系统（归档日志），binlog 中跟踪对其数据库的所有更改操作。是逻辑日志，以追加日志的形式记录。</p></li><li><p><strong>binLog 的三种格式</strong></p><ol><li>statement<br>记录 SQL 语句的原文。风险点：如果主/从用到的索引不同，操作语句带 limit 时，处理的可能是不同行的记录数据。</li><li>row<br>仅记录某条记录的数据修改细节，不关系上下文。缺点：占用空间，同时写 binlog 很耗费 I/O 资源，影响执行速度。</li><li>mixed<br>一般语句使用 statement 格式保存，如果使用了一些函数，statement 格式无法完成主从复制的操作，采用 row 格式。MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能就用 row 格式，否则就用 statement 格式。</li></ol></li></ul><h3 id="主从同步的基础流程"><a href="#主从同步的基础流程" class="headerlink" title="主从同步的基础流程"></a>主从同步的基础流程</h3><hr><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg?raw=true" alt=""></p><ol><li>主库接收到更新命令，执行更新操作，生成 binlog</li><li>从库在主从之间建立长连接</li><li>主库 dump_thread 从本地读取 binlog 传送给从库</li><li>从库从主库获取到 binlog 后存储到本地，成为 relay log（中继日志）</li><li>sql_thread 线程读取 relay log 解析、执行命令更新数据</li></ol><p>每个主/从连接都有三个线程，具有多个从库的主库会为每个连接创建一个 dump thread，每个从库都有自己的 I/O thread 和 sql thread。从库使用两个线程将读取主库 binlog 日志和执行更新操作分离开，通过 relay log 机制，使 binlog 的读取和执行互不影响。如果从库某段时间没有运行，重启后从库可以快速读取主库的 binlog 日志；如果从库在 sql thread 执行完 binlog 日志前停止，在重启后也可以在本地的 relay log 中读取到命令继续执行。</p><ol><li>dump thread：在从库与主库创建连接后，主库创建 dump thread 日志将 binlog 发送到从库，如果该线程追上了主控，它将进入休眠状态直到主库发送信号通知其有新的事件产生时才会被唤醒</li><li>I/O thread：在从库执行 start slave 语句时，创建 I/O thread，该线程连接到主库，将 binlog 日志记录到中继日志</li><li>sql thread：读取 relay log 执行命令实现从库数据的更新</li></ol><h3 id="主从延迟问题"><a href="#主从延迟问题" class="headerlink" title="主从延迟问题"></a>主从延迟问题</h3><hr><ul><li><p><strong>什么是主从延迟</strong><br>主从延迟指的是同一个事务在从库执行完成的时间和主库执行完成的时间直接的差值。</p><p>延迟时间 = 主库执行完事务写入 binlog 的时刻 - 从库执行完事务的时刻</p></li><li><p><strong>主从延迟的来源</strong></p><ol><li>在一些部署条件下，备库所在机器的性能比主库的机器差</li><li>备库读压力大</li><li>大事务场景</li><li>从库的并行复制能力</li><li>从库并行复制策略</li></ol></li></ul><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/mysql/mysql%E4%BB%8E%E5%BA%93%E5%B9%B6%E8%A1%8C%E5%A4%8D%E5%88%B6%E7%AD%96%E7%95%A5.jpg?raw=true" alt=""></p><ul><li><p><strong>核心思想</strong><br>由 sql_thread 作为分配者（coordinator）的角色，负责读取中转日志（relay log）和分发事务，由 worker 线程来执行命令更新数据。</p></li><li><p><strong>原则</strong></p><ol><li>不能造成更新覆盖，要求更新同一行的两个事务必须分发到同一个 worker 中</li><li>同一个事务不能被拆开，必须放到同一个 worker 中</li></ol></li><li><p><strong>现有的一些并行复制策略</strong></p><ol><li><p>5.6 按库并行复制<br>coordinator 将 relay log 按照 DB 的维度分发给不同的 worker。</p><p>优点：构造映射关系快，只需要库名；不要求 binlog 格式<br>缺点：如果主库上只有一个 DB，那这个策略就没有效果了，或者存在热点 DB，也起不到并行的效果</p></li><li><p>MariaDB 组提交优化<br>组提交（group commit）主要有以下特性：</p><ul><li>一组提交的事务有一个相同的 commit_id 直接写到 bin log 里；能够在同一组里提交的事务一定不会修改同一行；主库上可以并行执行的事务备库上也一定可以并行执行。MariaDB 利用组提交的特性对并行复制进行优化，将相同 commit_id 的事务分发到多个 worker 执行，一组全部执行完毕后再执行下一批。</li><li>缺点：在从库上执行时，要等一组事务执行完成后再开始执行下一批事务，这样系统的吞吐量就不够，此外，如果出现大事务，那么这段时间就只用一个 worker 线程在工作，造成资源的浪费。</li></ul></li><li><p>5.7.22 增加 binlog-transaction-dependency-tracking 参数控制并行复制策略<br>commit_order ，根据同时进入 prepare 和 commit 来判断是否可以并行的策略。</p><p>原则：</p><ul><li>同时出入 prepare 状态的事务在从库执行时是可以并行的；</li><li>处于 prepare 状态的事务与处于 commit 状态的事务之间在备库执行时也是可以并行的。</li></ul><p>可以通过 binlog_group_commit_sync_delay 和 bin_log_group_commit_sync_no_delay_count 拉长 binlog write 和 fsync 之间的时间，制造更多同时处于 prepare 阶段的事务。</p><p>writeset，对于事务涉及更新的每一行计算出这行的 hash 值组成集合 writeset，如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。</p><p>wrtieset_session，是在 writeset 的基础上多了个约束，在主库上同一个线程先后执行的两个事务，在备库执行的时候要保证先后顺序。</p></li></ol></li></ul><h3 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h3><hr><ul><li><p><strong>从库连接到主库请求 binlog 日志</strong><br>从库主动从主库请求 binlog 的副本，而不是主库主动将数据推送到从库。也就是说每个从库都是独立地与主库进行连接，每个从库只能通过向主库请求来接收 binlog 的副本，因此从库能够以自己的速度读取和更新数据库的副本，并且可以随意启动和停止赋值过程，而不会影响到主库或者其他从库的状态。</p></li><li><p><strong>relay log（中继日志）</strong><br>中继日志与 binlog 相同，由一组包含描述数据库更改的文件和一个包含所有已使用的中继日志文件名称的索引文件组成。在5.6以前，日志是存在 relay log.info 文件中的，在5.6以后可以使用 –relay log info repository=table 启动 slave，将此日志写入 mysql.slave_relay_log_info 表，而不是文件。</p></li><li><p><strong>复制通道概念</strong><br>MySQL5.7.6 引入了复制通道的概念，表示事务从主库流到从库的路径。MySQL 服务器会在启动时自动创建一个默认通道，其名称为空字符串（””）。此通道始终存在；用户无法创建或销毁它。如果没有创建其他通道（具有非空名称），则复制语句仅作用于默认通道，以便所有来自旧从属服务器的复制语句都按预期工作。应用于复制通道的语句只能在至少有一个命名通道时使用。</p><p>在多源复制中，从库打开多个通道，每个主通道一个，每个通道都有自己的中继日志和 sql thread，一旦复制通道的接收器（I/O 线程）接收到事务，他们将被添加到通道的中继日志文件中并传递到 sql thread，使通道能够独立工作。</p></li><li><p><strong>主库和从库用不同引擎</strong><br>对于复制过程来说，主库表和从库表是否使用不同的引擎类型并不重要，实际上，在复制过程中不会复制存储引擎系统变量，用户可以针对不同的复制方案为从库设置不同的存储引擎。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/dicheng52119/Picture-Repository/blob/master/study/mysql/mysqlbinlog%E4%BB%8B%E7%BB%8D%E5%9B%BE.jpg?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="binlog" scheme="http://yoursite.com/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从，哨兵，以及redis cluster解析</title>
    <link href="http://yoursite.com/2019/07/06/Redis%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E4%BB%A5%E5%8F%8Aredis%20cluster%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/07/06/Redis主从，哨兵，以及redis cluster解析/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:11:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>高性能就是做分片（可以类比为分库分表，将数据分到不同服务器上），在Kafka中叫分区，在mongodb中叫shard，在HDFS上叫DataNode。而保证高可用的方式就是做交叉备份。然后我很好奇Redis是怎么部署的。一个Redis实例其实有很多问题，最起码Redis崩了就没法提供服务了，而且单机能够承载的QPS在上万到几万不等。</p><h3 id="replication（复制）"><a href="#replication（复制）" class="headerlink" title="replication（复制）"></a>replication（复制）</h3><p>如果业务要承载的QPS在几十万，单机是不可能做到的，此时就可以用到复制。做一个主从架构，一主多从，master节点负责写，slave节点负责读，假如说一个节点可以承载的5w读QPS，那么两个节点就可以承载10w的读QPS，水平扩容非常方便。</p><a id="more"></a><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/redis/redis%E4%B8%BB%E4%BB%8E%E7%BB%93%E6%9E%84%E5%9B%BE.jpg?raw=true" alt=""></p><p>master节点挂太多slave节点会有性能问题，此时就可以在slave节点上挂slave节点</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/redis/redis%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%AE%B9.jpg?raw=true" alt=""></p><h3 id="redis-replication的核心机制"><a href="#redis-replication的核心机制" class="headerlink" title="redis replication的核心机制"></a>redis replication的核心机制</h3><ol><li>redis采用异步方式复制数据到slave node，不会block master node的正常工作</li><li>一个master node可以配置多个slave node，slave node也可以连接其他的slave node</li><li>slave node主要用来进行横向扩容，做读写分离，扩容的slave node可以提高读的吞吐量</li></ol><h3 id="主从复制的实现原理"><a href="#主从复制的实现原理" class="headerlink" title="主从复制的实现原理"></a>主从复制的实现原理</h3><ol><li>slave连接master，发送SYNC命令；</li><li>master接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；</li><li>master BGSAVE执行完后，向slave发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>slave收到快照文件后丢弃所有旧数据，载入收到的快照；</li><li>master快照发送完毕后开始向salve发送缓冲区中的写命令；</li><li>slave完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li></ol><h3 id="sentine（哨兵）"><a href="#sentine（哨兵）" class="headerlink" title="sentine（哨兵）"></a>sentine（哨兵）</h3><p>主从架构有一个缺点就是如果master节点挂了，那么写服务是不可用的，因为slave节点默认是只读的，这时就重启master节点或者重新配置主从，有没有更好的方案呢？类似zookeeper的组件，能自动完成主从切换。在Redis中还真有，就是sentinel节点，当master节点发生故障能自动完成主从切换。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/redis/reids%20sentinel%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6.jpg?raw=true" alt=""></p><p>当master节点挂掉时，sentinel将一个slave节点变成master节点，当原先的master节点可用时，以slave的角色加入集群。</p><p>一个高可用的系统是很忌讳有单点问题的。看到没，sentinel就是一个单点，如果sentinel挂了，主从切换也就没人做了。所以应该将sentinel也做成一个集群。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/redis/reids%20sentinel%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4.jpg?raw=true" alt=""></p><h3 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h3><ol><li>集群监控，负责监控redis master和slave进程是否正常工作</li><li>消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员</li><li>故障转移，如果master node挂掉了，会自动转移到slave node上</li><li>配置中心，客户端初始化时，通过哨兵获得master地址，如果故障转移发生了，通知客户端新的master地址</li></ol><h3 id="redis-cluster（集群）"><a href="#redis-cluster（集群）" class="headerlink" title="redis cluster（集群）"></a>redis cluster（集群）</h3><p>主从+哨兵，只能保证Redis的高可用，并不能保证Redis的高性能，因为一个master节点并不能放海量数据，而且单个Redis的实例过大时，会导致rdb文件过大，当执行主从同步时时间过长。</p><p>如果想做到高性能该怎么办？分片啊，我一开始就提到了，都是一个套路。redis搞几个节点，每个节点存储一部分数据。可想而之，此时查询和插入都得按照一定的分片策略，总不能查询一个数据把所有的redis节点遍历一遍吧。而这种操作不应该放在客户端，中间件兴起了，常见的有codis，twemproxy。</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/redis/redis%20codis%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpg?raw=true" alt=""></p><p>客户端不连接具体的Redis，而是连接Codis，2个Codis节点保证高可用，和Mycat一个套路。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;高性能就是做分片（可以类比为分库分表，将数据分到不同服务器上），在Kafka中叫分区，在mongodb中叫shard，在HDFS上叫DataNode。而保证高可用的方式就是做交叉备份。然后我很好奇Redis是怎么部署的。一个Redis实例其实有很多问题，最起码Redis崩了就没法提供服务了，而且单机能够承载的QPS在上万到几万不等。&lt;/p&gt;
&lt;h3 id=&quot;replication（复制）&quot;&gt;&lt;a href=&quot;#replication（复制）&quot; class=&quot;headerlink&quot; title=&quot;replication（复制）&quot;&gt;&lt;/a&gt;replication（复制）&lt;/h3&gt;&lt;p&gt;如果业务要承载的QPS在几十万，单机是不可能做到的，此时就可以用到复制。做一个主从架构，一主多从，master节点负责写，slave节点负责读，假如说一个节点可以承载的5w读QPS，那么两个节点就可以承载10w的读QPS，水平扩容非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="replication" scheme="http://yoursite.com/tags/replication/"/>
    
      <category term="cluster" scheme="http://yoursite.com/tags/cluster/"/>
    
      <category term="sentine" scheme="http://yoursite.com/tags/sentine/"/>
    
  </entry>
  
  <entry>
    <title>Redis为什么是单线程且可以高并发</title>
    <link href="http://yoursite.com/2019/07/06/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%94%E5%8F%AF%E4%BB%A5%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>http://yoursite.com/2019/07/06/Redis为什么是单线程且可以高并发/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:07:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis的高并发和快速原因"><a href="#Redis的高并发和快速原因" class="headerlink" title="Redis的高并发和快速原因"></a>Redis的高并发和快速原因</h3><hr><ol><li>redis是基于内存的，内存的读写速度非常快；</li><li>redis是单线程的，省去了很多上下文切换线程的时间；</li><li>redis使用多路复用技术，可以处理并发的连接。非阻塞IO 内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的多路复用特性，绝不在io上浪费一点时间。</li></ol><p>下面重点介绍单线程设计和IO多路复用核心设计快的原因。</p><a id="more"></a><h3 id="为什么Redis是单线程的"><a href="#为什么Redis是单线程的" class="headerlink" title="为什么Redis是单线程的"></a>为什么Redis是单线程的</h3><hr><ul><li><p><strong>官方答案</strong><br>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p></li><li><p><strong>性能指标</strong><br>关于redis的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p></li><li><p><strong>详细原因</strong></p><ol><li><p>不需要各种锁的性能消耗<br>Redis的数据结构并不全是简单的Key-Value，还有list，hash等复杂的结构，这些结构有可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在hash当中添加或者删除一个对象。这些操作可能就需要加非常多的锁，导致的结果是同步开销大大增加。</p><p>总之，在单线程的情况下，就不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗。</p></li><li><p>单线程多进程集群方案<br>单线程的威力实际上非常强大，每核心效率也非常高，多线程自然是可以比单线程有更高的性能上限，但是在今天的计算环境中，即使是单机多线程的上限也往往不能满足需要了，需要进一步摸索的是多服务器集群化的方案，这些方案中多线程的技术照样是用不上的。</p><p>所以单线程、多进程的集群不失为一个时髦的解决方案。</p></li><li><p>CPU消耗<br>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU。</p><p>但是如果CPU成为Redis瓶颈，或者不想让服务器其他CUP核闲置，那怎么办？</p><p>可以考虑多起几个Redis进程，Redis是key-value数据库，不是关系数据库，数据之间没有约束。只要客户端分清哪些key放在哪个Redis进程上就可以了。</p></li></ol></li></ul><h3 id="Redis单线程的优劣势"><a href="#Redis单线程的优劣势" class="headerlink" title="Redis单线程的优劣势"></a>Redis单线程的优劣势</h3><hr><p>单进程单线程优势：</p><pre><code>1. 代码更清晰，处理逻辑更简单2. 不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗3. 不存在多进程或者多线程导致的切换而消耗CPU</code></pre><p>单进程单线程弊端：</p><pre><code>1. 无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善；</code></pre><h3 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h3><hr><p>redis 采用网络IO多路复用技术来保证在多连接的时候， 系统的高吞吐量。</p><p>多路-指的是多个socket连接，复用-指的是复用一个线程。多路复用主要有三种技术：select，poll，epoll。epoll是最新的也是目前最好的多路复用技术。</p><p>这里”多路”指的是多个网络连接，”复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。</p><h3 id="Redis高并发快总结"><a href="#Redis高并发快总结" class="headerlink" title="Redis高并发快总结"></a>Redis高并发快总结</h3><hr><ol><li>Redis是纯内存数据库，一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上，所以读取速度快。</li><li>再说一下IO，Redis使用的是非阻塞IO，IO多路复用，使用了单线程来轮询描述符，将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切换和竞争。</li><li>Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争。</li><li>另外，数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储，再如，跳表，使用有序的数据结构加快读取的速度。</li><li>还有一点，Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Redis的高并发和快速原因&quot;&gt;&lt;a href=&quot;#Redis的高并发和快速原因&quot; class=&quot;headerlink&quot; title=&quot;Redis的高并发和快速原因&quot;&gt;&lt;/a&gt;Redis的高并发和快速原因&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;redis是基于内存的，内存的读写速度非常快；&lt;/li&gt;
&lt;li&gt;redis是单线程的，省去了很多上下文切换线程的时间；&lt;/li&gt;
&lt;li&gt;redis使用多路复用技术，可以处理并发的连接。非阻塞IO 内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的多路复用特性，绝不在io上浪费一点时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面重点介绍单线程设计和IO多路复用核心设计快的原因。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="epoll" scheme="http://yoursite.com/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>全文搜索引擎 Elasticsearch 入门教程</title>
    <link href="http://yoursite.com/2019/07/06/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%20Elasticsearch%20%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/07/06/全文搜索引擎 Elasticsearch 入门教程/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elastic 的底层是开源库 Lucene。但是，你没法直接用 Lucene，必须自己写代码去调用它的接口。Elastic 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。</p><p>本文从零开始，讲解如何使用 Elastic 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Elastic 需要 Java 8 环境。安装完 Java，就可以跟着官方文档安装 Elastic。直接下载压缩包比较简单。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.1.zip</span><br><span class="line">$ unzip elasticsearch-5.5.1.zip</span><br><span class="line">$ <span class="built_in">cd</span> elasticsearch-5.5.1/</span><br></pre></td></tr></table></figure></p><p>接着，进入解压后的目录，运行下面的命令，启动 Elastic。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/elasticsearch</span><br></pre></td></tr></table></figure><p>如果这时报错”max virtual memory areas vm.maxmapcount [65530] is too low”，要运行下面的命令。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p><p>如果一切正常，Elastic 就会在默认的9200端口运行。这时，打开另一个命令行窗口，请求该端口，会得到说明信息。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl localhost:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"atntrTf"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tf9250XhQ6ee4h7YI11anA"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"5.5.1"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"19c13d0"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2017-07-18T20:44:24.823Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，请求9200端口，Elastic 返回一个 JSON 对象，包含当前节点、集群、版本等信息。</p><p>按下 Ctrl + C，Elastic 就会停止运行。</p><p>默认情况下，Elastic 只允许本机访问，如果需要远程访问，可以修改 Elastic 安装目录的config/elasticsearch.yml文件，去掉network.host的注释，将它的值改成0.0.0.0，然后重新启动 Elastic。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure></p><p>上面代码中，设成0.0.0.0让任何人都可以访问。线上服务不要这样设置，要设成具体的 IP。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p><strong>Node 与 Cluster</strong><br>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p></li><li><p><strong>Index</strong><br>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><p>下面的命令可以查看当前节点的所有 Index。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X GET <span class="string">'http://localhost:9200/_cat/indices?v'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Document</strong><br>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"user"</span>: <span class="string">"张三"</span>,</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"工程师"</span>,</span><br><span class="line"><span class="attr">"desc"</span>: <span class="string">"数据库管理"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p></li><li><p><strong>Type</strong><br>Document 可以分组，比如weather这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>下面的命令可以列出每个Index所包含的Type。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/_mapping?pretty=true'</span></span><br></pre></td></tr></table></figure><p>根据规划，Elastic 6.x 版只允许每个 Index 包含一个 Type，7.x 版将会彻底移除 Type。</p><p>用一个表格来做类比，如下：</p><p>​</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elasticsearch/es%E7%BB%93%E6%9E%84%E4%B8%8Emysql%E7%B1%BB%E6%AF%94%E5%9B%BE.jpg?raw=true" alt=""></p><p>​</p><p>使用 Elasticsearch 提供的 RESTful API 来执行上述操作，如图所示：</p><p>​</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elasticsearch/es%20restful%E8%A7%A3%E6%9E%90.jpg?raw=true" alt=""></p></li></ul><h3 id="新建和删除-Index"><a href="#新建和删除-Index" class="headerlink" title="新建和删除 Index"></a>新建和删除 Index</h3><p>新建 Index，可以直接向 Elastic 服务器发出 PUT 请求。下面的例子是新建一个名叫weather的 Index。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">'localhost:9200/weather'</span></span><br></pre></td></tr></table></figure></p><p>服务器返回一个 JSON 对象，里面的acknowledged字段表示操作成功。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"acknowledged"</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="string">"shards_acknowledged"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，我们发出 DELETE 请求，删除这个 Index。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X DELETE <span class="string">'localhost:9200/weather'</span></span><br></pre></td></tr></table></figure></p><h3 id="中文分词设置"><a href="#中文分词设置" class="headerlink" title="中文分词设置"></a>中文分词设置</h3><p>首先，安装中文分词插件。这里使用的是 ik，也可以考虑其他插件（比如 smartcn）。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.1/elasticsearch-analysis-ik-5.5.1.zip</span><br></pre></td></tr></table></figure></p><p>上面代码安装的是5.5.1版的插件，与 Elastic 5.5.1 配合使用。</p><p>接着，重新启动 Elastic，就会自动加载这个新安装的插件。</p><p>然后，新建一个 Index，指定需要分词的字段。这一步根据数据结构而异，下面的命令只针对本文。基本上，凡是需要搜索的中文字段，都要单独设置一下。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">'localhost:9200/accounts'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "mappings": &#123;</span></span><br><span class="line"><span class="string">    "person": &#123;</span></span><br><span class="line"><span class="string">      "properties": &#123;</span></span><br><span class="line"><span class="string">        "user": &#123;</span></span><br><span class="line"><span class="string">          "type": "text",</span></span><br><span class="line"><span class="string">          "analyzer": "ik_max_word",</span></span><br><span class="line"><span class="string">          "search_analyzer": "ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "title": &#123;</span></span><br><span class="line"><span class="string">          "type": "text",</span></span><br><span class="line"><span class="string">          "analyzer": "ik_max_word",</span></span><br><span class="line"><span class="string">          "search_analyzer": "ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "desc": &#123;</span></span><br><span class="line"><span class="string">          "type": "text",</span></span><br><span class="line"><span class="string">          "analyzer": "ik_max_word",</span></span><br><span class="line"><span class="string">          "search_analyzer": "ik_max_word"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user</span><br><span class="line">title</span><br><span class="line">desc</span><br></pre></td></tr></table></figure></p><p>这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p><p>Elastic 的分词器称为 analyzer。我们对每个字段指定分词器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"user"</span>: &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="string">"search_analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，analyzer是字段文本的分词器，search_analyzer是搜索词的分词器。ik_max_word分词器是插件ik提供的，可以对文本进行最大数量的分词。</p><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul><li><p><strong>新增记录</strong><br>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向/accounts/person发送请求，就可以新增一条人员记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">'localhost:9200/accounts/person/1'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"user": "张三",</span></span><br><span class="line"><span class="string">"title": "工程师",</span></span><br><span class="line"><span class="string">"desc": "数据库管理"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line"><span class="attr">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line"><span class="attr">"_id"</span>:<span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">"result"</span>:<span class="string">"created"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>:&#123;<span class="attr">"total"</span>:<span class="number">2</span>,<span class="attr">"successful"</span>:<span class="number">1</span>,<span class="attr">"failed"</span>:<span class="number">0</span>&#125;,</span><br><span class="line"><span class="attr">"created"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你仔细看，会发现请求路径是/accounts/person/1，最后的1是该条记录的 Id。它不一定是数字，任意字符串（比如abc）都可以。</p><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST <span class="string">'localhost:9200/accounts/person'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"user": "李四",</span></span><br><span class="line"><span class="string">"title": "工程师",</span></span><br><span class="line"><span class="string">"desc": "系统管理"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>上面代码中，向/accounts/person发出一个 POST 请求，添加一个记录。这时，服务器返回的 JSON 对象里面，_id字段就是一个随机字符串。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line"><span class="attr">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line"><span class="attr">"_id"</span>:<span class="string">"AV3qGfrC6jMbsbXb6k1p"</span>,</span><br><span class="line"><span class="attr">"_version"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">"result"</span>:<span class="string">"created"</span>,</span><br><span class="line"><span class="attr">"_shards"</span>:&#123;<span class="attr">"total"</span>:<span class="number">2</span>,<span class="attr">"successful"</span>:<span class="number">1</span>,<span class="attr">"failed"</span>:<span class="number">0</span>&#125;,</span><br><span class="line"><span class="attr">"created"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，如果没有先创建 Index（这个例子是accounts），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。所以，打字的时候要小心，不要写错 Index 的名称。</p></li><li><p><strong>查看记录</strong><br>向/Index/Type/Id发出 GET 请求，就可以查看这条记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/1?pretty=true'</span></span><br></pre></td></tr></table></figure><p>上面代码请求查看/accounts/person/1这条记录，URL 的参数pretty=true表示以易读的格式返回。</p><p>返回的数据中，found字段表示查询成功，_source字段返回原始记录。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line"><span class="attr">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line"><span class="attr">"_id"</span> : <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line"><span class="attr">"found"</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"_source"</span> : &#123;</span><br><span class="line">  <span class="attr">"user"</span> : <span class="string">"张三"</span>,</span><br><span class="line">  <span class="attr">"title"</span> : <span class="string">"工程师"</span>,</span><br><span class="line">  <span class="attr">"desc"</span> : <span class="string">"数据库管理"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Id 不正确，就查不到数据，found字段就是false。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/weather/beijing/abc?pretty=true'</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_index"</span> : <span class="string">"accounts"</span>,</span><br><span class="line"><span class="string">"_type"</span> : <span class="string">"person"</span>,</span><br><span class="line"><span class="string">"_id"</span> : <span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"found"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除记录</strong><br>删除记录就是发出 DELETE 请求。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X DELETE <span class="string">'localhost:9200/accounts/person/1'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>更新记录</strong><br>更新记录就是使用 PUT 请求，重新发送一次数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X PUT <span class="string">'localhost:9200/accounts/person/1'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  "user" : "张三",</span></span><br><span class="line"><span class="string">  "title" : "工程师",</span></span><br><span class="line"><span class="string">  "desc" : "数据库管理，软件开发"</span></span><br><span class="line"><span class="string">&#125;'</span> </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line"><span class="string">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line"><span class="string">"_id"</span>:<span class="string">"1"</span>,</span><br><span class="line"><span class="string">"_version"</span>:2,</span><br><span class="line"><span class="string">"result"</span>:<span class="string">"updated"</span>,</span><br><span class="line"><span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:2,<span class="string">"successful"</span>:1,<span class="string">"failed"</span>:0&#125;,</span><br><span class="line"><span class="string">"created"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们将原始数据从”数据库管理”改成”数据库管理，软件开发”。 返回结果里面，有几个字段发生了变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"_version"</span> : 2,</span><br><span class="line"><span class="string">"result"</span> : <span class="string">"updated"</span>,</span><br><span class="line"><span class="string">"created"</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>可以看到，记录的 Id 没变，但是版本（version）从1变成2，操作类型（result）从created变成updated，created字段变成false，因为这次不是新建记录。</p></li></ul><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><ul><li><p><strong>返回所有记录</strong><br>使用 GET 方法，直接请求/Index/Type/_search，就会返回所有记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"took"</span>:2,</span><br><span class="line"><span class="string">"timed_out"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">"_shards"</span>:&#123;<span class="string">"total"</span>:5,<span class="string">"successful"</span>:5,<span class="string">"failed"</span>:0&#125;,</span><br><span class="line"><span class="string">"hits"</span>:&#123;</span><br><span class="line">  <span class="string">"total"</span>:2,</span><br><span class="line">  <span class="string">"max_score"</span>:1.0,</span><br><span class="line">  <span class="string">"hits"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="string">"AV3qGfrC6jMbsbXb6k1p"</span>,</span><br><span class="line">      <span class="string">"_score"</span>:1.0,</span><br><span class="line">      <span class="string">"_source"</span>: &#123;</span><br><span class="line">        <span class="string">"user"</span>: <span class="string">"李四"</span>,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"工程师"</span>,</span><br><span class="line">        <span class="string">"desc"</span>: <span class="string">"系统管理"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line">      <span class="string">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line">      <span class="string">"_id"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"_score"</span>:1.0,</span><br><span class="line">      <span class="string">"_source"</span>: &#123;</span><br><span class="line">        <span class="string">"user"</span> : <span class="string">"张三"</span>,</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"工程师"</span>,</span><br><span class="line">        <span class="string">"desc"</span> : <span class="string">"数据库管理，软件开发"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，返回结果的 took字段表示该操作的耗时（单位为毫秒），timed_out字段表示是否超时，hits字段表示命中的记录，里面子字段的含义如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. total：返回记录数，本例是2条。</span><br><span class="line">2. max_score：最高的匹配程度，本例是1.0。</span><br><span class="line">3. hits：返回的记录组成的数组。</span><br></pre></td></tr></table></figure><p>返回的记录中，每条记录都有一个_score字段，表示匹配的程序，默认是按照这个字段降序排列。</p></li><li><p><strong>全文搜索</strong><br>Elastic 的查询非常特别，使用自己的查询语法，要求 GET 请求带有数据体。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span>  -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query" : &#123; "match" : &#123; "desc" : "软件" &#125;&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>上面代码使用 Match 查询，指定的匹配条件是desc字段里面包含”软件”这个词。返回结果如下。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"took"</span>:<span class="number">3</span>,</span><br><span class="line"><span class="attr">"timed_out"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">"_shards"</span>:&#123;<span class="attr">"total"</span>:<span class="number">5</span>,<span class="attr">"successful"</span>:<span class="number">5</span>,<span class="attr">"failed"</span>:<span class="number">0</span>&#125;,</span><br><span class="line"><span class="attr">"hits"</span>:&#123;</span><br><span class="line">  <span class="attr">"total"</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">"max_score"</span>:<span class="number">0.28582606</span>,</span><br><span class="line">  <span class="attr">"hits"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"_index"</span>:<span class="string">"accounts"</span>,</span><br><span class="line">      <span class="attr">"_type"</span>:<span class="string">"person"</span>,</span><br><span class="line">      <span class="attr">"_id"</span>:<span class="string">"1"</span>,</span><br><span class="line">      <span class="attr">"_score"</span>:<span class="number">0.28582606</span>,</span><br><span class="line">      <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"user"</span> : <span class="string">"张三"</span>,</span><br><span class="line">        <span class="attr">"title"</span> : <span class="string">"工程师"</span>,</span><br><span class="line">        <span class="attr">"desc"</span> : <span class="string">"数据库管理，软件开发"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Elastic 默认一次返回10条结果，可以通过size字段改变这个设置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span>  -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query" : &#123; "match" : &#123; "desc" : "管理" &#125;&#125;,</span></span><br><span class="line"><span class="string">"size": 1</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>上面代码指定，每次只返回一条结果。</p><p>还可以通过from字段，指定位移。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span>  -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query" : &#123; "match" : &#123; "desc" : "管理" &#125;&#125;,</span></span><br><span class="line"><span class="string">"from": 1,</span></span><br><span class="line"><span class="string">"size": 1</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>上面代码指定，从位置1开始（默认是从位置0开始），只返回一条结果。</p></li><li><p><strong>逻辑运算</strong><br>如果有多个搜索关键字， Elastic 认为它们是or关系。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span>  -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query" : &#123; "match" : &#123; "desc" : "软件 系统" &#125;&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>上面代码搜索的是软件 or 系统。</p><p>如果要执行多个关键词的and搜索，必须使用布尔查询。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">'localhost:9200/accounts/person/_search'</span>  -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"query": &#123;</span></span><br><span class="line"><span class="string">  "bool": &#123;</span></span><br><span class="line"><span class="string">    "must": [</span></span><br><span class="line"><span class="string">      &#123; "match": &#123; "desc": "软件" &#125; &#125;,</span></span><br><span class="line"><span class="string">      &#123; "match": &#123; "desc": "系统" &#125; &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="noopener">ElasticSearch 官方手册</a></li><li><a href="https://www.elastic.co/cn/blog/a-practical-introduction-to-elasticsearch" target="_blank" rel="noopener">A Practical Introduction to Elasticsearch</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。&lt;/p&gt;
&lt;p&gt;它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。&lt;/p&gt;
&lt;p&gt;Elastic 的底层是开源库 Lucene。但是，你没法直接用 Lucene，必须自己写代码去调用它的接口。Elastic 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。&lt;/p&gt;
&lt;p&gt;本文从零开始，讲解如何使用 Elastic 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。&lt;/p&gt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://yoursite.com/categories/Elasticsearch/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="index" scheme="http://yoursite.com/tags/index/"/>
    
      <category term="document" scheme="http://yoursite.com/tags/document/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
      <category term="IK Analyzer" scheme="http://yoursite.com/tags/IK-Analyzer/"/>
    
  </entry>
  
  <entry>
    <title>分布式限流组件-基于Redis的RateLimter</title>
    <link href="http://yoursite.com/2019/07/06/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81%E7%BB%84%E4%BB%B6-%E5%9F%BA%E4%BA%8ERedis%E7%9A%84RateLimter/"/>
    <id>http://yoursite.com/2019/07/06/分布式限流组件-基于Redis的RateLimter/</id>
    <published>2019-07-06T08:40:00.000Z</published>
    <updated>2019-07-06T09:15:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>在分布式领域，我们难免会遇到并发量突增，对后端服务造成高压力，严重甚至会导致系统宕机。为避免这种问题，我们通常会为接口添加限流、降级、熔断等能力，从而使接口更为健壮。Java领域常见的开源组件有Netflix的hystrix，阿里系开源的sentinel等，都是蛮不错的限流熔断框架。</p><p>今天我们就基于Redis组件的特性，实现一个分布式限流组件，名字就定为shield-ratelimiter。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><p>首先解释下为何采用Redis作为限流组件的核心。</p><p>通俗地讲，假设一个用户（用IP判断）每秒访问某服务接口的次数不能超过10次，那么我们可以在Redis中创建一个键，并设置键的过期时间为60秒。</p><p>当一个用户对此服务接口发起一次访问就把键值加1，在单位时间（此处为1s）内当键值增加到10的时候，就禁止访问服务接口。PS:在某种场景中添加访问时间间隔还是很有必要的。我们本次不考虑间隔时间，只关注单位时间内的访问次数。</p><a id="more"></a><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><hr><p>原理已经讲过了，说下需求。</p><ol><li>基于Redis的incr及过期机制开发</li><li>调用方便，声明式</li><li>Spring支持</li></ol><p>基于上述需求，我们决定基于注解方式进行核心功能开发，基于Spring-boot-starter作为基础环境，从而能够很好的适配Spring环境。</p><p>另外，在本次开发中，我们不通过简单的调用Redis的java类库API实现对Redis的incr操作。</p><p>原因在于，我们要保证整个限流的操作是原子性的，如果用Java代码去做操作及判断，会有并发问题。这里我决定采用Lua脚本进行核心逻辑的定义。</p><h3 id="为何使用Lua"><a href="#为何使用Lua" class="headerlink" title="为何使用Lua"></a>为何使用Lua</h3><hr><p>在正式开发前，我简单介绍下对Redis的操作中，为何推荐使用Lua脚本。</p><ol><li>减少网络开销: 不使用 Lua 的代码需要向 Redis 发送多次请求, 而脚本只需一次即可, 减少网络传输; </li><li>原子操作: Redis 将整个脚本作为一个原子执行, 无需担心并发, 也就无需事务; </li><li>复用: 脚本会永久保存 Redis 中, 其他客户端可继续使用.</li></ol><p>Redis添加了对Lua的支持，能够很好的满足原子性、事务性的支持，让我们免去了很多的异常逻辑处理。对于Lua的语法不是本文的主要内容。</p><h3 id="正式开发"><a href="#正式开发" class="headerlink" title="正式开发"></a>正式开发</h3><hr><p>到这里，我们正式开始手写限流组件的进程。</p><ul><li><p><strong>工程定义</strong><br>项目基于maven构建，主要依赖Spring-boot-starter，我们主要在springboot上进行开发，因此自定义的开发包可以直接依赖下面这个坐标，方便进行包管理。版本号自行选择稳定版。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>Redis整合</strong><br>由于我们是基于Redis进行的限流操作，因此需要整合Redis的类库，上面已经讲到，我们是基于Springboot进行的开发，因此这里可以直接整合RedisTemplate。</p><p>这里我们引入spring-boot-starter-redis的依赖。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>新建一个Redis的配置类，命名为RedisCacheConfig，使用javaconfig形式注入CacheManager及RedisTemplate。为了操作方便，我们采用了Jackson进行序列化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RedisCacheConfig.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate&lt;?, ?&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">      CacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Springboot Redis cacheManager 加载完成"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cacheManager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">      RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">      template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">      Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">      ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">      mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">      mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">      serializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">      template.setValueSerializer(serializer);</span><br><span class="line">      <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">      template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">      template.afterPropertiesSet();</span><br><span class="line">      LOGGER.info(<span class="string">"Springboot RedisTemplate 加载完成"</span>);</span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要使用@Configuration 标注此类为一个配置类，当然你可以使用@Component ， 但是不推荐，原因在于@Component 注解虽然也可以当作配置类，但是并不会为其生成CGLIB代理Class，而使用@Configuration ，CGLIB会为其生成代理类，进行性能的提升。</p><p>调用方application.propertie需要增加Redis配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单机模式redis</span></span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">spring.redis.pool.maxActive=8</span><br><span class="line">spring.redis.pool.maxWait=-1</span><br><span class="line">spring.redis.pool.maxIdle=8</span><br><span class="line">spring.redis.pool.minIdle=0</span><br><span class="line">spring.redis.timeout=10000</span><br><span class="line">spring.redis.password=pwd123</span><br></pre></td></tr></table></figure><p>这里为单机配置，如果需要支持哨兵集群，则配置如下，Java代码不需要改动，只需要变动配置即可。注意 两种配置不能共存！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#哨兵集群模式</span></span><br><span class="line"><span class="comment"># database name</span></span><br><span class="line">spring.redis.database=0</span><br><span class="line"><span class="comment"># server password 密码，如果没有设置可不配</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># pool settings ...池配置</span></span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"><span class="comment"># name of Redis server  哨兵监听的Redis server的名称</span></span><br><span class="line">spring.redis.sentinel.master=mymaster</span><br><span class="line"><span class="comment"># comma-separated list of host:port pairs  哨兵的配置列表</span></span><br><span class="line">spring.redis.sentinel.nodes=127.0.0.1:26379,127.0.0.1:26479,127.0.0.1:26579</span><br></pre></td></tr></table></figure></li><li><p>定义注解<br>为了调用方便，我们定义一个名为RateLimiter 的注解，内容如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> snowalker</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2018/10/27 1:25</span></span><br><span class="line"><span class="comment">* <span class="doctag">@className</span> RateLimiter</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desc</span> 限流注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimiter &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 限流key</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> "rate:limiter"</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 单位时间限制通过请求数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">limit</span><span class="params">()</span> <span class="keyword">default</span> 10</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 过期时间，单位秒</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解明确只用于方法，主要有三个属性。</p><ol><li>key–表示限流模块名，指定该值用于区分不同应用，不同场景，推荐格式为：应用名:模块名:ip:接口名:方法名。</li><li>limit–表示单位时间允许通过的请求数。</li><li>expire–incr的值的过期时间，业务中表示限流的单位时间。</li></ol></li><li><p>解析注解<br>定义好注解后，需要开发注解使用的切面，这里我们直接使用aspectj进行切面的开发。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimterHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RateLimterHandler.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> DefaultRedisScript&lt;Long&gt; getRedisScript;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      getRedisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">      getRedisScript.setResultType(Long.class);</span><br><span class="line">      getRedisScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"rateLimter.lua"</span>)));</span><br><span class="line">      LOGGER.info(<span class="string">"RateLimterHandler[分布式限流处理器]脚本加载完成"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里是注入了RedisTemplate，使用其API进行Lua脚本的调用。</p><p>init() 方法在应用启动时会初始化DefaultRedisScript，并加载Lua脚本，方便进行调用。</p><p>PS: Lua脚本放置在classpath下，通过ClassPathResource进行加载。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.snowalker.shield.ratelimiter.core.annotation.RateLimiter)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rateLimiter</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里我们定义了一个切点，表示只要注解了@RateLimiter 的方法，均可以触发限流操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Around</span>(<span class="string">"@annotation(rateLimiter)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint, RateLimiter rateLimiter)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"RateLimterHandler[分布式限流处理器]开始执行限流操作"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Signature signature = proceedingJoinPoint.getSignature();</span><br><span class="line">      <span class="keyword">if</span> (!(signature <span class="keyword">instanceof</span> MethodSignature)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the Annotation @RateLimter must used on method!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 获取注解参数</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="comment">// 限流模块key</span></span><br><span class="line">      String limitKey = rateLimiter.key();</span><br><span class="line">      Preconditions.checkNotNull(limitKey);</span><br><span class="line">      <span class="comment">// 限流阈值</span></span><br><span class="line">      <span class="keyword">long</span> limitTimes = rateLimiter.limit();</span><br><span class="line">      <span class="comment">// 限流超时时间</span></span><br><span class="line">      <span class="keyword">long</span> expireTime = rateLimiter.expire();</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"RateLimterHandler[分布式限流处理器]参数值为-limitTimes=&#123;&#125;,limitTimeout=&#123;&#125;"</span>, limitTimes, expireTime);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 执行Lua脚本</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      List&lt;String&gt; keyList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      <span class="comment">// 设置key值为注解中的值</span></span><br><span class="line">      keyList.add(limitKey);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 调用脚本并执行</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      Long result = (Long) redisTemplate.execute(getRedisScript, keyList, expireTime, limitTimes);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">          String msg = <span class="string">"由于超过单位时间="</span> + expireTime + <span class="string">"-允许的请求次数="</span> + limitTimes + <span class="string">"[触发限流]"</span>;</span><br><span class="line">          LOGGER.debug(msg);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"RateLimterHandler[分布式限流处理器]限流执行结果-result=&#123;&#125;,请求[正常]响应"</span>, result);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的逻辑为，获取 @RateLimiter 注解配置的属性：key、limit、expire，并通过redisTemplate.execute(RedisScriptscript,Listkeys,Object…args) 方法传递给Lua脚本进行限流相关操作，逻辑很清晰。</p><p>这里我们定义如果脚本返回状态为0则为触发限流，1表示正常请求。</p></li><li><p>Lua脚本<br>这里是我们整个限流操作的核心，通过执行一个Lua脚本进行限流的操作。脚本内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--获取KEY</span><br><span class="line">local key1 = KEYS[1]</span><br><span class="line"></span><br><span class="line">local val = redis.call(&apos;incr&apos;, key1)</span><br><span class="line">local ttl = redis.call(&apos;ttl&apos;, key1)</span><br><span class="line"></span><br><span class="line">--获取ARGV内的参数并打印</span><br><span class="line">local expire = ARGV[1]</span><br><span class="line">local times = ARGV[2]</span><br><span class="line"></span><br><span class="line">redis.log(redis.LOG_DEBUG,tostring(times))</span><br><span class="line">redis.log(redis.LOG_DEBUG,tostring(expire))</span><br><span class="line"></span><br><span class="line">redis.log(redis.LOG_NOTICE, &quot;incr &quot;..key1..&quot; &quot;..val);</span><br><span class="line">if val == 1 then</span><br><span class="line">  redis.call(&apos;expire&apos;, key1, tonumber(expire))</span><br><span class="line">else</span><br><span class="line">  if ttl == -1 then</span><br><span class="line">      redis.call(&apos;expire&apos;, key1, tonumber(expire))</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if val &gt; tonumber(times) then</span><br><span class="line">  return 0</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return 1</span><br></pre></td></tr></table></figure><p>逻辑很通俗，我简单介绍下。</p><ol><li>首先脚本获取Java代码中传递而来的要限流的模块的key，不同的模块key值一定不能相同，否则会覆盖！</li><li>redis.call(‘incr’, key1)对传入的key做incr操作，如果key首次生成，设置超时时间ARGV[1]；（初始值为1）</li><li>ttl是为防止某些key在未设置超时时间并长时间已经存在的情况下做的保护的判断；</li><li>每次请求都会做+1操作，当限流的值val大于我们注解的阈值，则返回0表示已经超过请求限制，触发限流。否则为正常请求。</li></ol><p>当过期后，又是新的一轮循环，整个过程是一个原子性的操作，能够保证单位时间不会超过我们预设的请求阈值。</p><p>到这里我们便可以在项目中进行测试。</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><hr><p><a href="https://github.com/dicheng52119/shield-ratelimter" target="_blank" rel="noopener">demo地址</a></p><p>这里我贴一下核心代码，我们定义一个接口，并注解@RateLimiter(key=“ratedemo:1.0.0”,limit=5,expire=100) 表示模块ratedemo:sendPayment:1.0.0 在100s内允许通过5个请求，这里的参数设置是为了方便看结果。实际中，我们通常会设置1s内允许通过的次数。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"ratelimiter"</span>)</span><br><span class="line">    <span class="meta">@RateLimiter</span>(key = <span class="string">"ratedemo:1.0.0"</span>, limit = <span class="number">5</span>, expire = <span class="number">100</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendPayment</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"正常请求"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们通过RestClient请求接口，日志返回如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2018-10-28 00:00:00.602 DEBUG 17364 --- [nio-8888-exec-1] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:00.688 DEBUG 17364 --- [nio-8888-exec-1] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]限流执行结果-result=1,请求[正常]响应</span><br><span class="line"></span><br><span class="line">2018-10-28 00:00:00.860 DEBUG 17364 --- [nio-8888-exec-3] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:01.183 DEBUG 17364 --- [nio-8888-exec-4] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:01.520 DEBUG 17364 --- [nio-8888-exec-3] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]限流执行结果-result=1,请求[正常]响应</span><br><span class="line">2018-10-28 00:00:01.521 DEBUG 17364 --- [nio-8888-exec-4] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]限流执行结果-result=1,请求[正常]响应</span><br><span class="line"></span><br><span class="line">2018-10-28 00:00:01.557 DEBUG 17364 --- [nio-8888-exec-5] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:01.558 DEBUG 17364 --- [nio-8888-exec-5] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]限流执行结果-result=1,请求[正常]响应</span><br><span class="line"></span><br><span class="line">2018-10-28 00:00:01.774 DEBUG 17364 --- [nio-8888-exec-7] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:02.111 DEBUG 17364 --- [nio-8888-exec-8] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始</span><br><span class="line">2018-10-28 00:00:02.169 DEBUG 17364 --- [nio-8888-exec-7] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]限流执行结果-result=1,请求[正常]响应</span><br><span class="line"></span><br><span class="line">2018-10-28 00:00:02.169 DEBUG 17364 --- [nio-8888-exec-8] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> 由于超过单位时间=100-允许的请求次数=5[触发限流]</span><br><span class="line">2018-10-28 00:00:02.276 DEBUG 17364 --- [io-8888-exec-10] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:02.276 DEBUG 17364 --- [io-8888-exec-10] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]参数值为-limitTimes=5,limitTimeout=100</span><br><span class="line">2018-10-28 00:00:02.278 DEBUG 17364 --- [io-8888-exec-10] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> 由于超过单位时间=100-允许的请求次数=5[触发限流]</span><br><span class="line">2018-10-28 00:00:02.445 DEBUG 17364 --- [nio-8888-exec-2] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:02.445 DEBUG 17364 --- [nio-8888-exec-2] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]参数值为-limitTimes=5,limitTimeout=100</span><br><span class="line">2018-10-28 00:00:02.446 DEBUG 17364 --- [nio-8888-exec-2] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> 由于超过单位时间=100-允许的请求次数=5[触发限流]</span><br><span class="line">2018-10-28 00:00:02.628 DEBUG 17364 --- [nio-8888-exec-4] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]开始执行限流操作</span><br><span class="line">2018-10-28 00:00:02.628 DEBUG 17364 --- [nio-8888-exec-4] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> RateLimterHandler[分布式限流处理器]参数值为-limitTimes=5,limitTimeout=100</span><br><span class="line">2018-10-28 00:00:02.629 DEBUG 17364 --- [nio-8888-exec-4] c.s.s.r.core.handler.RateLimterHandler   :</span><br><span class="line"> 由于超过单位时间=100-允许的请求次数=5[触发限流]</span><br></pre></td></tr></table></figure></p><p>根据日志能够看到，正常请求5次后，返回限流触发，说明我们的逻辑生效，对前端而言也是可以看到false标记，表明我们的Lua脚本限流逻辑是正确的，这里具体返回什么标记需要调用方进行明确的定义。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们通过Redis的incr及expire功能特性，开发定义了一套基于注解的分布式限流操作，核心逻辑基于Lua保证了原子性。达到了很好的限流的目的，生产上，可以基于该特点进行定制自己的限流组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在分布式领域，我们难免会遇到并发量突增，对后端服务造成高压力，严重甚至会导致系统宕机。为避免这种问题，我们通常会为接口添加限流、降级、熔断等能力，从而使接口更为健壮。Java领域常见的开源组件有Netflix的hystrix，阿里系开源的sentinel等，都是蛮不错的限流熔断框架。&lt;/p&gt;
&lt;p&gt;今天我们就基于Redis组件的特性，实现一个分布式限流组件，名字就定为shield-ratelimiter。&lt;/p&gt;
&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;首先解释下为何采用Redis作为限流组件的核心。&lt;/p&gt;
&lt;p&gt;通俗地讲，假设一个用户（用IP判断）每秒访问某服务接口的次数不能超过10次，那么我们可以在Redis中创建一个键，并设置键的过期时间为60秒。&lt;/p&gt;
&lt;p&gt;当一个用户对此服务接口发起一次访问就把键值加1，在单位时间（此处为1s）内当键值增加到10的时候，就禁止访问服务接口。PS:在某种场景中添加访问时间间隔还是很有必要的。我们本次不考虑间隔时间，只关注单位时间内的访问次数。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="rateLimter" scheme="http://yoursite.com/tags/rateLimter/"/>
    
      <category term="lua" scheme="http://yoursite.com/tags/lua/"/>
    
      <category term="incr" scheme="http://yoursite.com/tags/incr/"/>
    
      <category term="expire" scheme="http://yoursite.com/tags/expire/"/>
    
  </entry>
  
  <entry>
    <title>Executor并发框架学习笔记</title>
    <link href="http://yoursite.com/2018/02/04/Executor%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/04/Executor并发框架学习笔记/</id>
    <published>2018-02-04T05:37:52.000Z</published>
    <updated>2018-02-04T05:37:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>Executor的UML图：（常用的几个接口和子类）<br><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/thread/Executor%E5%AE%B6%E8%B0%B1%E5%9B%BE.png?raw=true" alt=""></li></ul><ol><li>Executor：一个接口，其定义了一个接收Runnable对象的方法executor，其方法签名为executor(Runnable command)</li><li>ExecutorService：是一个比Executor使用更广泛的子类接口，其提供了生命周期管理的方法，以及可跟踪一个或多个异步任务执行状况返回Future的方法</li><li>AbstractExecutorService：ExecutorService执行方法的默认实现</li><li>ScheduledExecutorService：一个可定时调度任务的接口</li><li>ScheduledThreadPoolExecutor：ScheduledExecutorService的实现，一个可定时调度任务的线程池</li><li>ThreadPoolExecutor：线程池，可以通过调用Executors以下静态工厂方法来创建线程池并返回一个ExecutorService对象</li></ol><a id="more"></a><h3 id="ThreadPoolExecutor构造函数的各个参数说明"><a href="#ThreadPoolExecutor构造函数的各个参数说明" class="headerlink" title="ThreadPoolExecutor构造函数的各个参数说明"></a>ThreadPoolExecutor构造函数的各个参数说明</h3><p>ThreadPoolExecutor方法签名：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> <span class="comment">//后两个参数为可选参数</span></span></span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ol><li>corePoolSize：核心线程数，如果运行的线程少于corePoolSize，则创建新线程来执行新任务，即使线程池中的其他线程是空闲的</li><li>maximumPoolSize:最大线程数，可允许创建的线程数，corePoolSize和maximumPoolSize设置的边界自动调整池大小：<br>corePoolSize &lt;运行的线程数&lt; maximumPoolSize:仅当队列满时才创建新线程<br>corePoolSize=运行的线程数= maximumPoolSize：创建固定大小的线程池</li><li>keepAliveTime:如果线程数多于corePoolSize,则这些多余的线程的空闲时间超过keepAliveTime时将被终止</li><li>unit:keepAliveTime参数的时间单位</li><li>workQueue:保存任务的阻塞队列，与线程池的大小有关：<br>当运行的线程数少于corePoolSize时，在有新任务时直接创建新线程来执行任务而无需再进队列<br>当运行的线程数等于或多于corePoolSize，在有新任务添加时则选加入队列，不直接创建线程<br>当队列满时，在有新任务时就创建新线程</li><li>threadFactory:使用ThreadFactory创建新线程，默认使用defaultThreadFactory创建线程</li><li>handle:定义处理被拒绝任务的策略，默认使用ThreadPoolExecutor.AbortPolicy,任务被拒绝时将抛出RejectExecutorException</li></ol><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>提供了一系列静态工厂方法用于创建各种线程池</p><ol><li><p>newFixedThreadPool:创建可重用且固定线程数的线程池，如果线程池中的所有线程都处于活动状态，此时再提交任务就在队列中等待，直到有可用线程；如果线程池中的某个线程由于异常而结束时，线程池就会再补充一条新线程。<br>方法签名：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="comment">//使用一个基于FIFO排序的阻塞队列，在所有corePoolSize线程都忙时新任务将在队列中等待</span></span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>newSingleThreadExecutor:创建一个单线程的Executor，如果该线程因为异常而结束就新建一条线程来继续执行后续的任务。<br>方法签名：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">                     <span class="comment">//corePoolSize和maximumPoolSize都等于，表示固定线程池大小为1</span></span><br><span class="line">                        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>newScheduledThreadPool:创建一个可延迟执行或定期执行的线程池。</p></li><li>newCachedThreadPool:创建可缓存的线程池，如果线程池中的线程在60秒未被使用就将被移除，在执行新的任务时，当线程池中有之前创建的可用线程就重用可用线程，否则就新建一条线程。<br>方法签名：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="comment">//使用同步队列，将任务直接提交给线程</span></span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过使用Executor可以很轻易的实现各种调优  管理  监视  记录日志和错误报告等待。</p><h3 id="Executor的生命周期"><a href="#Executor的生命周期" class="headerlink" title="Executor的生命周期"></a>Executor的生命周期</h3><p>ExecutorService提供了管理Executor生命周期的方法，ExecutorService的生命周期包括了：运行、关闭和终止三种状态。</p><p>ExecutorService在初始化创建时处于运行状态。<br>shutdown方法等待提交的任务执行完成并不再接受新任务，在完成全部提交的任务后关闭。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>使用newScheduledThreadPool来模拟心跳机制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"HeartBeat........................."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        executor.scheduleAtFixedRate(task,<span class="number">5</span>,<span class="number">3</span>, TimeUnit.SECONDS);   <span class="comment">//5秒后第一次执行，之后每隔3秒执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出结果：</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HeartBeat....................... //5秒后第一次输出</span><br><span class="line">HeartBeat....................... //每隔3秒输出一个</span><br></pre></td></tr></table></figure></li><li><p>使用newCachedThreadPool模拟线程重用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     ExecutorService threadPool = Executors.newCachedThreadPool();<span class="comment">//线程池里面的线程数会动态变化，并可在线程被移除前重用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">final</span>  <span class="keyword">int</span> task = i;   <span class="comment">//10个任务</span></span><br><span class="line">            <span class="comment">//TimeUnit.SECONDS.sleep(1);</span></span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> Runnable() &#123;    <span class="comment">//接受一个Runnable实例</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"线程名字： "</span> + Thread.currentThread().getName() +  <span class="string">"  任务名为： "</span>+task);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出结果：（为每个任务新建一条线程，共创建了3条线程）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">线程名字： pool-1-thread-1 任务名为： 1</span><br><span class="line">线程名字： pool-1-thread-2 任务名为： 2</span><br><span class="line">线程名字： pool-1-thread-3 任务名为： 3</span><br></pre></td></tr></table></figure><p>  去掉第6行的注释其输出如下：（始终重复利用一条线程，因为newCachedThreadPool能重用可用线程）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">线程名字： pool-1-thread-1 任务名为： 1</span><br><span class="line">线程名字： pool-1-thread-1 任务名为： 2</span><br><span class="line">线程名字： pool-1-thread-1 任务名为： 3</span><br></pre></td></tr></table></figure></li><li><p>任务执行完成后并返回执行结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableAndFuture</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line">        Future&lt;String&gt; future = executor.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;   <span class="comment">//接受一上callable实例</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"MOBIN"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"任务的执行结果："</span>+future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  输出结果：</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">任务的执行结果：MOBIN</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过Executor来设计应用程序可以简化开发过程，提高开发效率，并有助于实现并发，在开发中如果需要创建线程可优先考虑使用Executor。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Executor的UML图：（常用的几个接口和子类）&lt;br&gt;&lt;img src=&quot;https://github.com/dicheng52119/Picture-Repository/blob/master/study/thread/Executor%E5%AE%B6%E8%B0%B1%E5%9B%BE.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Executor：一个接口，其定义了一个接收Runnable对象的方法executor，其方法签名为executor(Runnable command)&lt;/li&gt;
&lt;li&gt;ExecutorService：是一个比Executor使用更广泛的子类接口，其提供了生命周期管理的方法，以及可跟踪一个或多个异步任务执行状况返回Future的方法&lt;/li&gt;
&lt;li&gt;AbstractExecutorService：ExecutorService执行方法的默认实现&lt;/li&gt;
&lt;li&gt;ScheduledExecutorService：一个可定时调度任务的接口&lt;/li&gt;
&lt;li&gt;ScheduledThreadPoolExecutor：ScheduledExecutorService的实现，一个可定时调度任务的线程池&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor：线程池，可以通过调用Executors以下静态工厂方法来创建线程池并返回一个ExecutorService对象&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Thread" scheme="http://yoursite.com/categories/Thread/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="Executor" scheme="http://yoursite.com/tags/Executor/"/>
    
      <category term="Executors" scheme="http://yoursite.com/tags/Executors/"/>
    
  </entry>
  
  <entry>
    <title>服务容错保护：Spring Cloud Hystrix 总结</title>
    <link href="http://yoursite.com/2018/02/04/Spring%20Cloud%20Hystrix%20%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/04/Spring Cloud Hystrix 总结/</id>
    <published>2018-02-04T04:18:39.000Z</published>
    <updated>2018-02-04T05:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hystrix使用说明"><a href="#Hystrix使用说明" class="headerlink" title="Hystrix使用说明"></a>Hystrix使用说明</h3><ul><li><p>应用场景<br>在微服务架构中，存在着那么多的服务单元，如一个单元出现故障，就很容易因y依赖关系而引发故障的蔓延，最终导致整个系统的瘫痪，为了解决这样的问题，引入断路器等一系列的服务保护机制。</p></li><li><p>功能描述</p><ol><li>服务降级</li><li>服务熔断</li><li>线程和信号隔离</li><li>请求缓存</li><li>请求合并</li><li>服务监控</li></ol></li><li><p>Hystrix工作流程图和详细流程说明</p></li></ul><a id="more"></a><p>  <img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/spring%20cloud/Hystrix%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png?raw=true" alt=""></p><p>  流程说明：</p><ul><li>Hystrix状态有三种：1.开启 2.关闭 3.半开</li><li>HystrixCommand首先通过isOpen()来判断断路器的打开/关闭状态。<ul><li>如果断路器打开标识为true，则直接返回true，表示断路器处于打开状态。否则，就从度量指标对象metrics中获取HealthCounts统计对象做进一步判断(该对象记录了一个滚动时间窗内的请求信息快照，默认时间窗为10秒)。<ul><li>如果它的请求总数(QPS) 在预设的阈值范围内就返回false，表示断路器处于未打开状态。该阈值的配置参数为circuitBreakerRequestVolumeThreshold，默认值是20。</li><li>如果错误百分比在阈值范围内就返回false，表示断路器处于未打开状态。该阈值的配置参数为circuitBreakerErrorThresholdPercentage，默认值为50。</li><li>如果上面的两个条件都不满足，则将断路器设置为打开状态。</li></ul></li></ul></li><li>Hystrix状态之间的关系以及转化的机制<ul><li>当失败的次数达到一定的阈值后，断路器处于开启，否则处于关闭。</li><li>通过circuitBreakerSleepWindowInMilliseconds属性设置了一个断路器打开之后的休眠时间(默认是5秒)，在该休眠时间到达之后，将再次允许请求尝试访问，此时断路器处于“半开”状态，若此时请求继续失败，断路器又进入打开状态，并继续等待下一个休眠窗口过去之后再次尝试；若请求成功，则将断路器重新置于关闭状态。</li></ul></li><li>markSuccess()用在“半开”状态时使用。若Hystrix命令调用成功，通过调用它将打开的断路器关闭，并重置度量指标对象。</li></ul><ul><li><p>Hystrix依赖隔离策略以及作用</p><ol><li>execution.isolation.strategy为隔离策略，有两种方式，一种是semaphore，一种是thread，默认和建议的是thread。</li><li>信号量模式是同步调用模式，不支持超时调用，不支持直接熔断，从始至终都只有请求线程自身，没有线程的切换，开销较小。由于信息量不支持超时，当被调服务发生问题时，有少部分用户会长时间无法得到响应。默认值是10个，排队队列默认是5个。</li><li>线程池模式支持异步调用，支持超时调用，支持直接熔断，独立的请求线程和服务线程，存在线程切换，开销比信号量模式大一些。默认值是10个，排队队列默认是5个。</li><li>线程池模式作用：运行环境被隔离开了。 这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响。但是带来的代价就是维护多个线程池会对系统带来额外的性能开销。 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源。</li><li><strong>隔离策略配置</strong><br>全局配置：<br>hystrix.command.default.execution.isolation.strategy(默认值是THREAD)<br>实例配置：<br>hystrix.command.HystrixCommandKey.execution.isolation.strategy<br><strong>semaphore配置</strong><br>全局配置：<br>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests(默认值是10)<br>实例配置：<br>hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests<br><strong>thread配置</strong><br>全局配置(线程总数)：<br>hystrix.threadpool.default.coreSize(默认值是10)<br>实例配置：<br>hystrix.threadpool.HystrixThreadPoolKey.coreSize<br>全局配置(最大可用线程数)<br>hystrix.threadpool.default.maximumSize(默认值是10)<br>实例配置：<br>hystrix.threadpool.HystrixThreadPoolKey.maximumSize</li></ol></li><li><p>Hystrix的超时时间、并发数、熔断阈值对断路器的开启或关闭状态的控制</p><ol><li><strong>超时时间设置</strong><br>全局配置：<br>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds(默认值是1000ms)<br>实例配置：<br>hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</li><li><strong>并发数设置</strong><br>参照隔离策略配置进行相关配置</li><li><strong>熔断阈值设置</strong><br>全局配置(滚动时间窗长度设置)：<br>hystrix.command.default.metrics.rollingStats.timeInMilliseconds(默认值是10000ms)<br>实例配置：<br>hystrix.command.HystrixCommandKey.metrics.rollingStats.timeInMilliseconds<br>全局配置(休眠窗时间设置)：<br>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds(默认值5000ms)<br>实例配置：                                                                                    hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowInMilliseconds<br>全局配置(断路器熔断的最小请求数设置)：<br>hystrix.command.default.circuitBreaker.requestVolumeThreshold(默认值是20)<br>实例配置：<br>hystrix.command.HystrixCommandKey.circuitBreaker.requestVolumeThreshold<br>全局配置(断路器打开的错误百分比设置)：<br>hystrix.command.default.circuitBreaker.errorThresholdPercentage(默认值是50)<br>实例配置：<br>hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage</li></ol></li><li><p>Hystrix与Ribbon超时时间设置的关系<br>Hystrix的超时时间需要大于Ribbon的超时时间，不然不会触发Ribbon重试。</p></li></ul><hr><h3 id="Feign中使用Hystrix说明"><a href="#Feign中使用Hystrix说明" class="headerlink" title="Feign中使用Hystrix说明"></a>Feign中使用Hystrix说明</h3><ul><li><p>使用说明</p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入feign客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上面添加注解@EnableFeignClients和@EnableCircuitBreaker。其中，feign中自带了hystrix,如果单纯的使用hystrix功能，可以不加@EnableCircuitBreaker注解，使用@EnableCircuitBreaker注解可以使用其中的hystrix-metrics-event-stream，用于dashboard。</p></li><li>调用服务的接口上添加注解@FeignClient<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>全局开启或关闭Feign对Hystrix支持</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line">    <span class="comment">#启用feign中的hystrix服务，默认是关闭的</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>坑：在spring-cloud的老版本中，默认是开启的，在新版本中，默认是关闭的，需要手动开启。</p></blockquote></li><li><p>对指定的服务方法实现Hystrix的开启或关闭</p><ol><li><p>新建Hystrix禁用配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dicheng on 17-12-22.</span></span><br><span class="line"><span class="comment"> * 在HelloService的<span class="doctag">@FeignCLient</span>注解中，通过configuration参数引入下面的配置</span></span><br><span class="line"><span class="comment"> * 这是其中一种对指定服务开启断路器的方法，另外一种是配置文件中进行指定断路器的全局开启或关闭</span></span><br><span class="line"><span class="comment"> * 默认是返回HystrixFeign.builder(),因为现在调用Feign.builder()，所以禁用了hystrix功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisableHystrixConfiguration2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要禁用的服务接口上配置Hystrix禁用类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-service"</span>, configuration = DisableHystrixConfiguration2.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>全局配置超时时间<br>参考Hystrix全局超时时间设置</p></li><li><p>对指定的服务方法实现超时时间设置<br>hystrix.command.serviceId.execution.isolation.thread.timeoutInMilliseconds</p></li><li><p>服务降级的实现方式(fallback 或 fallbackFactory)以及注意事项</p><ol><li><p>fallback实现服务降级</p><ul><li><p>指定服务降级处理类,通过fallback属性进行配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-service"</span>, configuration = DisableHystrixConfiguration2.class, fallback = HelloServiceFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">   <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务降级处理类需要实现调用断路器的接口,同时使用@Component注解标明这个组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceFallback</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>fallbackFactory实现服务降级</p><ul><li><p>指定服务降级处理类,通过fallbackFactory属性进行配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"hello-service"</span>, configuration = DisableHystrixConfiguration2.class, fallbackFactory = HelloServiceFallbackFactory.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">   <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个接口，继承调用断路器的接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloServiceWithFactory</span> <span class="keyword">extends</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个实现类实现FallbackFactory接口，并指定类型为调用断路器的接口类型，实现fallbackFactory接口中的create方法，分析断路原因与断路逻辑处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">HelloService</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(HelloServiceFallbackFactory.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> HelloService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//断路原因</span></span><br><span class="line">       logger.info(<span class="string">"fallback; reason was :"</span> + throwable);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//断路处理逻辑</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> HelloServiceWithFactory() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"errorWithFactory"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>说明：feign通过配置属性fallbackFactory不仅可以进行断路的降级逻辑处理，还可以获取断路的原因，可以说是fallback的加强版。</p><blockquote><p>坑：fallback不能与fallbackFactory同时使用，因为两者都可以自定义回调函数的处理逻辑，放在一块使用会造成冲突。</p></blockquote></li></ol></li></ul><hr><h3 id="Turbine对集群服务的监控"><a href="#Turbine对集群服务的监控" class="headerlink" title="Turbine对集群服务的监控"></a>Turbine对集群服务的监控</h3><ul><li>功能描述<br>引入Turbine，通过监控端点/turbine.stream对集群服务进行监控，并汇集监控信息。</li><li><p>Turbine监控服务的搭建</p><ol><li>创建一个标准的Spring Boot工程。</li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入turbine依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加注解@EnableTurbine和@EnableDiscoveryClient，将Turbine作为一个服务注册到Eureka上，便于从Eureka上发现注册服务并获取其监控信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TurbineApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Eureka和Turbine</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eureka config</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:1111/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#turbine config</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line"><span class="attr">  combine-host-port:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  aggregator:</span></span><br><span class="line"><span class="attr">    cluster-config:</span> <span class="string">HELLO-SERVICE</span></span><br><span class="line"><span class="attr">  app-config:</span> <span class="string">hello-service</span></span><br><span class="line">  <span class="comment">#cluster-name-expression: "'default'"</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Turbine配置详解</p><ol><li><code>combine-host-port</code>: 可以让同一主机上的服务通过主机名和端口号的组合来进行区分。</li><li><code>cluster-config</code>: <ul><li>指定监控了哪些集群，多个使用”,”分割，默认为default。可使用<a href="http://.../turbine.stream?cluster={clusterconfig之一}" target="_blank" rel="noopener">http://.../turbine.stream?cluster={clusterconfig之一}</a> 访问。</li><li>配置spring.application.name大写</li><li>配置单个服务集群时，可以使用cluster-config进行配置，使用第一步中的地址进行访问监控，当监控多个服务集群时，可以使用cluster-name-expression进行配置，省略cluster-config配置，访问<a href="http://.../turbine.stream" target="_blank" rel="noopener">http://.../turbine.stream</a> 即可进行监控。</li></ul></li><li><code>app-config</code>: 配置需要聚合的应用(spring.application.name小写)</li><li><code>cluster-name-expression</code>: 指定了集群名称，当服务非常多的时候，启动多个Turbine服务来构建不同的聚合集群，而该参数可以用来区分这些不同的聚合集群。当cluster-name-expression为default时，cluster-config可以不写，因为默认就是default，访问<a href="http://.../turbine.stream" target="_blank" rel="noopener">http://.../turbine.stream</a> 即可进行监控。</li></ol></li></ul><hr><h3 id="Hystrix-Dashboard使用说明"><a href="#Hystrix-Dashboard使用说明" class="headerlink" title="Hystrix Dashboard使用说明"></a>Hystrix Dashboard使用说明</h3><ul><li><p>功能描述<br>通过HystrixCommand实例在执行过程中记录的信息，会在内存中驻留一段时间，以供内部或外部进行查询使用，Hystrix Dashboard就是这些指标内容的消费者之一。通过Hystrix Dashboard可以实时监控Hystrix的各项指标信息，根据这些反馈的实时信息，可以帮助我们快速发现系统中存在的问题，从而及时地采取应对措施。</p></li><li><p>Hystrix Dashboard仪表盘服务的搭建</p><ol><li>创建一个标准的Spring Boot工程。</li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入hystrix dashboard依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加注解@EnableHystrixDashboard</p></li></ol></li><li><p>使用说明</p><ol><li>监控首页</li></ol><ul><li>Hystrix Dashboard 共支持三种不同的监控方式：<br>i. 默认的集群监控：通过URL <a href="http://turbine-host:port/turbine.stream" target="_blank" rel="noopener">http://turbine-host:port/turbine.stream</a> 开启，实现对默认集群的监控。<br>ii. 指定的集群监控：通过URL <a href="http://turbine-host:port/turbine.stream.stream?cluster=[clusterName]开启，实现对clusterName集群的监控。" target="_blank" rel="noopener">http://turbine-host:port/turbine.stream.stream?cluster=[clusterName]开启，实现对clusterName集群的监控。</a><br>iii. 单体应用的监控：通过URL <a href="http://hystrix-app:port/hystrix.stream" target="_blank" rel="noopener">http://hystrix-app:port/hystrix.stream</a> 开启，实现对具体某个服务实例的监控。 </li><li>Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000ms，可以通过配置该属性来降低客户端的网络和CPU消耗。</li><li>Title：该参数对应了监控图头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，可以通过配置该信息来展示更合适的标题。</li></ul><ol><li>监控页面</li></ol><ul><li>一个实心圆和一条曲线</li><li>断路指标信息</li><li>线程池指标信息</li></ul></li><li><p>监控指标说明</p><ol><li>实心圆<br>通过颜色的变化代表了实例的健康程度，它的健康度从绿色、黄色、橙色、红色递减。它的大小会根据实例的请求流量发生变化，流量越大该实心圆就越大。通过该实心圆，可以在大量的实例中快速发现故障实例和高压力实例。</li><li>曲线<br>用来记录2分钟内流量的相对变化，可以通过它来观察流量的上升和下降趋势。</li><li>指标信息详解</li></ol><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/spring%20cloud/Hystrix%20Dashboard%E6%8C%87%E6%A0%87%E5%8F%82%E6%95%B0.png?raw=true" alt=""></p><blockquote><p><strong>注意</strong>：当使用Hystrix Board来监控Spring Cloud Zuul构建的API网关时，Thread Pool信息会一直处于Loading状态。这是由于Zuul默认会使用信号量来实现隔离，只有通过Hystrix配置把隔离机制改为线程池的方式才能够得以展示。</p></blockquote></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  服务发送方与服务消费方分别将自己的多实例注册到Eureka Server上，服务消费方通过Eureka Server发现服务列表并进行相应的服务调用。在服务的相互调用过程中，可能会发生调用服务失败或服务异常等情况发生，通过使用Hystrix监控服务调用过程中可能出现的问题并进行相应的断路保护，比如服务降级，以免造成雪崩现象的发生，避免系统的全面崩溃。通过Turbine构建相应的微服务，并作为一个服务注册到Eureka Server上，配置监控的集群服务名称，从Eureka Server服务列表上获取到监控的服务并对其监控信息进行收集。而通过Turbine收集的监控信息不具备易读性，所以通过Hystrix Dashboard将其监控的信息进行页面展示，实时的监控服务的断路状态相关信息，从而帮助我们快速发现系统中存在的问题，及时采取应对措施。</p><p>  系统架构图如下所示：</p><p>  <img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/spring%20cloud/turbine%E8%81%9A%E5%90%88%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt=""></p><p><br></p><h3 id="nbsp-nbsp-nbsp-版权声明：本文为博主原创文章，转载请标明作者和原链接"><a href="#nbsp-nbsp-nbsp-版权声明：本文为博主原创文章，转载请标明作者和原链接" class="headerlink" title="| &nbsp;&nbsp;&nbsp;版权声明：本文为博主原创文章，转载请标明作者和原链接"></a><font color="red"><b>| &nbsp;&nbsp;&nbsp;版权声明：本文为博主原创文章，转载请标明作者和原链接<br></b></font></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hystrix使用说明&quot;&gt;&lt;a href=&quot;#Hystrix使用说明&quot; class=&quot;headerlink&quot; title=&quot;Hystrix使用说明&quot;&gt;&lt;/a&gt;Hystrix使用说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用场景&lt;br&gt;在微服务架构中，存在着那么多的服务单元，如一个单元出现故障，就很容易因y依赖关系而引发故障的蔓延，最终导致整个系统的瘫痪，为了解决这样的问题，引入断路器等一系列的服务保护机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;功能描述&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务降级&lt;/li&gt;
&lt;li&gt;服务熔断&lt;/li&gt;
&lt;li&gt;线程和信号隔离&lt;/li&gt;
&lt;li&gt;请求缓存&lt;/li&gt;
&lt;li&gt;请求合并&lt;/li&gt;
&lt;li&gt;服务监控&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hystrix工作流程图和详细流程说明&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://yoursite.com/categories/Spring-Cloud/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="spring cloud" scheme="http://yoursite.com/tags/spring-cloud/"/>
    
      <category term="hystrix" scheme="http://yoursite.com/tags/hystrix/"/>
    
      <category term="turbine" scheme="http://yoursite.com/tags/turbine/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的next主题个性化教程:打造炫酷网站</title>
    <link href="http://yoursite.com/2018/01/28/Hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%99%E7%A8%8B-%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2018/01/28/Hexo的next主题个性化教程-打造炫酷网站/</id>
    <published>2018-01-28T04:40:08.000Z</published>
    <updated>2018-01-28T04:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果。</p><h3 id="功能介绍-主要有以下33种"><a href="#功能介绍-主要有以下33种" class="headerlink" title="功能介绍(主要有以下33种)"></a>功能介绍(主要有以下33种)</h3><ul><li>在右上角或者左上角实现fork me on github</li><li>添加RSS</li><li>添加动态背景</li><li>实现点击出现桃心效果</li><li>修改文章内链接文本样式</li><li>修改文章底部的那个带#号的标签</li><li>在每篇文章末尾统一添加“本文结束”标记</li><li>修改作者头像并旋转</li><li>博文压缩</li><li>修改``代码块自定义样式</li><li>侧边栏社交小图标设置</li><li>主页文章添加阴影效果</li><li>在网站底部加上访问量</li><li>添加热度</li><li>网站底部字数统计</li><li>添加 README.md 文件</li><li>设置网站的图标Favicon</li><li>实现统计功能</li><li>添加顶部加载条</li><li>在文章底部增加版权信息</li><li>添加网易云跟帖(跟帖关闭，已失效，改为来必力)</li><li>隐藏网页底部powered By Hexo / 强力驱动</li><li>修改网页底部的桃心</li><li>文章加密访问</li><li>添加jiathis分享</li><li>博文置顶</li><li>修改字体大小</li><li>修改打赏字体不闪动</li><li>侧边栏推荐阅读</li><li>自定义鼠标样式</li><li>为博客加上萌萌的宠物</li><li>DaoVoice 在线联系</li><li>点击爆炸效果</li></ul><hr><a id="more"></a><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ul><li><p><strong>1.在右上角或者左上角实现fork me on github</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE1.png?raw=true" alt=""></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE2.png?raw=true" alt=""></p><p>具体实现方法</p><p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>或者<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE3.png?raw=true" alt=""></p><p>然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE4.png?raw=true" alt=""></p></li></ul><hr><ul><li><p><strong>2.添加RSS</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE5.png?raw=true" alt=""></p><p>具体实现方法</p><p>切换到你的blog（我是取名blog，具体的看你们的取名是什么）的路径，例如我是在<code>/Users/chenzekun/Code/Hexo/blog</code>这个路径上，也就是在你的根目录下</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE6.png?raw=true" alt=""></p><p>然后安装 Hexo 插件：(这个插件会放在<code>node_modules</code>这个文件夹里)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>接下来打开画红线的文件，如下图：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE7.png?raw=true" alt=""></p><p>在里面的末尾添加：(请注意在冒号后面要加一个空格，不然会发生错误！)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>然后打开next主题文件夹里面的<code>_config.yml</code>,在里面配置为如下样子：(就是在<code>rss:</code>的后面加上<code>/atom.xml</code>,注意在冒号后面要加一个空格)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>配置完之后运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>重新生成一次，你会在<code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p></li></ul><hr><ul><li><p><strong>3.添加动态背景</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE8.gif?raw=true" alt=""></p><p>具体实现方法</p><blockquote><p><strong>注意：</strong>如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）</p></blockquote><p><strong>修改</strong><code>_layout.swig</code></p><p>打开 <code>next/layout/_layout.swig</code></p><p>在 <code>&lt;/body&gt;</code>之前添加代码(注意不要放在&lt; /head&gt;的后面)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p>打开 <code>/next/_config.yml</code>,在里面添加如下代码：(可以放在最后面)</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>到此就结束了，运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了\（￣︶￣）/</p><p><strong>如果你感觉默认的线条太多的话</strong></p><p><strong>可以这么设置====&gt;</strong></p><p>在上一步修改 _layout.swig中，把刚才的这些代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"0,0,255"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"99"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>配置项说明</strong></p><ul><li><code>color</code>: 线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>: 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>: 线条的总数量, 默认: <code>150</code></li><li><code>zIndex</code>: 背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li></ul></li></ul><hr><ul><li><p><strong>4.实现点击出现桃心效果</strong><br>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE9.gif?raw=true" alt=""></p><p>具体实现方法</p><p>在网址输入如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</span><br></pre></td></tr></table></figure><p>然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>5.修改文章内链接文本样式</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE10.gif?raw=true" alt=""></p><p>具体实现方法</p><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择<code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p></li></ul><hr><ul><li><p><strong>6.修改文章底部的那个带#号的标签</strong><br>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE11.png?raw=true" alt=""></p><p>具体实现方法</p><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code># 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p></li></ul><hr><ul><li><p><strong>7.在每篇文章末尾统一添加“本文结束”标记</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE12.png?raw=true" alt=""></p><p>具体实现方法</p><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下画红色部分代码（post-footer之前两个DIV）：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE13.png?raw=true" alt=""></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p></li></ul><hr><ul><li><p><strong>8.修改作者头像并旋转</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE14.gif?raw=true" alt=""></p><p>具体实现方法</p><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>9.博文压缩</strong></p><p>在站点的根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>在如下图所示，新建<code>gulpfile.js</code>，并填入以下内容：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE15.png?raw=true" alt=""></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p></li></ul><hr><ul><li><p><strong>10.修改``代码块自定义样式</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE16.png?raw=true" alt=""></p><p>具体实现方法</p><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>11.侧边栏社交小图标设置</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE17.png?raw=true" alt=""></p><p>具体实现方法</p><p>打开主题配置文件（<code>_config.yml</code>），搜索<code>social_icons:</code>,在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE18.png?raw=true" alt=""></p><hr></li><li><p><strong>12.主页文章添加阴影效果</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE19.png?raw=true" alt=""></p><p>具体实现方法</p><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line"><span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>13.在网站底部加上访问量</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE20.png?raw=true" alt=""></p><p>具体实现方法</p><p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前加上画红线这句话：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE21.png?raw=true" alt=""></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后再合适的位置添加显示统计的代码，如图：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE22.png?raw=true" alt=""></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里有两中不同计算方式的统计代码：</p><ol><li><p>pv的方式，单个用户连续点击n篇文章，记录n次访问量</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">  本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>添加之后再执行<code>hexo d -g</code>，然后再刷新页面就能看到效果</p><hr></li><li><p><strong>14.添加热度</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE23.png?raw=true" alt=""></p><p>具体实现方法</p><p>next主题集成leanCloud，打开<code>/themes/next/layout/_macro/post.swig</code>,在画红线的区域添加<code>℃</code>：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE24.png?raw=true" alt=""></p><p>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>,将画红框的改为热度就可以了</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE25.png?raw=true" alt=""></p><hr></li><li><p><strong>15.网站底部字数统计</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE26.png?raw=true" alt=""></p><p>具体方法实现</p><p>切换到根目录下，然后运行如下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr></li><li><p><strong>16.添加 README.md 文件</strong></p><p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 hexo 部署到仓库后，项目下是没有 <code>README.md</code> 文件的。</p><p>在 Hexo 目录下的 <code>source</code> 根目录下添加一个 <code>README.md</code> 文件，修改站点配置文件 <code>_config.yml</code>，将 <code>skip_render</code> 参数的值设置为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><hr></li><li><p><strong>17.设置网站的图标Favicon</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE27.png?raw=true" alt=""></p><p>具体方法实现</p><p>在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张（32*32）的<code>ico</code>图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Put your favicon.ico into `hexo-site/source/` directory.</span></span><br><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>18.实现统计功能</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE28.png?raw=true" alt=""></p><p>具体方法实现</p><p>在根目录下安装 <code>hexo-wordcount</code>,运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在主题的配置文件中，配置如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Post</span> <span class="selector-tag">wordcount</span> <span class="selector-tag">display</span> <span class="selector-tag">settings</span></span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line"><span class="selector-tag">post_wordcount</span>:</span><br><span class="line">  <span class="selector-tag">item_text</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">wordcount</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">min2read</span>: <span class="selector-tag">true</span></span><br></pre></td></tr></table></figure><hr></li><li><p><strong>19.添加顶部加载条</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE29.gif?raw=true" alt=""></p><p>具体实现方法</p><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，添加红框上的代码</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE30.png?raw=true" alt=""></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.bootcss.com/pace/1.0.2/pace.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;link href=<span class="string">"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br></pre></td></tr></table></figure><p>但是，默认的是粉色的，要改变颜色可以在<code>/themes/next/layout/_partials/head.swig</code>文件中添加如下代码（接在刚才link的后面）</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#1E92FB</span>; <span class="comment">/*进度条颜色*/</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.pace</span> <span class="selector-class">.pace-progress-inner</span> &#123;</span><br><span class="line">       <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#1E92FB</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>     <span class="number">#1E92FB</span>; <span class="comment">/*阴影颜色*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.pace</span> <span class="selector-class">.pace-activity</span> &#123;</span><br><span class="line">      <span class="attribute">border-top-color</span>: <span class="number">#1E92FB</span>;    <span class="comment">/*上边框颜色*/</span></span><br><span class="line">      <span class="attribute">border-left-color</span>: <span class="number">#1E92FB</span>;    <span class="comment">/*左边框颜色*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>目前，博主的增加顶部加载条的pull request 已被Merge。现在升级最新版的next主题，升级后只需修改主题配置文件(_config.yml)将pace: false改为pace: true就行了，你还可以换不同样式的加载条，如下图：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE31.png?raw=true" alt=""></p><hr></li><li><p><strong>20.在文章底部增加版权信息</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE32.png?raw=true" alt=""></p><p>在目录 <code>next/layout/_macro/</code>下添加 <code>my-copyright.swig</code>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:MM") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.fa-clipboard'</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        swal(&#123;   </span></span><br><span class="line"><span class="javascript">          title: <span class="string">""</span>,   </span></span><br><span class="line"><span class="javascript">          text: <span class="string">'复制成功'</span>,</span></span><br><span class="line"><span class="javascript">          icon: <span class="string">"success"</span>, </span></span><br><span class="line"><span class="javascript">          showConfirmButton: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">45em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2.8em</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1.0em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a3d2a3</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>next/layout/_macro/post.swig</code>，在代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">  &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前添加增加如下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">  &#123;% include 'my-copyright.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE33.png?raw=true" alt=""></p><p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"my-post-copyright"</span></span><br></pre></td></tr></table></figure><p>保存重新生成即可。</p><p>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><p>小技巧：如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE34.png?raw=true" alt=""></p><p>这样每次<code>hexo new &quot;你的内容&quot;</code>之后，生成的md文件会自动把<code>copyright:</code>加到里面去(注意：如果解析出来之后，你的原始链接有问题：如：<code>http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html</code>,那么在根目录下<code>_config.yml</code>中写成类似这样：）</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE35.png?raw=true" alt=""></p><p>就行了。</p><hr></li><li><p><strong>21.添加网易云跟帖(跟帖关闭，已失效，改为来必力)</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE36.png?raw=true" alt=""></p><p>具体方法实现</p><p>有两种实现方法：</p><p>①更新next主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件_config.yml 文件中添加如下配置:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gentie_productKey: <span class="comment">#your-gentie-product-key</span></span><br></pre></td></tr></table></figure><p>②如果你不想更新的话，那么按下面步骤进行：</p><p>首先，还是在主题配置文件_config.yml 文件中添加如下配置:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gentie_productKey: <span class="comment">#your-gentie-product-key</span></span><br></pre></td></tr></table></figure><p>你的<code>productKey</code>就是下面画红线部分</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE37.png?raw=true" alt=""></p><p>然后在在<code>layout/_scripts/third-party/comments/</code> 目录中添加 <code>gentie.swig</code>，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.gentie_productKey %&#125;</span><br><span class="line">    &#123;% set gentie_productKey = theme.gentie_productKey %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> cloudTieConfig = &#123;</span><br><span class="line">        url: <span class="built_in">document</span>.location.href, </span><br><span class="line">        sourceId: <span class="string">""</span>,</span><br><span class="line">        productKey: <span class="string">"&#123;&#123;gentie_productKey&#125;&#125;"</span>,</span><br><span class="line">        target: <span class="string">"cloud-tie-wrapper"</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/img1.ws.126.net/</span>f2e/tie/yun/sdk/loader.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>然后在<code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">'./comments/gentie.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加网易云跟帖插件引用的判断逻辑：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gentie_productKey %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cloud-tie-wrapper"</span> <span class="attr">class</span>=<span class="string">"cloud-tie-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体位置如下：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE38.png?raw=true" alt=""></p><p>可能你<code>hexo s</code>时可能看不到，直接hexo d就可以看到了</p><blockquote><p>近日，我朋友发来消息，说网易云跟帖要关了，我网上查了一下，果然如此</p></blockquote><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE39.jpg?raw=true" alt=""></p><blockquote><p>都是泪,上次用了多说，结果多说关了，接着是网易云跟帖，这次直接用国外的来必力，应该不会这么容易关吧</p></blockquote><p>方法其实还是跟上面差不多的</p><p>首先在 <code>_config.yml</code> 文件中添加如下配置：(<strong>注意！如果主题是最新版的，直接写你的liver_uid就行了</strong>)</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">your</span> <span class="string">uid</span></span><br></pre></td></tr></table></figure><p>其中，<code>livere_uid</code>就是画红线的部分</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE40.jpg?raw=true" alt=""></p><p>然后在 <code>layout/_scripts/third-party/comments/</code> 目录中添加 livere.swig，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> theme.livere_uid %&#125;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">        j.async = <span class="literal">true</span>;</span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">      &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">'./comments/livere.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.livere_uid %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"&#123;&#123; theme.livere_uid &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>22.隐藏网页底部powered By Hexo / 强力驱动</strong></p><p>打开<code>themes/next/layout/_partials/footer.swig</code>,使用””隐藏之间的代码即可，或者直接删除。位置如图：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE41.png?raw=true" alt=""></p><hr></li><li><p><strong>23.修改网页底部的桃心</strong></p><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE42.png?raw=true" alt=""></p><p>然后还是在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p><hr></li><li><p><strong>24.文章加密访问</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE43.gif?raw=true" alt=""></p><p>具体实现方法</p><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE44.png?raw=true" alt=""></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文章上写成类似这样：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE45.png?raw=true" alt=""></p><hr></li><li><p><strong>25.添加jiathis分享</strong></p><p>在主题配置文件中，jiathis为true，就行了，如下图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE46.png?raw=true" alt=""></p><p>默认是这样子的：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE47.png?raw=true" alt=""></p><p>如果你想自定义话，打开<code>themes/next/layout/_partials/share/jiathis.swig</code>修改画红线部分就可以了</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE48.png?raw=true" alt=""></p><hr></li><li><p><strong>26.博文置顶</strong></p><p>修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章中添加 <code>top</code> 值，数值越大文章越靠前，如</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 解决Charles乱码问题</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: <span class="literal">true</span></span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>27.修改字体大小</strong></p><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$font</span>-size-base=16px</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>28.修改打赏字体不闪动</strong></p><p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover和alipay:hover</code>，如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释文字闪动函数</span></span><br><span class="line"><span class="comment"> #wechat:hover p&#123;</span></span><br><span class="line"><span class="comment">    animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> #alipay:hover p&#123;</span></span><br><span class="line"><span class="comment">   animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr></li><li><p><strong>29.侧边栏推荐阅读</strong></p><p>今天有位网友问推荐阅读是怎么弄，其实挺简单的，打开主题配置文件修改成这样就行了(links里面写你想要的链接):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blogrolls</span></span><br><span class="line">links_title: 推荐阅读</span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  优设: http://www.uisdc.com/</span><br><span class="line">  张鑫旭: http://www.zhangxinxu.com/</span><br><span class="line">  Web前端导航: http://www.alloyteam.com/nav/</span><br><span class="line">  前端书籍资料: http://www.36zhen.com/t?id=3448</span><br><span class="line">  百度前端技术学院: http://ife.baidu.com/</span><br><span class="line">  google前端开发基础: http://wf.uisdc.com/cn/</span><br></pre></td></tr></table></figure><hr></li><li><p><strong>30.自定义鼠标样式</strong></p><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword2.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword1.ico"</span>),auto<span class="meta">!important</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p><hr></li><li><p><strong>31.为博客加上萌萌的宠物</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE49.jpg?raw=true" alt=""></p><p>具体实现方法</p><p>在终端切换到你的博客的路径里，然后输入如下代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后打开<code>Hexo/blog/themes/next/layout</code>的<code>_layout.swig</code>,将下面代码放到<code>&lt;/body&gt;</code>之前：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123; live2d() &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后在在 <code>hexo</code> 的 <code>_config.yml</code> 中添加参数：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  model:</span> <span class="string">wanko</span></span><br><span class="line"><span class="attr">  bottom:</span> <span class="bullet">-30</span></span><br></pre></td></tr></table></figure><p>然后hexo clean ，hexo g ，hexo d 就可以看到了。</p><p>下面是一些model，可以换不同的宠物</p><ul><li>model 模型名称 默认值: z16<ul><li>Gantzert_Felixander<ul><li>Epsilon2.1</li><li>haru</li><li>miku</li><li>ni-j</li><li>nico</li><li>nito</li><li>nipsilon</li><li>nietzsche</li><li>shizuku</li><li>tsumiki</li><li>wanko</li><li>z16</li><li>hibiki</li><li>koharu</li><li>haruto</li><li>Unitychan</li><li>tororo</li><li>hijiki</li></ul></li></ul></li><li>width 宽度 默认值: 150<ul><li>height 高度 默认值： 300</li><li>className <code>&lt;canvas&gt;</code>元素的类名 默认值： live2d</li><li>id <code>&lt;canvas&gt;</code> 元素的id 默认值： live2dcanvas</li><li>bottom <code>&lt;canvas&gt;</code> 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数</li></ul></li></ul><p>用这个有缺点，如果是在手机上看的话，感觉不是很好，宠物一直挡着文字，还有就是加载有点慢</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE50.jpg?raw=true" alt=""></p><p>目前手机上显示宠物的问题已经解决，如果不想在手机上显示宠物的话，修改主题配置文件，改为如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  model:</span> <span class="string">wanko</span></span><br><span class="line"><span class="attr">  bottom:</span> <span class="bullet">-30</span></span><br><span class="line"><span class="attr">  mobileShow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意！如果你在 hexo d 的时候出现我下面这个问题</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE51.jpg?raw=true" alt=""></p><p>你可以这样，首先删除hexo 下面的.deploy_git文件夹，然后运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>重新 hexo clean,hexo g,hexo d就行了</p><hr></li><li><p><strong>32.DaoVoice 在线联系</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE52.png?raw=true" alt=""></p><p>具体实现方法</p><p>首先在 <a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">daovoice</a> 注册账号,邀请码是<code>0f81ff2f</code>，注册完成后会得到一个 app_id :</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE53.png?raw=true" alt=""></p><p>记下这个 app_id的值，然后打开<code>/themes/next/layout/_partials/head.swig</code>,写下如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE54.png?raw=true" alt=""></p><p>接着打开主题配置文件，在最后写下如下代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure><p>重新 hexo g ，hexo s 就能看到效果了。</p><p>安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE55.png?raw=true" alt=""></p><hr></li><li><p><strong>33.点击爆炸效果</strong></p><p>实现效果图</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/hexo/hexo%20next%20%E9%85%8D%E7%BD%AE56.png?raw=true" alt=""></p><p>实现方法</p><p>跟那个红心是差不多的，首先在<code>themes/next/source/js/src</code>里面建一个叫fireworks.js的文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span> </span><br><span class="line">   &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">   &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/fireworks.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件，在里面最后写下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>参考博客原文地址：<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果。&lt;/p&gt;
&lt;h3 id=&quot;功能介绍-主要有以下33种&quot;&gt;&lt;a href=&quot;#功能介绍-主要有以下33种&quot; class=&quot;headerlink&quot; title=&quot;功能介绍(主要有以下33种)&quot;&gt;&lt;/a&gt;功能介绍(主要有以下33种)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在右上角或者左上角实现fork me on github&lt;/li&gt;
&lt;li&gt;添加RSS&lt;/li&gt;
&lt;li&gt;添加动态背景&lt;/li&gt;
&lt;li&gt;实现点击出现桃心效果&lt;/li&gt;
&lt;li&gt;修改文章内链接文本样式&lt;/li&gt;
&lt;li&gt;修改文章底部的那个带#号的标签&lt;/li&gt;
&lt;li&gt;在每篇文章末尾统一添加“本文结束”标记&lt;/li&gt;
&lt;li&gt;修改作者头像并旋转&lt;/li&gt;
&lt;li&gt;博文压缩&lt;/li&gt;
&lt;li&gt;修改``代码块自定义样式&lt;/li&gt;
&lt;li&gt;侧边栏社交小图标设置&lt;/li&gt;
&lt;li&gt;主页文章添加阴影效果&lt;/li&gt;
&lt;li&gt;在网站底部加上访问量&lt;/li&gt;
&lt;li&gt;添加热度&lt;/li&gt;
&lt;li&gt;网站底部字数统计&lt;/li&gt;
&lt;li&gt;添加 README.md 文件&lt;/li&gt;
&lt;li&gt;设置网站的图标Favicon&lt;/li&gt;
&lt;li&gt;实现统计功能&lt;/li&gt;
&lt;li&gt;添加顶部加载条&lt;/li&gt;
&lt;li&gt;在文章底部增加版权信息&lt;/li&gt;
&lt;li&gt;添加网易云跟帖(跟帖关闭，已失效，改为来必力)&lt;/li&gt;
&lt;li&gt;隐藏网页底部powered By Hexo / 强力驱动&lt;/li&gt;
&lt;li&gt;修改网页底部的桃心&lt;/li&gt;
&lt;li&gt;文章加密访问&lt;/li&gt;
&lt;li&gt;添加jiathis分享&lt;/li&gt;
&lt;li&gt;博文置顶&lt;/li&gt;
&lt;li&gt;修改字体大小&lt;/li&gt;
&lt;li&gt;修改打赏字体不闪动&lt;/li&gt;
&lt;li&gt;侧边栏推荐阅读&lt;/li&gt;
&lt;li&gt;自定义鼠标样式&lt;/li&gt;
&lt;li&gt;为博客加上萌萌的宠物&lt;/li&gt;
&lt;li&gt;DaoVoice 在线联系&lt;/li&gt;
&lt;li&gt;点击爆炸效果&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Elastic-Job-Lite源码分析---作业配置</title>
    <link href="http://yoursite.com/2018/01/27/Elastic-Job-Lite%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BD%9C%E4%B8%9A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/27/Elastic-Job-Lite源码分析-作业配置/</id>
    <published>2018-01-27T14:27:49.000Z</published>
    <updated>2018-01-27T14:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>涉及到主要类的类图如下：</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE6.jpg?raw=true" alt=""></p><h3 id="作业配置"><a href="#作业配置" class="headerlink" title="作业配置"></a>作业配置</h3><p>一个作业(ElasticJob)的调度，需要配置独有的一个作业调度器(JobScheduler),两者是1:1的关系，这点大家要注意下，当然下文看代码也会看到。</p><p>作业调度器的创建可以配置四个参数：</p><a id="more"></a><ol><li>注册中心(CoordinatorRegistryCenter): 用于协调分布式服务，必填</li><li>Lite作业配置(LiteJobConfiguration): 必填</li><li>作业事件总线(JobEventBus): 对作业事件异步监听。选填</li><li>作业监听器(ElasticJobListener): 对作业执行前，执行后进行同步监听。选填</li></ol><p><strong>2.1、 注册中心配置</strong><br>Elastic-Job抽象了注册中心接口(RegistryCenter),并提供了基于Zookeeper的注册中心实现(ZookeeperRegistryCenter)。</p><p>ZookeeperRegistryCenter对应配置类为ZookeeperConfiguration，该类注释很完整，这里我们重点说下<code>namespace</code>属性。如果你有多个不同Elastic-Job集群时，使用相同Zookeeper，可以配置不同的<code>namespace</code>进行隔离。</p><p><strong>2.2、 Lite作业配置</strong><br><code>LiteJobConfiguration</code>继承自接口<code>JobRootConfiguration</code>，作为<code>Elastic-Job-Lite</code>里的作业(LiteJob)配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LiteJobConfiguration</span> <span class="keyword">implements</span> <span class="title">JobRootConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JobTypeConfiguration typeConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> monitorExecution;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxTimeDiffSeconds;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> monitorPort;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jobShardingStrategyClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> reconcileIntervalMinutes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> disabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> overwrite;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 省略部分get方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... 省略部分属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> LiteJobConfiguration <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LiteJobConfiguration(jobConfig, monitorExecution, maxTimeDiffSeconds, monitorPort, jobShardingStrategyClass, reconcileIntervalMinutes, disabled, overwrite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>typeConfig</code>:作业类型配置，必填</li><li><code>monitorExecution</code>: 监控作业运行时状态，默认为<code>false</code>，选填。</li></ul><blockquote><p>每次作业执行时间和间隔时间均非常短的情况, 建议不监控作业运行时状态以提升效率, 因为是瞬时状态, 所以无必要监控. 请用户自行增加数据堆积监控. 并且不能保证数据重复选取, 应在作业中实现幂等性. 也无法实现作业失效转移.</p><p>每次作业执行时间和间隔时间均较长短的情况, 建议监控作业运行时状态, 可保证数据不会重复选取.每次作业执行时间和间隔均较长的情况，建议监控作业运行时状态，可保证数据不会重复选取。</p></blockquote><ul><li><code>maxTimeDiffSeconds</code>: 设置最大容忍的本机与注册中心的时间误差秒数。默认为-1，不检查时间误差。选填</li><li><code>monitorPort</code>: 作业监控端口，默认为-1，不开启作业监控端口。选填</li><li><code>jobShardingStrategyClass</code>：作业分片策略实现类全路径，默认为使用分配侧路。</li><li><code>reconcileIntervalMinutes</code>：修复作业服务器不一致状态服务调度间隔时间，配置为小于1的任意值，默认为10.</li><li><code>disabled</code>: 作业是否禁用执行。默认为false，选填。</li><li><code>overwrite</code>: 设置使用本地配置覆盖注册中心的作业配置。默认为false，选填。建议使用运维台console配置作业配置，统一管理。</li><li>Builder类：使用该类配置LiteJobConfiguration属性，调用<code>build()</code>方法最终生成作业配置。</li></ul><p><strong>2.2.1、 作业类型配置</strong><br>作业类型配置接口(JobTypeConfiguration)有三种配置实现，针对三种作业类型：</p><table><thead><tr><th style="text-align:left">配置实现</th><th style="text-align:left">作业</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SimpleJobConfiguration</td><td style="text-align:left">SimpleJob</td><td style="text-align:left">简单作业。例如：订单过期作业</td></tr><tr><td style="text-align:left">DataflowJobConfiguration</td><td style="text-align:left">DataflowJob</td><td style="text-align:left">数据流作业。TODO:暂未了解流式处理数据</td></tr><tr><td style="text-align:left">ScriptJobConfiguration</td><td style="text-align:left">ScriptJob</td><td style="text-align:left">脚本作业。例如：调用shell脚本备份数据库作业</td></tr></tbody></table><p>三种配置类属性对比如：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">SimpleJob</th><th style="text-align:center">DataflowJob</th><th style="text-align:center">ScriptJob</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">coreConfig</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">作业核心配置</td></tr><tr><td style="text-align:center">jobType</td><td style="text-align:center">JobType.SIMPLE</td><td style="text-align:center">JobType.DATAFLOW</td><td style="text-align:center">JobType.SCRIPT</td><td style="text-align:center">作业类型</td></tr><tr><td style="text-align:center">jobClass</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️(默认：ScriptJob.class)</td><td style="text-align:center">作业实现类全路径</td></tr><tr><td style="text-align:center">streamingProcess</td><td style="text-align:center"></td><td style="text-align:center">✔️</td><td style="text-align:center"></td><td style="text-align:center">是否流式处理数据</td></tr><tr><td style="text-align:center">scriptCommandLine</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✔️</td><td style="text-align:center">脚本型作业执行命令行</td></tr></tbody></table><p><strong>2.2.2、 作业核心配置</strong><br>作业核心配置(JobCoreConfiguration),我们可以看到在每种作业类型配置都有该属性(<code>coreConfig</code>)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JobCoreConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jobName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String cron;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String shardingItemParameters;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jobParameter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> failover;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> misfire;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JobProperties jobProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 省略Getter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 省略部分属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> JobCoreConfiguration <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Preconditions.checkArgument(!Strings.isNullOrEmpty(jobName), <span class="string">"jobName can not be empty."</span>);</span><br><span class="line">            Preconditions.checkArgument(!Strings.isNullOrEmpty(cron), <span class="string">"cron can not be empty."</span>);</span><br><span class="line">            Preconditions.checkArgument(shardingTotalCount &gt; <span class="number">0</span>, <span class="string">"shardingTotalCount should larger than zero."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JobCoreConfiguration(jobName, cron, shardingTotalCount, shardingItemParameters, jobParameter, failover, misfire, description, jobProperties);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><code>jobName</code>: 作业名称。必填</li><li><code>cron</code>: cron表达式，用于控制作业触发时间。必填</li><li><code>shardingTotalCount</code>: 作业分片总数，如果一个作业启动超过作业分片总数的节点，只有shardingTotalCount会执行作业。必填</li><li><code>shardingItemParameters</code>: 分片序列号和参数</li></ul><blockquote><p>分片序列号和参数用等号分隔，多个键值对用逗号分隔<br>分片序列号从0开始，不可大于或等于分片总数<br>如: 0=a,1=b,2=c</p></blockquote><ul><li><code>jobParameter</code>: 作业自定义参数，选填</li></ul><blockquote><p>作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业</p><p>例: 每次获取的数据量、作业实例从数据库读取的主键</p></blockquote><ul><li><code>failover</code>: 是否开启作业执行失效转移，开启表示如果作业在一次作业执行中途宕机，允许将该次未完成的作业在另一作业节点上补偿执行。默认为false。选填</li><li><code>misfire</code>: 是否开启错误作业重新执行，默认为true.选填</li><li><code>description</code>: 作业描述，选填。</li><li><code>jobProperties</code>: 作业属性配置，选填。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProperties</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> EnumMap&lt;JobPropertiesEnum, String&gt; map = <span class="keyword">new</span> EnumMap&lt;&gt;(JobPropertiesEnum.class);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> JobPropertiesEnum &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 作业异常处理器.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JOB_EXCEPTION_HANDLER(<span class="string">"job_exception_handler"</span>, JobExceptionHandler.class, DefaultJobExceptionHandler.class.getCanonicalName()),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池服务处理器.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EXECUTOR_SERVICE_HANDLER(<span class="string">"executor_service_handler"</span>, ExecutorServiceHandler.class, DefaultExecutorServiceHandler.class.getCanonicalName());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; classType;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String defaultValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>JOB_EXCEPTION_HANDLER</code>: 用于扩展异常处理类</li><li><code>EXECUTOR_SERVICE_HANDLER</code>: 用于扩展作业处理线程池类</li><li>通过这个属性，我们可以自定义每个作业的异常处理和线程池服务</li></ul><p><strong>2.3、 作业事件配置</strong><br>通过作业事件配置（<code>JobEventConfiguration</code>）,实现对作业事件的异步监听、处理。</p><p><strong>2.4、作业监听器</strong><br>通过配置作业监听器（<code>ElasticJobListener</code>）,实现对作业执行的同步监听、处理。</p><h3 id="作业配置服务"><a href="#作业配置服务" class="headerlink" title="作业配置服务"></a>作业配置服务</h3><p>多个Elastic-Job-Lite使用相同注册中心和相同<code>namespace</code>组成集群，实现高可用。集群中，使用作业配置服务（<code>ConfigurationService</code>）共享作业配置。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeService timeService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JobNodeStorage jobNodeStorage;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigurationService</span><span class="params">(<span class="keyword">final</span> CoordinatorRegistryCenter regCenter, <span class="keyword">final</span> String jobName)</span> </span>&#123;</span><br><span class="line">        jobNodeStorage = <span class="keyword">new</span> JobNodeStorage(regCenter, jobName);</span><br><span class="line">        timeService = <span class="keyword">new</span> TimeService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>timeService</code>: 时间服务，提供当前时间查询</li><li><code>jobNodeStorage</code>: 封装注册中心，提供存储服务。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间的毫秒数.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间的毫秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCurrentMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.1、 读取作业配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取作业配置.</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fromCache 是否从缓存中读取</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 作业配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> LiteJobConfiguration <span class="title">load</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> fromCache)</span> </span>&#123;</span><br><span class="line">       String result;</span><br><span class="line">       <span class="keyword">if</span> (fromCache) &#123;</span><br><span class="line">           result = jobNodeStorage.getJobNodeData(ConfigurationNode.ROOT);</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">null</span> == result) &#123;</span><br><span class="line">               result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           result = jobNodeStorage.getJobNodeDataDirectly(ConfigurationNode.ROOT);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> LiteJobConfigurationGsonFactory.fromJson(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.2、持久化作业配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 持久化分布式作业配置信息.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> liteJobConfig 作业配置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persist</span><span class="params">(<span class="keyword">final</span> LiteJobConfiguration liteJobConfig)</span> </span>&#123;</span><br><span class="line">     checkConflictJob(liteJobConfig);</span><br><span class="line">     <span class="keyword">if</span> (!jobNodeStorage.isJobNodeExisted(ConfigurationNode.ROOT) || liteJobConfig.isOverwrite()) &#123;</span><br><span class="line">         jobNodeStorage.replaceJobNode(ConfigurationNode.ROOT, LiteJobConfigurationGsonFactory.toJson(liteJobConfig));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>调用<code>checkConflictJob(...)</code>方法校验注册中心存储的作业配置的作业实现类全路径（<code>jobClass</code>）和当前的是否相同，如果不同，则认为是冲突，不允许存储：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkConflictJob</span><span class="params">(<span class="keyword">final</span> LiteJobConfiguration liteJobConfig)</span> </span>&#123;</span><br><span class="line">        Optional&lt;LiteJobConfiguration&gt; liteJobConfigFromZk = find();</span><br><span class="line">        <span class="keyword">if</span> (liteJobConfigFromZk.isPresent() &amp;&amp; !liteJobConfigFromZk.get().getTypeConfig().getJobClass().equals(liteJobConfig.getTypeConfig().getJobClass())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JobConfigurationException(<span class="string">"Job conflict with register center. The job '%s' in register center's class is '%s', your job class is '%s'"</span>, </span><br><span class="line">                    liteJobConfig.getJobName(), liteJobConfigFromZk.get().getTypeConfig().getJobClass(), liteJobConfig.getTypeConfig().getJobClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>当注册中心未存储该作业配置或者当前作业配置允许替换注册中心配置(<code>overwrite = true</code>)时，持久化作业配置。</p></li></ul><p><strong>3.3、校验本机时间是否合法</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 检查本机与注册中心的时间误差秒数是否在允许范围.</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> JobExecutionEnvironmentException 本机与注册中心的时间误差秒数不在允许范围所抛出的异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkMaxTimeDiffSecondsTolerable</span><span class="params">()</span> <span class="keyword">throws</span> JobExecutionEnvironmentException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> maxTimeDiffSeconds =  load(<span class="keyword">true</span>).getMaxTimeDiffSeconds();</span><br><span class="line">       <span class="keyword">if</span> (-<span class="number">1</span>  == maxTimeDiffSeconds) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">long</span> timeDiff = Math.abs(timeService.getCurrentMillis() - jobNodeStorage.getRegistryCenterTime());</span><br><span class="line">       <span class="keyword">if</span> (timeDiff &gt; maxTimeDiffSeconds * <span class="number">1000L</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> JobExecutionEnvironmentException(</span><br><span class="line">                   <span class="string">"Time different between job server and register center exceed '%s' seconds, max time different is '%s' seconds."</span>, timeDiff / <span class="number">1000</span>, maxTimeDiffSeconds);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>Elastic-Job-Lite</code>作业触发时依赖本机时间，相同集群使用注册中心为基准，校验本机与注册中心的时间误差是否在允许范围内<code>LiteJobConfiguration.maxTimeDiffSeconds</code></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>作业配置结构类关系，如下展示：<br><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE7.jpg?raw=true" alt=""></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>参考博客原文地址：<a href="http://jianwl.com/2017/11/01/Elastic-Job-Lite源码分析-作业配置/" target="_blank" rel="noopener">http://jianwl.com/2017/11/01/Elastic-Job-Lite源码分析-作业配置/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;涉及到主要类的类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE6.jpg?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;作业配置&quot;&gt;&lt;a href=&quot;#作业配置&quot; class=&quot;headerlink&quot; title=&quot;作业配置&quot;&gt;&lt;/a&gt;作业配置&lt;/h3&gt;&lt;p&gt;一个作业(ElasticJob)的调度，需要配置独有的一个作业调度器(JobScheduler),两者是1:1的关系，这点大家要注意下，当然下文看代码也会看到。&lt;/p&gt;
&lt;p&gt;作业调度器的创建可以配置四个参数：&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticJob" scheme="http://yoursite.com/categories/ElasticJob/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="ElasticJob" scheme="http://yoursite.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>ElasticJob入门实战二</title>
    <link href="http://yoursite.com/2018/01/27/ElasticJob%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/01/27/ElasticJob入门实战二/</id>
    <published>2018-01-27T14:22:04.000Z</published>
    <updated>2019-07-06T08:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在上一节中，即ElasticJob入门实战一中已经介绍了使用springboot + elastic的<a href="https://github.com/dicheng52119/springboot-cloud-demo/tree/master/elastic-job" target="_blank" rel="noopener">application.properties配置方式</a>，由于使用springboot原生配置，很多job细腻化的配置无法实现。所以，本文介绍了其中关于job和注册中心的配置实用了spring的<a href="https://github.com/dicheng52119/springboot-elastic-job" target="_blank" rel="noopener">xml配置方式</a>。</p><h3 id="SpringBoot整合ElasticJob-xml配置方式"><a href="#SpringBoot整合ElasticJob-xml配置方式" class="headerlink" title="SpringBoot整合ElasticJob(xml配置方式)"></a>SpringBoot整合ElasticJob(xml配置方式)</h3><p><strong>1）依赖pom.xml</strong></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crazyit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-elastic-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-elastic-job<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>elastic-job project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">elastic.job.version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">elastic.job.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">curator.test.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">curator.test.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alibaba.druid.version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">alibaba.druid.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springboot elastic-job config begin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elastic.job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elastic.job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springboot elastic-job config end--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--内置zookeeper config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator.test.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据源 config begin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;alibaba.druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源 config end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2) 内嵌Zookeeper配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbedZookeeperServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TestingServer testingServer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            testingServer = <span class="keyword">new</span> TestingServer(port,<span class="keyword">new</span> File(String.format(<span class="string">"target/test_zk_data/%s/"</span>,System.nanoTime())));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                    testingServer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3) 基于时间驱动的任务</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSimpleJob</span> <span class="keyword">implements</span> <span class="title">SimpleJob</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FooRepository fooRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"Item: %s | Time: %s | Thread: %s | %s"</span>,</span><br><span class="line">                shardingContext.getShardingItem(), <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()), Thread.currentThread().getId(), <span class="string">"SIMPLE"</span>));</span><br><span class="line">        List&lt;Foo&gt; data = fooRepository.findTodoData(shardingContext.getShardingParameter(), <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (Foo each : data) &#123;</span><br><span class="line">            fooRepository.setCompleted(each.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模型类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String location;</span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">long</span> id, String location, Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Foo&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", location='"</span> + location + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", status="</span> + status +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status&#123;</span><br><span class="line">        TODO,</span><br><span class="line">        COMPLETED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Repository<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Foo&gt; data = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">300</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooRepository</span><span class="params">()</span></span>&#123;init();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        addData(<span class="number">0L</span>, <span class="number">100L</span>, <span class="string">"Beijing"</span>);</span><br><span class="line">        addData(<span class="number">100L</span>, <span class="number">200L</span>, <span class="string">"Shanghai"</span>);</span><br><span class="line">        addData(<span class="number">200L</span>, <span class="number">300L</span>, <span class="string">"Guangzhou"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">final</span> Long idFrom,<span class="keyword">final</span> Long idTo,<span class="keyword">final</span> String location)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=idFrom; i &lt; idTo; i++) &#123;</span><br><span class="line">            data.put(i,<span class="keyword">new</span> Foo(i,location,Foo.Status.TODO));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Foo&gt; <span class="title">findTodoData</span><span class="params">(<span class="keyword">final</span> String location, <span class="keyword">final</span> <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        List&lt;Foo&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(limit);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long, Foo&gt; each : data.entrySet()) &#123;</span><br><span class="line">            Foo foo = each.getValue();</span><br><span class="line">            <span class="keyword">if</span> (foo.getLocation().equals(location) &amp;&amp; foo.getStatus() == Foo.Status.TODO) &#123;</span><br><span class="line">                result.add(foo);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count == limit) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompleted</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        data.get(id).setStatus(Foo.Status.COMPLETED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4) 入口类</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource</span>(value = &#123; <span class="string">"classpath:applicationContext-elastic-job.xml"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootElasticJobApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EMBED_ZOOKEEPER_PORT = <span class="number">6181</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">EmbedZookeeperServer.start(EMBED_ZOOKEEPER_PORT); <span class="comment">// 启动内嵌zookeeper</span></span><br><span class="line">SpringApplication.run(SpringbootElasticJobApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5) 参数配置application.properties</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=9100</span><br></pre></td></tr></table></figure></p><p><strong>6) druid连接池配置/conf/druid-config.properties</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#druid datasouce database settings begin</span><br><span class="line">spring.druid.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.druid.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.druid.datasource.url=jdbc:mysql://localhost:3306/spring-cloud-db?characterEncoding=utf-8</span><br><span class="line">spring.druid.datasource.username=root</span><br><span class="line">spring.druid.datasource.password=root</span><br><span class="line"></span><br><span class="line"># \u4E0B\u9762\u4E3A\u8FDE\u63A5\u6C60\u7684\u8865\u5145\u8BBE\u7F6E\uFF0C\u5E94\u7528\u5230\u4E0A\u9762\u6240\u6709\u6570\u636E\u6E90\u4E2D</span><br><span class="line"># \u521D\u59CB\u5316\u5927\u5C0F\uFF0C\u6700\u5C0F\uFF0C\u6700\u5927</span><br><span class="line">spring.druid.datasource.initialSize=5</span><br><span class="line">spring.druid.datasource.minIdle=5</span><br><span class="line">spring.druid.datasource.maxActive=20</span><br><span class="line"># \u914D\u7F6E\u83B7\u53D6\u8FDE\u63A5\u7B49\u5F85\u8D85\u65F6\u7684\u65F6\u95F4</span><br><span class="line">spring.druid.datasource.maxWait=60000</span><br><span class="line"># \u914D\u7F6E\u95F4\u9694\u591A\u4E45\u624D\u8FDB\u884C\u4E00\u6B21\u68C0\u6D4B\uFF0C\u68C0\u6D4B\u9700\u8981\u5173\u95ED\u7684\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2</span><br><span class="line">spring.druid.datasource.timeBetweenEvictionRunsMillis=60000</span><br><span class="line"># \u914D\u7F6E\u4E00\u4E2A\u8FDE\u63A5\u5728\u6C60\u4E2D\u6700\u5C0F\u751F\u5B58\u7684\u65F6\u95F4\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2</span><br><span class="line">spring.druid.datasource.minEvictableIdleTimeMillis=300000</span><br><span class="line">spring.druid.datasource.validationQuery=SELECT 1 FROM DUAL</span><br><span class="line">spring.druid.datasource.testWhileIdle=true</span><br><span class="line">spring.druid.datasource.testOnBorrow=false</span><br><span class="line">spring.druid.datasource.testOnReturn=false</span><br><span class="line"># \u6253\u5F00PSCache\uFF0C\u5E76\u4E14\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0F</span><br><span class="line">spring.druid.datasource.poolPreparedStatements=true</span><br><span class="line">spring.druid.datasource.maxPoolPreparedStatementPerConnectionSize=20</span><br><span class="line"># \u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF0C\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF0C&apos;wall&apos;\u7528\u4E8E\u9632\u706B\u5899</span><br><span class="line">spring.druid.datasource.filters=stat,wall,log4j,config</span><br><span class="line"># \u901A\u8FC7connectProperties\u5C5E\u6027\u6765\u6253\u5F00mergeSql\u529F\u80FD\uFF1B\u6162SQL\u8BB0\u5F55</span><br><span class="line">spring.druid.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span><br><span class="line"># \u5408\u5E76\u591A\u4E2ADruidDataSource\u7684\u76D1\u63A7\u6570\u636E</span><br><span class="line">spring.druid.datasource.useGlobalDataSourceStat=true</span><br><span class="line">#druid datasouce database settings end</span><br><span class="line"></span><br><span class="line">#jpa settings begin</span><br><span class="line">jpa.database=MYSQL</span><br><span class="line">jpa.show-sql=true</span><br><span class="line">jpa.hibernate.ddl-auto=update</span><br><span class="line">jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy</span><br><span class="line">jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">#jpa settings end</span><br></pre></td></tr></table></figure></p><p><strong>7) job配置/conf/job.properties</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#listener.simple=com.dangdang.ddframe.job.example.listener.SpringSimpleListener</span><br><span class="line">#listener.distributed=com.dangdang.ddframe.job.example.listener.SpringSimpleDistributeListener</span><br><span class="line">#listener.distributed.startedTimeoutMilliseconds=1000</span><br><span class="line">#listener.distributed.completedTimeoutMilliseconds=3000</span><br><span class="line"></span><br><span class="line">#1.cron:cron\u8868\u8FBE\u5F0F,\u7528\u4E8E\u914D\u7F6E\u4F5C\u4E1A\u89E6\u53D1\u65F6\u95F4</span><br><span class="line">#2.shardingTotalCount:\u4F5C\u4E1A\u5206\u7247\u603B\u6570</span><br><span class="line">#3.shardingItemParameters:\u5206\u7247\u5E8F\u5217\u53F7\u548C\u53C2\u6570\u7528\u7B49\u53F7\u5206\u9694\uFF0C\u591A\u4E2A\u952E\u503C\u5BF9\u7528\u9017\u53F7\u5206\u9694\u5206\u7247\u5E8F\u5217\u53F7\u4ECE0\u5F00\u59CB\uFF0C\u4E0D\u53EF\u5927\u4E8E\u6216\u7B49\u4E8E\u4F5C\u4E1A\u5206\u7247\u603B\u6570\u5982\uFF1A0=a,1=b,2=c</span><br><span class="line">#4.maxTimeDiffSeconds:\u6700\u5927\u5141\u8BB8\u7684\u672C\u673A\u4E0E\u6CE8\u518C\u4E2D\u5FC3\u7684\u65F6\u95F4\u8BEF\u5DEE\u79D2\u6570\u5982\u679C\u65F6\u95F4\u8BEF\u5DEE\u8D85\u8FC7\u914D\u7F6E\u79D2\u6570\u5219\u4F5C\u4E1A\u542F\u52A8\u65F6\u5C06\u629B\u5F02\u5E38\u914D\u7F6E\u4E3A-1\u8868\u793A\u4E0D\u6821\u9A8C\u65F6\u95F4\u8BEF\u5DEE</span><br><span class="line">#5.failover:\u662F\u5426\u5F00\u542F\u5931\u6548\u8F6C\u79FB\u4EC5monitorExecution\u5F00\u542F\uFF0C\u5931\u6548\u8F6C\u79FB\u624D\u6709\u6548</span><br><span class="line">#6.processCountIntervalSeconds:\u7EDF\u8BA1\u4F5C\u4E1A\u5904\u7406\u6570\u636E\u6570\u91CF\u7684\u95F4\u9694\u65F6\u95F4,\u5355\u4F4D\uFF1A\u79D2</span><br><span class="line">#7.description:\u4F5C\u4E1A\u63CF\u8FF0\u4FE1\u606F</span><br><span class="line">#8.disabled:\u4F5C\u4E1A\u662F\u5426\u7981\u6B62\u542F\u52A8,\u53EF\u7528\u4E8E\u90E8\u7F72\u4F5C\u4E1A\u65F6,\u5148\u7981\u7528\u542F\u52A8,\u90E8\u7F72\u7ED3\u675F\u540E\u7EDF\u4E00\u542F\u52A8</span><br><span class="line">#9.overwrite:\u672C\u5730\u914D\u7F6E\u662F\u5426\u53EF\u8986\u76D6\u6CE8\u518C\u4E2D\u5FC3\u914D\u7F6E,\u5982\u679C\u53EF\u8986\u76D6,\u6BCF\u6B21\u542F\u52A8\u4F5C\u4E1A\u90FD\u4EE5\u672C\u5730\u914D\u7F6E\u4E3A\u51C6</span><br><span class="line"></span><br><span class="line"># simple job 1 config</span><br><span class="line">simple.id=springSimpleJob</span><br><span class="line">simple.class=com.uxin.springbootelasticjob.job.simple.SpringSimpleJob</span><br><span class="line">simple.cron=0 */1 * * * ?</span><br><span class="line">simple.shardingTotalCount=3</span><br><span class="line">simple.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br><span class="line">simple.monitorExecution=false</span><br><span class="line">simple.failover=true</span><br><span class="line">simple.description=\u610F\u4E3A\u7B80\u5355\u5B9E\u73B0\uFF0C\u672A\u7ECF\u4EFB\u4F55\u5C01\u88C5\u7684\u7C7B\u578B\u3002\u9700\u5B9E\u73B0SimpleJob\u63A5\u53E3\u3002\u8BE5\u63A5\u53E3\u4EC5\u63D0\u4F9B\u5355\u4E00\u65B9\u6CD5\u7528\u4E8E\u8986\u76D6\uFF0C\u6B64\u65B9\u6CD5\u5C06\u5B9A\u65F6\u6267\u884C\u3002\u4E0EQuartz\u539F\u751F\u63A5\u53E3\u76F8\u4F3C\uFF0C\u4F46\u63D0\u4F9B\u4E86\u5F39\u6027\u6269\u7F29\u5BB9\u548C\u5206\u7247\u7B49\u529F\u80FD\u3002</span><br><span class="line">simple.disabled=false</span><br><span class="line">simple.overwrite=true</span><br><span class="line">simple.monitorPort=9888</span><br><span class="line"></span><br><span class="line"># simple job 2 config</span><br><span class="line">simple2.id=springSimpleJob2</span><br><span class="line">simple2.class=com.uxin.springbootelasticjob.job.simple.SpringSimpleJob2</span><br><span class="line">simple2.cron=0 */5 * * * ?</span><br><span class="line">simple2.shardingTotalCount=3</span><br><span class="line">simple2.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br><span class="line">simple2.monitorExecution=false</span><br><span class="line">simple2.failover=true</span><br><span class="line">simple2.description=\u53EA\u8FD0\u884C\u4E00\u6B21\u7684\u4F5C\u4E1A\u793A\u4F8B</span><br><span class="line">simple2.disabled=false</span><br><span class="line">simple2.overwrite=true</span><br><span class="line">simple2.monitorPort=9889</span><br><span class="line"></span><br><span class="line"># dataflow config</span><br><span class="line">dataflow.id=springDataflowJob</span><br><span class="line">dataflow.class=com.uxin.springbootelasticjob.job.dataflow.SpringDataflowJob</span><br><span class="line">dataflow.cron=0 0 23 * * ?</span><br><span class="line">dataflow.shardingTotalCount=3</span><br><span class="line">dataflow.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br><span class="line">dataflow.maxTimeDiffSeconds=-1</span><br><span class="line">dataflow.monitorExecution=true</span><br><span class="line">dataflow.failover=true</span><br><span class="line">dataflow.streamingProcess=true</span><br><span class="line">dataflow.description=\u6309\u987A\u5E8F\u4E0D\u505C\u6B62\u8FD0\u884C\u7684\u4F5C\u4E1A\u793A\u4F8B</span><br><span class="line">dataflow.disabled=false</span><br><span class="line">dataflow.overwrite=true</span><br><span class="line"></span><br><span class="line"># script job config</span><br><span class="line">script.id=springScriptJob</span><br><span class="line"></span><br><span class="line"># need absolute path</span><br><span class="line">script.scriptCommandLine=your_path/elastic-job/elastic-job-example/elastic-job-example-lite-spring/src/main/resources/script/demo.sh</span><br><span class="line"></span><br><span class="line">script.cron=0 0 23 * * ?</span><br><span class="line">script.shardingTotalCount=3</span><br><span class="line">script.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br><span class="line">script.description=Script Job</span><br><span class="line">script.overwrite=true</span><br></pre></td></tr></table></figure></p><p><strong>8) zookeeper配置/conf/reg.properties</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serverLists=localhost:6181</span><br><span class="line">namespace=elastic-job-example-lite-springboot</span><br><span class="line">baseSleepTimeMilliseconds=1000</span><br><span class="line">maxSleepTimeMilliseconds=3000</span><br><span class="line">maxRetries=3</span><br></pre></td></tr></table></figure></p><p><strong>8) xml配置applicationContext-elastic-job.xml</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:reg</span>=<span class="string">"http://www.dangdang.com/schema/ddframe/reg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:job</span>=<span class="string">"http://www.dangdang.com/schema/ddframe/job"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.dangdang.com/schema/ddframe/reg</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.dangdang.com/schema/ddframe/reg/reg.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.dangdang.com/schema/ddframe/job</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.dangdang.com/schema/ddframe/job/job.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        "</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.uxin.springbootelasticjob.job"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置文件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/*.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库中关于作业运行的log--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"elasticJobLog"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.druid.datasource.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.druid.datasource.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.druid.datasource.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.druid.datasource.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置作业注册中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reg:zookeeper</span> <span class="attr">id</span>=<span class="string">"regCenter"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">server-lists</span>=<span class="string">"$&#123;serverLists&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">namespace</span>=<span class="string">"$&#123;namespace&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">base-sleep-time-milliseconds</span>=<span class="string">"$&#123;baseSleepTimeMilliseconds&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">max-sleep-time-milliseconds</span>=<span class="string">"$&#123;maxSleepTimeMilliseconds&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">max-retries</span>=<span class="string">"$&#123;maxRetries&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置简单作业 1--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- event-trace-rdb-data-source 配置带作业数据库事件追踪的简单作业--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">job:simple</span> <span class="attr">id</span>=<span class="string">"$&#123;simple.id&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"$&#123;simple.class&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">registry-center-ref</span>=<span class="string">"regCenter"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">sharding-total-count</span>=<span class="string">"$&#123;simple.shardingTotalCount&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">cron</span>=<span class="string">"$&#123;simple.cron&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">sharding-item-parameters</span>=<span class="string">"$&#123;simple.shardingItemParameters&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">monitor-execution</span>=<span class="string">"$&#123;simple.monitorExecution&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">monitor-port</span>=<span class="string">"$&#123;simple.monitorPort&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">failover</span>=<span class="string">"$&#123;simple.failover&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">description</span>=<span class="string">"$&#123;simple.description&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">disabled</span>=<span class="string">"$&#123;simple.disabled&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">overwrite</span>=<span class="string">"$&#123;simple.overwrite&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">event-trace-rdb-data-source</span>=<span class="string">"elasticJobLog"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置带监听的简单作业 2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">job:simple</span> <span class="attr">id</span>=<span class="string">"$&#123;simple2.id&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"$&#123;simple2.class&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">registry-center-ref</span>=<span class="string">"regCenter"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">sharding-total-count</span>=<span class="string">"$&#123;simple2.shardingTotalCount&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">cron</span>=<span class="string">"$&#123;simple2.cron&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">sharding-item-parameters</span>=<span class="string">"$&#123;simple2.shardingItemParameters&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">monitor-execution</span>=<span class="string">"$&#123;simple2.monitorExecution&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">monitor-port</span>=<span class="string">"$&#123;simple2.monitorPort&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">failover</span>=<span class="string">"$&#123;simple2.failover&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">description</span>=<span class="string">"$&#123;simple2.description&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">disabled</span>=<span class="string">"$&#123;simple2.disabled&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">overwrite</span>=<span class="string">"$&#123;simple2.overwrite&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">event-trace-rdb-data-source</span>=<span class="string">"elasticJobLog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash;配置本地监听器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">job:listener</span> <span class="attr">class</span>=<span class="string">"com.uxin.springbootelasticjob.listener.MyElasticJobListener"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash;配置分布式监听器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">job:distributed-listener</span> <span class="attr">class</span>=<span class="string">"com.uxin.springbootelasticjob.listener.MyDistributeOnceElasticJobListener"</span></span></span><br><span class="line"><span class="tag">                                  <span class="attr">started-timeout-milliseconds</span>=<span class="string">"2000"</span> <span class="attr">completed-timeout-milliseconds</span>=<span class="string">"2000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">job:simple</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据流作业--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">job:dataflow</span> <span class="attr">id</span>=<span class="string">"$&#123;dataflow.id&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">class</span>=<span class="string">"$&#123;dataflow.class&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">registry-center-ref</span>=<span class="string">"regCenter"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">sharding-total-count</span>=<span class="string">"$&#123;dataflow.shardingTotalCount&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">cron</span>=<span class="string">"$&#123;dataflow.cron&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">sharding-item-parameters</span>=<span class="string">"$&#123;dataflow.shardingItemParameters&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">monitor-execution</span>=<span class="string">"$&#123;dataflow.monitorExecution&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">failover</span>=<span class="string">"$&#123;dataflow.failover&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">max-time-diff-seconds</span>=<span class="string">"$&#123;dataflow.maxTimeDiffSeconds&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">streaming-process</span>=<span class="string">"$&#123;dataflow.streamingProcess&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">description</span>=<span class="string">"$&#123;dataflow.description&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">disabled</span>=<span class="string">"$&#123;dataflow.disabled&#125;"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">overwrite</span>=<span class="string">"$&#123;dataflow.overwrite&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>至此，已经简单介绍了ElasticJob的用法，后续会深入ElasticJob源码学习，深入理解其各个特性实现的思想；</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/elasticjob/elastic-job-lite" target="_blank" rel="noopener">Elastic-Job源码</a></li><li><a href="https://github.com/elasticjob/elastic-job-example" target="_blank" rel="noopener">Elastic-Job示例</a></li><li>参考博客原文地址：<a href="http://jianwl.com/2017/11/01/ElasticJob入门实战/" target="_blank" rel="noopener">http://jianwl.com/2017/11/01/ElasticJob入门实战/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;在上一节中，即ElasticJob入门实战一中已经介绍了使用springboot + elastic的&lt;a href=&quot;https://github.com/dicheng52119/springboot-cloud-demo/tree/master/elastic-job&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;application.properties配置方式&lt;/a&gt;，由于使用springboot原生配置，很多job细腻化的配置无法实现。所以，本文介绍了其中关于job和注册中心的配置实用了spring的&lt;a href=&quot;https://github.com/dicheng52119/springboot-elastic-job&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xml配置方式&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;SpringBoot整合ElasticJob-xml配置方式&quot;&gt;&lt;a href=&quot;#SpringBoot整合ElasticJob-xml配置方式&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合ElasticJob(xml配置方式)&quot;&gt;&lt;/a&gt;SpringBoot整合ElasticJob(xml配置方式)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1）依赖pom.xml&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticJob" scheme="http://yoursite.com/categories/ElasticJob/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="ElasticJob" scheme="http://yoursite.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>ElasticJob入门实战一</title>
    <link href="http://yoursite.com/2018/01/27/ElasticJob%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B8%80/"/>
    <id>http://yoursite.com/2018/01/27/ElasticJob入门实战一/</id>
    <published>2018-01-27T14:06:29.000Z</published>
    <updated>2018-01-27T14:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><code>ElasticJob</code>是一个分布式调度解决方案，由两个互相独立的子项目<code>Elastic-Job-Lite</code>和<code>Elastic-Job-Cloud</code>组成。<code>Elastic-Job-Lite</code>定位为轻量级无中心化解决方案，使用jar包形式提供分布式的协调服务。这一节我们将会介绍SpringBoot整合ElasticJob。</p><h3 id="SpringBoot整合ElasticJob-application-properties配置方式"><a href="#SpringBoot整合ElasticJob-application-properties配置方式" class="headerlink" title="SpringBoot整合ElasticJob(application.properties配置方式)"></a>SpringBoot整合ElasticJob(application.properties配置方式)</h3><p><strong>1）依赖pom.xml</strong></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crazyit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-elastic-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-elastic-job<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>elastic-job project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elastic.job.version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">elastic.job.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">curator.test.version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">curator.test.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springboot elastic-job config begin--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elastic.job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dangdang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elastic-job-lite-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elastic.job.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springboot elastic-job config end--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--内置zookeeper config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;curator.test.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据源 config begin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源 config end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2）注册中心配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"'$&#123;regCenter.serverList&#125;'.length()&gt;0"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperRegistryCenterConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZookeeperRegistryCenter <span class="title">regCenter</span><span class="params">(@Value(<span class="string">"$&#123;regCenter.serverList&#125;"</span>)</span> <span class="keyword">final</span> String serverList,</span></span><br><span class="line"><span class="function">                                             @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;regCenter.namespace&#125;"</span>)</span> <span class="keyword">final</span> String namespace)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistryCenter(<span class="keyword">new</span> ZookeeperConfiguration(serverList,namespace));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3) 作业事件配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobEventConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobEventConfiguration <span class="title">jobEventConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JobEventRdbConfiguration(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4) 内嵌Zookeeper配置</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbedZookeeperServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TestingServer testingServer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            testingServer = <span class="keyword">new</span> TestingServer(port,<span class="keyword">new</span> File(String.format(<span class="string">"target/test_zk_data/%s/"</span>,System.nanoTime())));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                    testingServer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5) 基于时间驱动的任务</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSimpleJob</span> <span class="keyword">implements</span> <span class="title">SimpleJob</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FooRepository fooRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ShardingContext shardingContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"Item: %s | Time: %s | Thread: %s | %s"</span>,</span><br><span class="line">                shardingContext.getShardingItem(), <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()), Thread.currentThread().getId(), <span class="string">"SIMPLE"</span>));</span><br><span class="line">        List&lt;Foo&gt; data = fooRepository.findTodoData(shardingContext.getShardingParameter(), <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (Foo each : data) &#123;</span><br><span class="line">            fooRepository.setCompleted(each.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模型类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String location;</span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">long</span> id, String location, Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Status status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Foo&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", location='"</span> + location + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", status="</span> + status +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status&#123;</span><br><span class="line">        TODO,</span><br><span class="line">        COMPLETED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Repository<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Foo&gt; data = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">300</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooRepository</span><span class="params">()</span></span>&#123;init();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        addData(<span class="number">0L</span>, <span class="number">100L</span>, <span class="string">"Beijing"</span>);</span><br><span class="line">        addData(<span class="number">100L</span>, <span class="number">200L</span>, <span class="string">"Shanghai"</span>);</span><br><span class="line">        addData(<span class="number">200L</span>, <span class="number">300L</span>, <span class="string">"Guangzhou"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">final</span> Long idFrom,<span class="keyword">final</span> Long idTo,<span class="keyword">final</span> String location)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i=idFrom; i &lt; idTo; i++) &#123;</span><br><span class="line">            data.put(i,<span class="keyword">new</span> Foo(i,location,Foo.Status.TODO));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Foo&gt; <span class="title">findTodoData</span><span class="params">(<span class="keyword">final</span> String location, <span class="keyword">final</span> <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        List&lt;Foo&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(limit);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long, Foo&gt; each : data.entrySet()) &#123;</span><br><span class="line">            Foo foo = each.getValue();</span><br><span class="line">            <span class="keyword">if</span> (foo.getLocation().equals(location) &amp;&amp; foo.getStatus() == Foo.Status.TODO) &#123;</span><br><span class="line">                result.add(foo);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count == limit) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompleted</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        data.get(id).setStatus(Foo.Status.COMPLETED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6) 任务注册</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJobConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ZookeeperRegistryCenter regCenter;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JobEventConfiguration jobEventConfiguration;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleJob <span class="title">simpleJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringSimpleJob();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobScheduler <span class="title">simpleJobScheduler</span><span class="params">(<span class="keyword">final</span> SimpleJob simpleJob,                @Value(<span class="string">"$&#123;simpleJob.cron&#125;"</span>)</span> <span class="keyword">final</span> String cron,</span></span><br><span class="line"><span class="function">    @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;simpleJob.shardingTotalCount&#125;"</span>)</span> <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount,   </span></span><br><span class="line"><span class="function">    @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;simpleJob.shardingItemParameters&#125;"</span>)</span> <span class="keyword">final</span> String shardingItemParameters)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringJobScheduler(simpleJob, regCenter,       getLiteJobConfiguration(simpleJob.getClass(), cron, shardingTotalCount, shardingItemParameters), jobEventConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> LiteJobConfiguration <span class="title">getLiteJobConfiguration</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends SimpleJob&gt; jobClass, <span class="keyword">final</span> String cron, <span class="keyword">final</span> <span class="keyword">int</span> shardingTotalCount, <span class="keyword">final</span> String shardingItemParameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LiteJobConfiguration.newBuilder(<span class="keyword">new</span>  SimpleJobConfiguration(JobCoreConfiguration.newBuilder(</span><br><span class="line">                jobClass.getName(), cron, shardingTotalCount).shardingItemParameters(shardingItemParameters).build(), jobClass.getCanonicalName())).overwrite(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>7) 入口类</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter64Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">EmbedZookeeperServer.start(<span class="number">6181</span>); <span class="comment">// 启动内嵌zookeeper</span></span><br><span class="line">SpringApplication.run(Chapter64Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>8) 参数配置application.properties</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DB Configuration:</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/spring-cloud-db</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = root</span><br><span class="line"></span><br><span class="line">#Elastic-job Configuration:</span><br><span class="line">regCenter.serverList=localhost:6181</span><br><span class="line">regCenter.namespace=elastic-job-lite-springboot</span><br><span class="line"></span><br><span class="line">#SimpleJob Configuration</span><br><span class="line">simpleJob.cron=*/5 * * * * ?</span><br><span class="line">simpleJob.shardingTotalCount=3</span><br><span class="line">simpleJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#DataflowJob Configuration</span><br><span class="line">dataflowJob.cron=0 */9 * * * ?</span><br><span class="line">dataflowJob.shardingTotalCount=3</span><br><span class="line">dataflowJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou</span><br></pre></td></tr></table></figure></p><p><strong>9) 项目源码请移步：<a href="https://github.com/dicheng52119/springboot-cloud-demo/tree/master/elastic-job" target="_blank" rel="noopener">SpringBoot整合ElasticJob</a></strong></p><h3 id="elastic-job-lite-console界面中配置注册中心"><a href="#elastic-job-lite-console界面中配置注册中心" class="headerlink" title="elastic-job-lite-console界面中配置注册中心"></a><a href="https://github.com/elasticjob/elastic-job-lite/tree/master/elastic-job-lite/elastic-job-lite-console" target="_blank" rel="noopener">elastic-job-lite-console</a>界面中配置注册中心</h3><p><strong>1) 启动<a href="https://github.com/elasticjob/elastic-job-lite/blob/master/elastic-job-lite/elastic-job-lite-console/src/main/java/com/dangdang/ddframe/job/lite/console/ConsoleBootstrap.java" target="_blank" rel="noopener">ConsoleBootstrap.java</a>类，输入账号：root，密码：root</strong></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE1.jpg?raw=true" alt=""></p><p><strong>2) 启动步骤2中SpringBoot整合的ElasticJob项目，在elastic-job-lite-console界面中配置注册中心地址</strong></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE2.jpg?raw=true" alt=""></p><p><strong>3) 连接注册中心</strong></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE3.jpg?raw=true" alt=""></p><p><strong>4) 获取注册中心的任务</strong></p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE4.jpg?raw=true" alt=""></p><p><strong>5) 触发任务</strong>‘</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/elastic-job/elastic-job%E9%85%8D%E7%BD%AE5.jpg?raw=true" alt=""></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/elasticjob/elastic-job-lite" target="_blank" rel="noopener">Elastic-Job源码</a></li><li><a href="https://github.com/elasticjob/elastic-job-example" target="_blank" rel="noopener">Elastic-Job示例</a></li><li>参考博客原文地址：<a href="http://jianwl.com/2017/11/01/ElasticJob入门实战/" target="_blank" rel="noopener">http://jianwl.com/2017/11/01/ElasticJob入门实战/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ElasticJob&lt;/code&gt;是一个分布式调度解决方案，由两个互相独立的子项目&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;和&lt;code&gt;Elastic-Job-Cloud&lt;/code&gt;组成。&lt;code&gt;Elastic-Job-Lite&lt;/code&gt;定位为轻量级无中心化解决方案，使用jar包形式提供分布式的协调服务。这一节我们将会介绍SpringBoot整合ElasticJob。&lt;/p&gt;
&lt;h3 id=&quot;SpringBoot整合ElasticJob-application-properties配置方式&quot;&gt;&lt;a href=&quot;#SpringBoot整合ElasticJob-application-properties配置方式&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot整合ElasticJob(application.properties配置方式)&quot;&gt;&lt;/a&gt;SpringBoot整合ElasticJob(application.properties配置方式)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1）依赖pom.xml&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticJob" scheme="http://yoursite.com/categories/ElasticJob/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="ElasticJob" scheme="http://yoursite.com/tags/ElasticJob/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot默认日志系统logback配置解析</title>
    <link href="http://yoursite.com/2018/01/22/Spring%20Boot%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9Flogback%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/22/Spring Boot默认日志系统logback配置解析/</id>
    <published>2018-01-22T14:51:38.000Z</published>
    <updated>2018-01-27T14:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天来介绍下Spring Boot如何配置日志logback,我刚学习的时候，是带着下面几个问题来查资料的，你呢</p><ul><li>如何引入日志？</li><li>日志输出格式以及输出方式如何配置？</li><li>代码中如何使用？</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><p>SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。</p><p>Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，你应该已经看到很多INFO级别的日志了。</p><a id="more"></a><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/logback/springboot+logback%E9%85%8D%E7%BD%AE1.png?raw=true" alt=""></p><p>从上图可以看到，日志输出内容元素具体如下：</p><ul><li>时间日期：精确到毫秒</li><li>日志级别：ERROR, WARN, INFO, DEBUG or TRACE</li><li>进程ID</li><li>分隔符：— 标识实际日志的开始</li><li>线程名：方括号括起来（可能会截断控制台输出）</li><li>Logger名：通常使用源代码的类名</li><li>日志内容</li></ul><h3 id="添加日志依赖"><a href="#添加日志依赖" class="headerlink" title="添加日志依赖"></a>添加日志依赖</h3><p>假如maven依赖中添加了spring-boot-starter-logging：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。</p><p>但是呢，实际开发中我们不需要直接添加该依赖，你会发现spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。而博主这次项目的例子是基于上一篇的，工程中有用到了Thymeleaf，而Thymeleaf依赖包含了spring-boot-starter，最终我只要引入Thymeleaf即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体可以看该图:</p><p><img src="https://github.com/dicheng52119/Picture-Repository/blob/master/study/logback/springboot+logback%E9%85%8D%E7%BD%AE2.png?raw=true" alt=""></p><h3 id="默认配置属性支持"><a href="#默认配置属性支持" class="headerlink" title="默认配置属性支持"></a>默认配置属性支持</h3><p>Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。</p><p>下面介绍几种在application.properties就可以配置的日志相关属性。</p><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。</p><p>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><ul><li>在运行命令后加入–debug标志，如：$ java -jar springTest.jar –debug</li><li>在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</li></ul><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><ul><li>logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log</li><li>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log</li></ul><p>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。</p><p>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log</p><blockquote><p>注：二者不能同时使用，如若同时使用，则只有logging.file生效</p></blockquote><p><strong>默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO</strong></p><h3 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h3><p>所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）<br>格式为：’logging.level.* = LEVEL’</p><ul><li>logging.level：日志级别控制前缀，*为包名或Logger名</li><li>LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</li></ul><p>举例：</p><ul><li>logging.level.com.dudu=DEBUG：com.dudu包下所有class以DEBUG级别输出</li><li>logging.level.root=WARN：root日志以WARN级别输出</li></ul><h3 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h3><p>由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。</p><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li><li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li><li>Log4j2：log4j2-spring.xml, log4j2.xml</li><li>JDK (Java Util Logging)：logging.properties</li></ul><p><strong>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</strong></p><p>上面是默认的命名规则，并且放在src/main/resources下面即可。</p><p>如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logging.config=classpath:logging-config.xml</span><br></pre></td></tr></table></figure><p>虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日<br>志配置，这个功能会很有用。</p><p>下面我们来看看一个普通的logback-spring.xml例子</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/Users/tengjun/Documents/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">        &lt;/filter&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>根节点<configuration>包含的属性</configuration></strong></p><ul><li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul><p>根节点<configuration>的子节点：</configuration></p><p><configuration>下面一共有2个属性，3个子节点，分别是：</configuration></p><p><strong>属性一：设置上下文名称<contextname></contextname></strong></p><p>每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性二：设置变量<property></property></strong></p><p>用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/Users/tengjun/Documents/log"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子节点一<appender></appender></strong></p><p>appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。</p><p>控制台输出ConsoleAppender：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><encoder>表示对日志进行编码：</encoder></p><ul><li>%d{HH: mm:ss.SSS}——日志输出时间</li><li>%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</li><li>%-5level——日志级别，并且使用5个字符靠左对齐</li><li>%logger{36}——日志输出者的名字</li><li>%msg——日志消息</li><li>%n——平台的换行符</li></ul><p>ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~</p><p><strong>输出到文件RollingFileAppender</strong></p><p>另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中重要的是rollingPolicy的定义，上例中<filenamepattern>${log.path}/logback.%d{yyyy-MM-dd}.log</filenamepattern>定义了日志的切分方式——把每一天的日志归档到一个文件中，<maxhistory>30</maxhistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。<totalsizecap>1GB</totalsizecap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。</p><p>补:如果你想把日志直接放到当前项目下，把${log.path}/去掉即可。</p><p><strong>子节点二<root></root></strong></p><p>root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。</p><p>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。</p><p>默认是DEBUG。</p><p>可以包含零个或多个元素，标识这个appender将会添加到这个logger。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子节点三<logger></logger></strong></p><p><logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。</logger></appender></logger></p><ul><li>name:用来指定受此logger约束的某一个包或者具体的某一个类。</li><li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</li><li>addtivity:是否向上级logger传递打印信息。默认是true。</li></ul><p>logger在实际使用的时候有两种情况，先来看一看代码中如何使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="comment">//日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。</span></span><br><span class="line">        logger.trace(<span class="string">"日志输出 trace"</span>);</span><br><span class="line">        logger.debug(<span class="string">"日志输出 debug"</span>);</span><br><span class="line">        logger.info(<span class="string">"日志输出 info"</span>);</span><br><span class="line">        logger.warn(<span class="string">"日志输出 warn"</span>);</span><br><span class="line">        logger.error(<span class="string">"日志输出 error"</span>);</span><br><span class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">        String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</span><br><span class="line">            User user =<span class="keyword">new</span> User(userName,password);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个登录的判断的方法，我们引入日志，并且打印不同级别的日志，然后根据logback-spring.xml中的配置来看看打印了哪几种级别日志。</p><p><strong>第一种：带有logger的配置，不指定级别，不指定appender</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><logger name="com.dudu.controller">将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”；</logger></p><p>没有设置addtivity，默认为true，将此logger的打印信息向上级传递；</p><p>没有设置appender，此logger本身不打印任何信息。</p><p><root level="info">将root的打印级别设置为“info”，指定了名字为“console”的appender。</root></p><p>当执行com.dudu.controller.LearnController类的login方法时，LearnController 在包com.dudu.controller中，所以首先执行<logger name="com.dudu.controller">，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；</logger></p><p>root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；</p><p>打印结果如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">16:00:17.407 logback [http-nio-8080-exec-8] INFO  com.dudu.controller.LearnController - 日志输出 info</span><br><span class="line">16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.dudu.controller.LearnController - 日志输出 warn</span><br><span class="line">16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.dudu.controller.LearnController - 日志输出 error</span><br></pre></td></tr></table></figure></p><p><strong>第二种：带有多个logger的配置，指定级别，指定appender</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制com.dudu.controller.LearnController类的日志打印，打印级别为“WARN”;<br>additivity属性为false，表示此logger的打印信息不再向上级传递;<br>指定了名字为“console”的appender;</p><p>这时候执行com.dudu.controller.LearnController类的login方法时，先执行<logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">,<br>将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息。</logger></p><p>打印结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.dudu.controller.LearnController - 日志输出 warn</span><br><span class="line">16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.dudu.controller.LearnController - 日志输出 error</span><br></pre></td></tr></table></figure><p>当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。</p><p>注：使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</p><ul><li>第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息。</root></root></li><li>第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.dao"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多环境日志输出"><a href="#多环境日志输出" class="headerlink" title="多环境日志输出"></a>多环境日志输出</h3><p>据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：</p><blockquote><p>文件名称不是logback.xml，想使用spring扩展profile支持，要以logback-spring.xml命名</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试环境+开发环境. 多个使用逗号隔开. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test,dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span> <span class="attr">level</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：<br>java -jar xxx.jar –spring.profiles.active=prod</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>springboot推荐的日志类库是slf4j、日志系统为logback</li><li>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台</li><li>springboot内置了logback日志系统依赖，无需添加依赖</li><li>官方文档中有提到， SpringBoot 的 Logging 配置的级别有7个：<br>TRACE , DEBUG , INFO , WARN , ERROR , FATAL , OFF</li><li>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出</li><li><p>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。<br>您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><p> （1）在运行命令后加入双-debug标志，如：$ java -jar springTest.jar 双-debug</p><p> （2）在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</p></li><li><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><p> 如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。</p><p> 如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log</p><p> 注：二者不能同时使用，如若同时使用，则只有logging.file生效<br> 默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件</p></li><li>logging.level：日志级别控制前缀，*为包名或Logger名</li><li>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项</li><li>配置文件里面通过logging.config属性指定自定义的名字</li></ol><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><p>appliation.yml中的配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      uxin: debug</span><br><span class="line">    org:</span><br><span class="line">      springframework:</span><br><span class="line">        web: debug</span><br><span class="line">        transaction: debug</span><br></pre></td></tr></table></figure></li><li><p>logback-spring中的配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--保存到本地路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"D://logs"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/uxin-pay-ment-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只保留最近30天的日志，以防止日志填满整个磁盘空间--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以包含零个或多个元素，标识这个appender将会添加到这个logger。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.uxin.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name:用来指定受此logger约束的某一个包或者具体的某一个类。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--addtivity:是否向上级logger传递打印信息。默认是true。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.uxin.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天来介绍下Spring Boot如何配置日志logback,我刚学习的时候，是带着下面几个问题来查资料的，你呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何引入日志？&lt;/li&gt;
&lt;li&gt;日志输出格式以及输出方式如何配置？&lt;/li&gt;
&lt;li&gt;代码中如何使用？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;
&lt;p&gt;SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。&lt;/p&gt;
&lt;p&gt;Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。&lt;/p&gt;
&lt;p&gt;默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，你应该已经看到很多INFO级别的日志了。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://yoursite.com/categories/Spring-Boot/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
      <category term="logback" scheme="http://yoursite.com/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>Session和Cookie的区别与联系</title>
    <link href="http://yoursite.com/2018/01/07/Session%E5%92%8CCookie%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/01/07/Session和Cookie的区别与联系/</id>
    <published>2018-01-07T13:34:53.000Z</published>
    <updated>2018-01-12T05:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h3><p>你可能有留意到当你浏览网页时，会有一些推送消息，大多数是你最近留意过的同类东西，比如你想买桌子，上淘宝搜了一下，结果连着几天会有各种各样的桌子的链接。这是因为</p><p>你浏览某个网页的时候，WEB 服务器会先送一些资料放在你的计算机上，类似于你打的文字，选的一些东西什么的，Cookie 会帮你都纪录下来。当下次你再光临同一个网站，WEB</p><p>服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的</p><p>网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容。</p><p>然而，cookie是什么呢？session又是什么？</p><p>先来了解几个概念。</p><a id="more"></a><ol><li><p>无状态的HTTP协议：协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p><p> HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。<strong>这就意味着服务器无法从连接上跟踪会话。</strong></p></li><li><p>会话（Session）跟踪：会话，指用户登录网站后的一系列动作，比如浏览商品添加到购物车并购买。会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。</strong></p></li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。</p><p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端会把Cookie保存起来。</p><p>当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p><ol><li><p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。</p><ul><li>Name 和 Value属性由程序设定,默认值都是空引用。</li><li>Domain属性的默认值为当前URL的域名部分，不管发出这个cookie的页面在哪个目录下的。</li><li>Path属性的默认值是根目录，即 ”/” ，不管发出这个cookie的页面在哪个目录下的。可以由程序设置为一定的路径来进一步限制此cookie的作用范围。</li><li><p>Expires 属性，这个属性设置此Cookie 的过期日期和时间。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpCookie cookie = <span class="keyword">new</span> HttpCookie(<span class="string">"MyCook"</span>);<span class="comment">//初使化并设置Cookie的名称</span></span><br><span class="line">DateTime dt = DateTime.Now;</span><br><span class="line">TimeSpan ts = <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//过期时间为1分钟</span></span><br><span class="line">cookie.Expires = dt.Add(ts);<span class="comment">//设置过期时间</span></span><br><span class="line">cookie.Values.Add(<span class="string">"userid"</span>, <span class="string">"value"</span>);</span><br><span class="line">cookie.Values.Add(<span class="string">"userid2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">Response.AppendCookie(cookie);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Path和Domain属性</p><p> –path:</p><p> 如果<a href="http://www.china.com/test/index.html" target="_blank" rel="noopener">http://www.china.com/test/index.html</a> 建立了一个cookie，那么在<a href="http://www.china.com/test/目录里的所有页面，以及该目录下面任何子目录里" target="_blank" rel="noopener">http://www.china.com/test/目录里的所有页面，以及该目录下面任何子目录里</a></p><p>的页面都可以访问这个cookie。这就是说，在<a href="http://www.china.com/test/test2/test3" target="_blank" rel="noopener">http://www.china.com/test/test2/test3</a> 里的任何页面都可以访问<a href="http://www.china.com/test/index.html" target="_blank" rel="noopener">http://www.china.com/test/index.html</a></p><p>建立的cookie。但是，如果<a href="http://www.china.com/test/" target="_blank" rel="noopener">http://www.china.com/test/</a> 需要访问<a href="http://www.china.com/test/index.html设置的cookes，该怎么办？" target="_blank" rel="noopener">http://www.china.com/test/index.html设置的cookes，该怎么办？</a></p><p>这时，我们要把cookies的path属性设置成“/”。在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享cookies。</p><p>–Domain:</p><p>比如： <a href="http://www.baidu.com/xxx/login.aspx" target="_blank" rel="noopener">http://www.baidu.com/xxx/login.aspx</a> 页面中发出一个cookie，Domain属性缺省就是www.baidu.com ，可以由程序设置此属性为需要的值。　　</p><p>值是域名，比如www.china.com。这是对path路径属性的一个延伸。如果我们想让 www.china.com能够访问bbs.china.com设置的cookies，该怎么办? 我们可以把</p><p>domain属性设置成“china.com”， 并把path属性设置成“/”。</p></li><li><p>会话Cookie和持久Cookie</p><p> 若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。</p><p> 若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在浏览器的不同进程间共享。这种称为持久Cookie。 </p></li><li><p>应用场景</p><ul><li>判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</li><li>另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</li></ul></li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p><p>每个用户访问服务器都会建立一个session，那服务器是怎么标识用户的唯一身份呢？事实上，用户与服务器建立连接的同时，服务器会自动为其分配一个SessionId。</p><ol><li><p>两个问题：</p><p> 1）什么东西可以让你每次请求都把SessionId自动带到服务器呢？显然就是cookie了，如果你想为用户建立一次会话，可以在用户授权成功时给他一个唯一的cookie。当一个用户提交了表单时，浏览器会将用户的SessionId自动附加在HTTP头信息中，（这是浏览器的自动功能，用户不会察觉到），当服务器处理完这个表单后，将结果返回给SessionId<br>所对应的用户。试想，如果没有SessionId，当有两个用户同时进行注册时，服务器怎样才能知道到底是哪个用户提交了哪个表单呢。</p><p> 2）储存需要的信息。服务器通过SessionId作为key，读写到对应的value，这就达到了保持会话信息的目的。</p></li><li><p>session的创建：</p><p> 当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了sessionId，如果已包含则说明以前已经为此客户端创建过session，服务器就按照sessionId把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含sessionId，则为此客户端创建一个session并且生成一个与此session相关联的sessionId，sessionId的值是一个既不会重复，又不容易被找到规律以仿造的字符串，这个sessionId将被在本次响应中返回给客户端保存。</p></li><li><p>禁用cookie：</p><p> 如果客户端禁用了cookie，通常有两种方法实现session而不依赖cookie。</p><p> 1）URL重写，就是把sessionId直接附加在URL路径的后面。</p><p> 2）表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如： </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form name=<span class="string">"testform"</span> action=<span class="string">"/xxx"</span>&gt; </span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"jsessionid"</span> value=<span class="string">"ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764"</span>&gt; </span><br><span class="line">    &lt;input type=<span class="string">"text"</span>&gt; </span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Session共享：</p><p> 对于多网站(同一父域不同子域)单服务器，我们需要解决的就是来自不同网站之间SessionId的共享。由于域名不同(aaa.test.com和bbb.test.com)，而SessionId又分别储存在各自的cookie中，因此服务器会认为对于两个子站的访问,是来自不同的会话。解决的方法是通过修改cookies的域名为父域名达到cookie共享的目的,从而实现SessionId的共享。带来的弊端就是，子站间的cookie信息也同时被共享了。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>存放位置：cookie数据存放在客户的浏览器上，session数据放在服务器上。</li><li>安全性：cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</li><li>性能：session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</li><li>大小：单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</li><li>应用场景：可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;概念理解&lt;/h3&gt;&lt;p&gt;你可能有留意到当你浏览网页时，会有一些推送消息，大多数是你最近留意过的同类东西，比如你想买桌子，上淘宝搜了一下，结果连着几天会有各种各样的桌子的链接。这是因为&lt;/p&gt;
&lt;p&gt;你浏览某个网页的时候，WEB 服务器会先送一些资料放在你的计算机上，类似于你打的文字，选的一些东西什么的，Cookie 会帮你都纪录下来。当下次你再光临同一个网站，WEB&lt;/p&gt;
&lt;p&gt;服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的&lt;/p&gt;
&lt;p&gt;网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容。&lt;/p&gt;
&lt;p&gt;然而，cookie是什么呢？session又是什么？&lt;/p&gt;
&lt;p&gt;先来了解几个概念。&lt;/p&gt;
    
    </summary>
    
      <category term="Session" scheme="http://yoursite.com/categories/Session/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="session" scheme="http://yoursite.com/tags/session/"/>
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>基于redis分布式锁实现“秒杀</title>
    <link href="http://yoursite.com/2018/01/07/%E5%9F%BA%E4%BA%8Eredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E2%80%9C%E7%A7%92%E6%9D%80/"/>
    <id>http://yoursite.com/2018/01/07/基于redis分布式锁实现“秒杀/</id>
    <published>2018-01-07T13:32:37.000Z</published>
    <updated>2018-01-07T13:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中遇到了类似“秒杀”的业务场景，在本篇博客中，我将用一个非常简单的demo，阐述实现所谓“秒杀”的基本思路。</p><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><p>所谓秒杀，从业务角度看，是短时间内多个用户“争抢”资源，这里的资源在大部分秒杀场景里是商品；将业务抽象，技术角度看，秒杀就是多个线程对资源进行操作，所以实现秒杀，就必须控制线程对资源的争抢，既要保证高效并发，也要保证操作的正确。</p><h3 id="一些可能的实现"><a href="#一些可能的实现" class="headerlink" title="一些可能的实现"></a>一些可能的实现</h3><p>刚才提到过，实现秒杀的关键点是控制线程对资源的争抢，根据基本的线程知识，可以不加思索的想到下面的一些方法： </p><ol><li>秒杀在技术层面的抽象应该就是一个方法，在这个方法里可能的操作是将商品库存-1，将商品加入用户的购物车等等，在不考虑缓存的情况下应该是要操作数据库的。那么最简单直接的实现就是在这个方法上加上synchronized关键字，通俗的讲就是锁住整个方法； </li><li>锁住整个方法这个策略简单方便，但是似乎有点粗暴。可以稍微优化一下，只锁住秒杀的代码块，比如写数据库的部分； </li><li>既然有并发问题，那我就让他“不并发”，将所有的线程用一个队列管理起来，使之变成串行操作，自然不会有并发问题。</li></ol><p>上面所述的方法都是有效的，但是都不好。为什么？第一和第二种方法本质上是“加锁”，但是锁粒度依然比较高。什么意思？试想一下，如果两个线程同时执行秒杀方法，这两个线程操作的是不同的商品,从业务上讲应该是可以同时进行的，但是如果采用第一二种方法，这两个线程也会去争抢同一个锁，这其实是不必要的。第三种方法也没有解决上面说的问题。</p><p>那么如何将锁控制在更细的粒度上呢？可以考虑为每个商品设置一个互斥锁，以和商品ID相关的字符串为唯一标识，这样就可以做到只有争抢同一件商品的线程互斥，不会导致所有的线程互斥。分布式锁恰好可以帮助我们解决这个问题。</p><a id="more"></a><h3 id="何为分布式锁"><a href="#何为分布式锁" class="headerlink" title="何为分布式锁"></a>何为分布式锁</h3><p>分布式锁是控制分布式系统之间同步访问共享资源的一种方式。在分布式系统中，常常需要协调他们的动作。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要互斥来防止彼此干扰来保证一致性，在这种情况下，便需要使用到分布式锁。</p><p>我们来假设一个最简单的秒杀场景：数据库里有一张表，column分别是商品ID，和商品ID对应的库存量，秒杀成功就将此商品库存量-1。现在假设有1000个线程来秒杀两件商品，500个线程秒杀第一个商品，500个线程秒杀第二个商品。我们来根据这个简单的业务场景来解释一下分布式锁。 </p><p>通常具有秒杀场景的业务系统都比较复杂，承载的业务量非常巨大，并发量也很高。这样的系统往往采用分布式的架构来均衡负载。那么这1000个并发就会是从不同的地方过来，商品库存就是共享的资源，也是这1000个并发争抢的资源，这个时候我们需要将并发互斥管理起来。这就是分布式锁的应用。 </p><p>而key-value存储系统，如redis，因为其一些特性，是实现分布式锁的重要工具。</p><h3 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a>具体的实现</h3><p>先来看看一些redis的基本命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SETNX key value</span><br></pre></td></tr></table></figure></p><p>如果key不存在，就设置key对应字符串value。在这种情况下，该命令和SET一样。当key已经存在时，就不做任何操作。SETNX是”SET if Not eXists”。 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire KEY seconds</span><br></pre></td></tr></table></figure><p>设置key的过期时间。如果key已过期，将会被自动删除。 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del KEY</span><br></pre></td></tr></table></figure><p>删除key </p><h3 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h3><ol><li>用什么操作redis？幸亏redis已经提供了jedis客户端用于java应用程序，直接调用jedis API即可。 </li><li>怎么实现加锁？“锁”其实是一个抽象的概念，将这个抽象概念变为具体的东西，就是一个存储在redis里的key-value对，key是于商品ID相关的字符串来唯一标识，value其实并不重要，因为只要这个唯一的key-value存在，就表示这个商品已经上锁。 </li><li>如何释放锁？既然key-value对存在就表示上锁，那么释放锁就自然是在redis里删除key-value对。 </li><li>阻塞还是非阻塞？笔者采用了阻塞式的实现，若线程发现已经上锁，会在特定时间内轮询锁。 </li><li>如何处理异常情况？比如一个线程把一个商品上了锁，但是由于各种原因，没有完成操作（在上面的业务场景里就是没有将库存-1写入数据库），自然没有释放锁，这个情况笔者加入了锁超时机制，利用redis的expire命令为key设置超时时长，过了超时时间redis就会将这个key自动删除，即强制释放锁（可以认为超时释放锁是一个异步操作，由redis完成，应用程序只需要根据系统特点设置超时时间即可）。</li></ol><h3 id="talk-is-cheap-show-me-the-code"><a href="#talk-is-cheap-show-me-the-code" class="headerlink" title="talk is cheap,show me the code"></a>talk is cheap,show me the code</h3><p>在代码实现层面，注解有并发的方法和参数，通过动态代理获取注解的方法和参数，在代理中加锁，执行完被代理的方法后释放锁。</p><p>几个注解定义： </p><p>cachelock是方法级的注解，用于注解会产生并发问题的方法:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheLock &#123;</span><br><span class="line">    <span class="function">String <span class="title">lockedPrefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//redis 锁key的前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">timeOut</span><span class="params">()</span> <span class="keyword">default</span> 2000</span>;<span class="comment">//轮询锁的时间</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 1000</span>;<span class="comment">//key在redis里存在的时间，1000S</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>lockedObject是参数级的注解，用于注解商品ID等基本类型的参数：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LockedObject &#123;</span><br><span class="line">    <span class="comment">//不需要值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LockedComplexObject也是参数级的注解，用于注解自定义类型的参数：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LockedComplexObject &#123;</span><br><span class="line">    <span class="function">String <span class="title">field</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//含有成员变量的复杂对象中需要加锁的成员变量，如一个商品对象的商品ID</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CacheLockInterceptor实现InvocationHandler接口，在invoke方法中获取注解的方法和参数，在执行注解的方法前加锁，执行被注解的方法后释放锁：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheLockInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR_COUNT  = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheLockInterceptor</span><span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        CacheLock cacheLock = method.getAnnotation(CacheLock.class);</span><br><span class="line">        <span class="comment">//没有cacheLock注解，pass</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == cacheLock)&#123;</span><br><span class="line">            System.out.println(<span class="string">"no cacheLock annotation"</span>);          </span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得方法中参数的注解</span></span><br><span class="line">        Annotation[][] annotations = method.getParameterAnnotations();</span><br><span class="line">        <span class="comment">//根据获取到的参数注解和参数列表获得加锁的参数</span></span><br><span class="line">        Object lockedObject = getLockedObject(annotations,args);</span><br><span class="line">        String objectValue = lockedObject.toString();</span><br><span class="line">        <span class="comment">//新建一个锁</span></span><br><span class="line">        RedisLock lock = <span class="keyword">new</span> RedisLock(cacheLock.lockedPrefix(), objectValue);</span><br><span class="line">        <span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> result = lock.lock(cacheLock.timeOut(), cacheLock.expireTime());</span><br><span class="line">        <span class="keyword">if</span>(!result)&#123;<span class="comment">//取锁失败</span></span><br><span class="line">            ERROR_COUNT += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheLockException(<span class="string">"get lock fail"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//加锁成功，执行方法</span></span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotations</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CacheLockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getLockedObject</span><span class="params">(Annotation[][] annotations,Object[] args)</span> <span class="keyword">throws</span> CacheLockException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == args || args.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheLockException(<span class="string">"方法参数为空，没有被锁定的对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == annotations || annotations.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheLockException(<span class="string">"没有被注解的参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不支持多个参数加锁，只支持第一个注解为lockedObject或者lockedComplexObject的参数</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;<span class="comment">//标记参数的位置指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; annotations.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; annotations[i].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(annotations[i][j] <span class="keyword">instanceof</span> LockedComplexObject)&#123;<span class="comment">//注解为LockedComplexObject</span></span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> args[i].getClass().getField(((LockedComplexObject)annotations[i][j]).field());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchFieldException | SecurityException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> CacheLockException(<span class="string">"注解对象中没有该属性"</span> + ((LockedComplexObject)annotations[i][j]).field());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(annotations[i][j] <span class="keyword">instanceof</span> LockedObject)&#123;</span><br><span class="line">                    index = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到第一个后直接break，不支持多参数加锁</span></span><br><span class="line">            <span class="keyword">if</span>(index != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheLockException(<span class="string">"请指定被锁定参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> args[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最关键的RedisLock类中的lock方法和unlock方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * 使用方式为：</span></span><br><span class="line"><span class="comment">     * lock();</span></span><br><span class="line"><span class="comment">     * try&#123;</span></span><br><span class="line"><span class="comment">     *    executeMethod();</span></span><br><span class="line"><span class="comment">     * &#125;finally&#123;</span></span><br><span class="line"><span class="comment">     *   unlock();</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout timeout的时间范围内轮询锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire 设置锁超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功 or 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(<span class="keyword">long</span> timeout,<span class="keyword">int</span> expire)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nanoTime = System.nanoTime();</span><br><span class="line">        timeout *= MILLI_NANO_TIME;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//在timeout的时间范围内不断轮询锁</span></span><br><span class="line">            <span class="keyword">while</span> (System.nanoTime() - nanoTime &lt; timeout) &#123;</span><br><span class="line">                <span class="comment">//锁不存在的话，设置锁并设置锁过期时间，即加锁</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.redisClient.setnx(<span class="keyword">this</span>.key, LOCKED) == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.redisClient.expire(key, expire);<span class="comment">//设置锁过期时间是为了在没有释放</span></span><br><span class="line">                    <span class="comment">//锁的情况下锁过期后消失，不会造成永久阻塞</span></span><br><span class="line">                    <span class="keyword">this</span>.lock = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.lock;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"出现锁等待"</span>);</span><br><span class="line">                <span class="comment">//短暂休眠，避免可能的活锁</span></span><br><span class="line">                Thread.sleep(<span class="number">3</span>, RANDOM.nextInt(<span class="number">30</span>));</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"locking error"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.lock)&#123;</span><br><span class="line">                redisClient.delKey(key);<span class="comment">//直接删除</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述的代码是框架性的代码，现在来讲解如何使用上面的简单框架来写一个秒杀函数。 </p><p>先定义一个接口，接口里定义了一个秒杀方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeckillInterface</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*现在暂时只支持在接口方法上注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//cacheLock注解可能产生并发的方法</span></span><br><span class="line">    <span class="meta">@CacheLock</span>(lockedPrefix=<span class="string">"TEST_PREFIX"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secKill</span><span class="params">(String userID,@LockedObject Long commidityID)</span></span>;<span class="comment">//最简单的秒杀方法，参数是用户ID和商品ID。可能有多个线程争抢一个商品，所以商品ID加上LockedObject注解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述SeckillInterface接口的实现类，即秒杀的具体实现：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillImpl</span> <span class="keyword">implements</span> <span class="title">SeckillInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, Long&gt; inventory ;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        inventory = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        inventory.put(<span class="number">10000001L</span>, <span class="number">10000l</span>);</span><br><span class="line">        inventory.put(<span class="number">10000002L</span>, <span class="number">10000l</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secKill</span><span class="params">(String arg1, Long arg2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最简单的秒杀，这里仅作为demo示例</span></span><br><span class="line">        reduceInventory(arg2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟秒杀操作，姑且认为一个秒杀就是将库存减一，实际情景要复杂的多</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">reduceInventory</span><span class="params">(Long commodityId)</span></span>&#123;</span><br><span class="line">        inventory.put(commodityId,inventory.get(commodityId) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> inventory.get(commodityId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模拟秒杀场景，1000个线程来争抢两个商品：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecKill</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> splitPoint = <span class="number">500</span>;</span><br><span class="line">        CountDownLatch endCount = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line">        CountDownLatch beginCount = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        SecKillImpl testClass = <span class="keyword">new</span> SecKillImpl();</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[threadCount];</span><br><span class="line">        <span class="comment">//起500个线程，秒杀第一个商品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i &lt; splitPoint;i++)&#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span>  Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//等待在一个信号量上，挂起</span></span><br><span class="line">                        beginCount.await();</span><br><span class="line">                        <span class="comment">//用动态代理的方式调用secKill方法</span></span><br><span class="line">                        SeckillInterface proxy = (SeckillInterface) Proxy.newProxyInstance(SeckillInterface.class.getClassLoader(), </span><br><span class="line">                            <span class="keyword">new</span> Class[]&#123;SeckillInterface.class&#125;, <span class="keyword">new</span> CacheLockInterceptor(testClass));</span><br><span class="line">                        proxy.secKill(<span class="string">"test"</span>, commidityId1);</span><br><span class="line">                        endCount.countDown();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再起500个线程，秒杀第二件商品</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= splitPoint;i &lt; threadCount;i++)&#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span>  Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//等待在一个信号量上，挂起</span></span><br><span class="line">                        beginCount.await();</span><br><span class="line">                        <span class="comment">//用动态代理的方式调用secKill方法</span></span><br><span class="line">                        SeckillInterface proxy = (SeckillInterface) Proxy.newProxyInstance(SeckillInterface.class.getClassLoader(), </span><br><span class="line">                            <span class="keyword">new</span> Class[]&#123;SeckillInterface.class&#125;, <span class="keyword">new</span> CacheLockInterceptor(testClass));</span><br><span class="line">                        proxy.secKill(<span class="string">"test"</span>, commidityId2);</span><br><span class="line">                        <span class="comment">//testClass.testFunc("test", 10000001L);</span></span><br><span class="line">                        endCount.countDown();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//主线程释放开始信号量，并等待结束信号量，这样做保证1000个线程做到完全同时执行，保证测试的正确性</span></span><br><span class="line">        beginCount.countDown();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//主线程等待结束信号量</span></span><br><span class="line">            endCount.await();</span><br><span class="line">            <span class="comment">//观察秒杀结果是否正确</span></span><br><span class="line">            System.out.println(SecKillImpl.inventory.get(commidityId1));</span><br><span class="line">            System.out.println(SecKillImpl.inventory.get(commidityId2));</span><br><span class="line">            System.out.println(<span class="string">"error count"</span> + CacheLockInterceptor.ERROR_COUNT);</span><br><span class="line">            System.out.println(<span class="string">"total cost "</span> + (System.currentTimeMillis() - startTime));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在正确的预想下，应该每个商品的库存都减少了500，在多次试验后，实际情况符合预想。如果不采用锁机制，会出现库存减少499，498的情况。 </p><p>这里采用了动态代理的方法，利用注解和反射机制得到分布式锁ID，进行加锁和释放锁操作。当然也可以直接在方法进行这些操作，采用动态代理也是为了能够将锁操作代码集中在代理中，便于维护。 </p><p>通常秒杀场景发生在web项目中，可以考虑利用spring的AOP特性将锁操作代码置于切面中，当然AOP本质上也是动态代理。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这篇文章从业务场景出发，从抽象到实现阐述了如何利用redis实现分布式锁，完成简单的秒杀功能，也记录了笔者思考的过程，希望能给阅读到本篇文章的人一些启发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中遇到了类似“秒杀”的业务场景，在本篇博客中，我将用一个非常简单的demo，阐述实现所谓“秒杀”的基本思路。&lt;/p&gt;
&lt;h3 id=&quot;业务场景&quot;&gt;&lt;a href=&quot;#业务场景&quot; class=&quot;headerlink&quot; title=&quot;业务场景&quot;&gt;&lt;/a&gt;业务场景&lt;/h3&gt;&lt;p&gt;所谓秒杀，从业务角度看，是短时间内多个用户“争抢”资源，这里的资源在大部分秒杀场景里是商品；将业务抽象，技术角度看，秒杀就是多个线程对资源进行操作，所以实现秒杀，就必须控制线程对资源的争抢，既要保证高效并发，也要保证操作的正确。&lt;/p&gt;
&lt;h3 id=&quot;一些可能的实现&quot;&gt;&lt;a href=&quot;#一些可能的实现&quot; class=&quot;headerlink&quot; title=&quot;一些可能的实现&quot;&gt;&lt;/a&gt;一些可能的实现&lt;/h3&gt;&lt;p&gt;刚才提到过，实现秒杀的关键点是控制线程对资源的争抢，根据基本的线程知识，可以不加思索的想到下面的一些方法： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;秒杀在技术层面的抽象应该就是一个方法，在这个方法里可能的操作是将商品库存-1，将商品加入用户的购物车等等，在不考虑缓存的情况下应该是要操作数据库的。那么最简单直接的实现就是在这个方法上加上synchronized关键字，通俗的讲就是锁住整个方法； &lt;/li&gt;
&lt;li&gt;锁住整个方法这个策略简单方便，但是似乎有点粗暴。可以稍微优化一下，只锁住秒杀的代码块，比如写数据库的部分； &lt;/li&gt;
&lt;li&gt;既然有并发问题，那我就让他“不并发”，将所有的线程用一个队列管理起来，使之变成串行操作，自然不会有并发问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面所述的方法都是有效的，但是都不好。为什么？第一和第二种方法本质上是“加锁”，但是锁粒度依然比较高。什么意思？试想一下，如果两个线程同时执行秒杀方法，这两个线程操作的是不同的商品,从业务上讲应该是可以同时进行的，但是如果采用第一二种方法，这两个线程也会去争抢同一个锁，这其实是不必要的。第三种方法也没有解决上面说的问题。&lt;/p&gt;
&lt;p&gt;那么如何将锁控制在更细的粒度上呢？可以考虑为每个商品设置一个互斥锁，以和商品ID相关的字符串为唯一标识，这样就可以做到只有争抢同一件商品的线程互斥，不会导致所有的线程互斥。分布式锁恰好可以帮助我们解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="redis thread" scheme="http://yoursite.com/tags/redis-thread/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据类型介绍</title>
    <link href="http://yoursite.com/2018/01/07/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/01/07/Redis数据类型介绍/</id>
    <published>2018-01-07T13:29:32.000Z</published>
    <updated>2018-01-07T13:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>redis常用五种数据类型:string,hash,list,set,zset(sorted set).</p><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String是最简单的类型，一个key对应一个value。</p><p>String类型的数据最大1G。 </p><p>String类型的值可以被视作integer，从而可以让“INCR”命令族操作(incrby、decr、decrby),这种情况下，该integer的值限制在64位有符号数。 </p><p>在list、set和zset中包含的独立的元素类型都是Redis String类型。</p><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>链表类型，主要功能是push、pop、获取一个范围的所有值等。其中的key可以理解为链表的名字。</p><p>在Redis中，list就是Redis String的列表，按照插入顺序排序。比如使用LPUSH命令在list头插入一个元素，使用RPUSH命令在list的尾插入一个元素。当这两个命令之一作用于一个空的key时，一个新的list就创建出来了。</p><p>List的最大长度是2^32-1个元素。</p><a id="more"></a><h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>集合，和数学中的集合概念相似。操作中的key理解为集合的名字。</p><p>在Redis中，set就是Redis String的无序集合，不允许有重复元素。</p><p>Set的最大元素数是2^32-1。</p><p>Redis中对set的操作还有交集、并集、差集等。</p><h3 id="ZSet-Sorted-Set-类型"><a href="#ZSet-Sorted-Set-类型" class="headerlink" title="ZSet(Sorted Set)类型"></a>ZSet(Sorted Set)类型</h3><p>Zset是set的一个升级版本，在set的基础上增加了一个顺序属性，这一属性在添加修改元素时可以指定，每次指定后zset会自动安装指定值重新调整顺序。可以理解为一张表，一列存value，一列存顺序。操作中的key理解为zset的名字。</p><p>Zset的最大元素数是2^32-1。</p><p>对于已经有序的zset，仍然可以使用SORT命令，通过指定ASC|DESC参数对其进行排序。</p><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>hash是最接近关系数据库结构的数据类型，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中。</p><h3 id="jedis操作命令："><a href="#jedis操作命令：" class="headerlink" title="jedis操作命令："></a>jedis操作命令：</h3><ul><li><p>对value操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exists(key)：确认一个key是否存在</span><br><span class="line"></span><br><span class="line">del(key)：删除一个key</span><br><span class="line"></span><br><span class="line">type(key)：返回值的类型</span><br><span class="line"></span><br><span class="line">keys(pattern)：返回满足给定pattern的所有key</span><br><span class="line"></span><br><span class="line">randomkey：随机返回key空间的一个key</span><br><span class="line"></span><br><span class="line">rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</span><br><span class="line"></span><br><span class="line">dbsize：返回当前数据库中key的数目</span><br><span class="line"></span><br><span class="line">expire：设定一个key的活动时间（s）</span><br><span class="line"></span><br><span class="line">ttl：获得一个key的活动时间</span><br><span class="line"></span><br><span class="line">select(index)：按索引查询</span><br><span class="line"></span><br><span class="line">move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</span><br><span class="line"></span><br><span class="line">flushdb：删除当前选择数据库中的所有key</span><br><span class="line"></span><br><span class="line">flushall：删除所有数据库中的所有key</span><br></pre></td></tr></table></figure></li><li><p>对String操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set(key, value)：给数据库中名称为key的string赋予值value</span><br><span class="line"></span><br><span class="line">get(key)：返回数据库中名称为key的string的value</span><br><span class="line"></span><br><span class="line">getset(key, value)：给名称为key的string赋予上一次的value</span><br><span class="line"></span><br><span class="line">mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value     s</span><br><span class="line"></span><br><span class="line">setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</span><br><span class="line"></span><br><span class="line">setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</span><br><span class="line"></span><br><span class="line">mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</span><br><span class="line"></span><br><span class="line">msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，名称           key i赋值为value i</span><br><span class="line"></span><br><span class="line">incr(key)：名称为key的string增<span class="number">1</span>操作</span><br><span class="line"></span><br><span class="line">incrby(key, integer)：名称为key的string增加integer</span><br><span class="line"></span><br><span class="line">decr(key)：名称为key的string减<span class="number">1</span>操作</span><br><span class="line"></span><br><span class="line">decrby(key, integer)：名称为key的string减少integer</span><br><span class="line"></span><br><span class="line">append(key, value)：名称为key的string的值附加value</span><br><span class="line"></span><br><span class="line">substr(key, start, end)：返回名称为key的string的value的子串</span><br></pre></td></tr></table></figure></li><li><p>对List操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rpush(key, value)：在名称为key的list尾添加一个值为value的元素  </span><br><span class="line"></span><br><span class="line">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span><br><span class="line"></span><br><span class="line">llen(key)：返回名称为key的list的长度</span><br><span class="line"></span><br><span class="line">lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从<span class="number">0</span>开始，下同）</span><br><span class="line"></span><br><span class="line">ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</span><br><span class="line"></span><br><span class="line">lindex(key, index)：返回名称为key的list中index位置的元素</span><br><span class="line"></span><br><span class="line">lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</span><br><span class="line"></span><br><span class="line">lrem(key, count, value)：删除count个名称为key的list中值为value的元素。count为<span class="number">0</span>，删除所有值为value的元素，count&gt;<span class="number">0</span>      从头至尾删除count个值为value的元素，count&lt;<span class="number">0</span>从尾到头删除|count|个值为value的元素。</span><br><span class="line"></span><br><span class="line">lpop(key)：返回并删除名称为key的list中的首元素</span><br><span class="line"></span><br><span class="line">rpop(key)：返回并删除名称为key的list中的尾元素</span><br><span class="line"></span><br><span class="line">blpop(key1, key2,… key N, timeout)：lpop 命令的block版本。即当timeout为<span class="number">0</span>时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果 timeout&gt;<span class="number">0</span>，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对key i+<span class="number">1</span>开始的list执行pop操作。</span><br><span class="line"></span><br><span class="line">brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</span><br><span class="line"></span><br><span class="line">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span><br></pre></td></tr></table></figure></li><li><p>对Set操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sadd(key, member)：向名称为key的set中添加元素member</span><br><span class="line"></span><br><span class="line">srem(key, member) ：删除名称为key的set中的元素member</span><br><span class="line"></span><br><span class="line">spop(key) ：随机返回并删除名称为key的set中一个元素  </span><br><span class="line"></span><br><span class="line">smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</span><br><span class="line"></span><br><span class="line">scard(key) ：返回名称为key的set的基数        </span><br><span class="line"></span><br><span class="line">sismember(key, member) ：测试member是否是名称为key的set的元素</span><br><span class="line"></span><br><span class="line">sinter(key1, key2,…key N) ：求交集</span><br><span class="line"></span><br><span class="line">sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line">sunion(key1, key2,…key N) ：求并集</span><br><span class="line"></span><br><span class="line">sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line">sdiff(key1, key2,…key N) ：求差集</span><br><span class="line"></span><br><span class="line">sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line">smembers(key) ：返回名称为key的set的所有元素</span><br><span class="line"></span><br><span class="line">srandmember(key) ：随机返回名称为key的set的一个元素</span><br></pre></td></tr></table></figure></li><li><p>对zset（sorted set）操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</span><br><span class="line"></span><br><span class="line">zrem(key, member) ：删除名称为key的zset中的元素member</span><br><span class="line"></span><br><span class="line">zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment</span><br><span class="line"></span><br><span class="line">zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从<span class="number">0</span>开始），若没有member元素，返回“nil”</span><br><span class="line"></span><br><span class="line">zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从<span class="number">0</span>开始），若没有member元素，返回“nil”</span><br><span class="line"></span><br><span class="line">zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line">zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line">zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line">zcard(key)：返回名称为key的zset的基数</span><br><span class="line"></span><br><span class="line">zscore(key, element)：返回名称为key的zset中元素element的score</span><br><span class="line"></span><br><span class="line">zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line">zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line">zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为<span class="number">1</span>。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行 SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。</span><br></pre></td></tr></table></figure></li><li><p>对Hash操作的命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</span><br><span class="line"></span><br><span class="line">hget(key, field)：返回名称为key的hash中field对应的value</span><br><span class="line"></span><br><span class="line">hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</span><br><span class="line"></span><br><span class="line">hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</span><br><span class="line"></span><br><span class="line">hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</span><br><span class="line"></span><br><span class="line">hexists(key, field)：名称为key的hash中是否存在键为field的域</span><br><span class="line"></span><br><span class="line">hdel(key, field)：删除名称为key的hash中键为field的域</span><br><span class="line"></span><br><span class="line">hlen(key)：返回名称为key的hash中元素个数</span><br><span class="line"></span><br><span class="line">hkeys(key)：返回名称为key的hash中所有键</span><br><span class="line"></span><br><span class="line">hvals(key)：返回名称为key的hash中所有键对应的value</span><br><span class="line"></span><br><span class="line">hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</span><br></pre></td></tr></table></figure></li></ul><h3 id="各种数据类型所对应的应用场景"><a href="#各种数据类型所对应的应用场景" class="headerlink" title="各种数据类型所对应的应用场景"></a>各种数据类型所对应的应用场景</h3><ul><li><p><strong>String类型的应用场景</strong></p><p>String是最常用的一种数据类型,普通的key/value存储.</p></li><li><p><strong>list类型的应用场景</strong></p><p>比较适用于列表式存储且顺序相对比较固定，例如：</p><p>省份、城市列表</p><p>品牌、厂商、车系、车型等列表</p><p>拆车坊专题列表…</p></li><li><p><strong>set类型的应用场景</strong></p><p>Set对外提供的功能与list类似,当需要存储一个列表数据,又不希望出现重复数据时,可选用set</p></li><li><p><strong>zset(sorted set)类型的应用场景</strong></p><p>zset的使用场景与set类似,区别是set不是自动有序的,而zset可以通过用户额外提供一个优先级(score)的参数来为成员排序,并且是插入有序的,即自动排序.当你需要一个有序的并且不重复的集合列表,那么可以选择zset数据结构。例如:</p><p>根据PV排序的热门车系车型列表</p><p>根据时间排序的新闻列表</p></li><li><p><strong>hash类型的应用场景</strong></p><p>类似于表记录的存储</p><p>页面视图所需数据的存储</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;redis常用五种数据类型:string,hash,list,set,zset(sorted set).&lt;/p&gt;
&lt;h3 id=&quot;String类型&quot;&gt;&lt;a href=&quot;#String类型&quot; class=&quot;headerlink&quot; title=&quot;String类型&quot;&gt;&lt;/a&gt;String类型&lt;/h3&gt;&lt;p&gt;String是最简单的类型，一个key对应一个value。&lt;/p&gt;
&lt;p&gt;String类型的数据最大1G。 &lt;/p&gt;
&lt;p&gt;String类型的值可以被视作integer，从而可以让“INCR”命令族操作(incrby、decr、decrby),这种情况下，该integer的值限制在64位有符号数。 &lt;/p&gt;
&lt;p&gt;在list、set和zset中包含的独立的元素类型都是Redis String类型。&lt;/p&gt;
&lt;h3 id=&quot;List类型&quot;&gt;&lt;a href=&quot;#List类型&quot; class=&quot;headerlink&quot; title=&quot;List类型&quot;&gt;&lt;/a&gt;List类型&lt;/h3&gt;&lt;p&gt;链表类型，主要功能是push、pop、获取一个范围的所有值等。其中的key可以理解为链表的名字。&lt;/p&gt;
&lt;p&gt;在Redis中，list就是Redis String的列表，按照插入顺序排序。比如使用LPUSH命令在list头插入一个元素，使用RPUSH命令在list的尾插入一个元素。当这两个命令之一作用于一个空的key时，一个新的list就创建出来了。&lt;/p&gt;
&lt;p&gt;List的最大长度是2^32-1个元素。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="technology" scheme="http://yoursite.com/tags/technology/"/>
    
      <category term="redis type" scheme="http://yoursite.com/tags/redis-type/"/>
    
  </entry>
  
</feed>
